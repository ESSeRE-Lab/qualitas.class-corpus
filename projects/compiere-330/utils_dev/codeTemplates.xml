<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Compiere Cache" enabled="true" name="cacheGet">/**&#13;
 * 	Get ${enclosing_type} from Cache&#13;
 *	@param ctx context&#13;
 *	@param _ID id&#13;
 *	@return ${enclosing_type}&#13;
 */&#13;
public static ${enclosing_type} get (Ctx ctx, int _ID)&#13;
{&#13;
	Integer key = new Integer (_ID);&#13;
	${enclosing_type} retValue = s_cache.get(ctx, key);&#13;
	if (retValue != null)&#13;
		return retValue;&#13;
	retValue = new ${enclosing_type} (ctx, _ID, null);&#13;
	if (retValue.get_ID() != 0)&#13;
		s_cache.put(key, retValue);&#13;
	return retValue;&#13;
}	//	get&#13;
	&#13;
/**	Cache						*/&#13;
private static CCache&lt;Integer,${enclosing_type}&gt; s_cache &#13;
= new CCache&lt;Integer,${enclosing_type}&gt;("", 20);&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Compiere getLines" enabled="true" name="getLines">/**	The Lines						*/&#13;
private ArrayList&lt;${array_type}&gt;		m_lines = null;&#13;
&#13;
/**&#13;
 * 	Get Lines&#13;
 *	@param reload reload data&#13;
 *	@return list of lines&#13;
 */&#13;
public ArrayList&lt;${array_type}&gt; getLines (boolean reload)&#13;
{&#13;
	if (m_lines != null &amp;&amp; !reload)&#13;
		return m_lines;&#13;
	m_lines = new ArrayList&lt;${array_type}&gt;();&#13;
	${cursor}&#13;
&#13;
	//&#13;
	return m_lines;&#13;
}	//	getLines&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Compiere jdbc" enabled="true" name="jdbc">		ArrayList&lt;${enclosing_type}&gt; list = new ArrayList&lt;${enclosing_type}&gt;();&#13;
		PreparedStatement pstmt = null;&#13;
		try&#13;
		{&#13;
			pstmt = DB.prepareStatement (sql, get_TrxName());&#13;
			pstmt.setInt (1, x);&#13;
			ResultSet rs = pstmt.executeQuery();&#13;
			while (rs.next ())&#13;
				list.add(new ${enclosing_type}(getCtx(), rs, get_TrxName()));&#13;
			rs.close ();&#13;
			pstmt.close ();&#13;
			pstmt = null;&#13;
		}&#13;
		catch (Exception e)&#13;
		{&#13;
			log.log(Level.SEVERE, sql, e);&#13;
		}&#13;
		try&#13;
		{&#13;
			if (pstmt != null)&#13;
				pstmt.close ();&#13;
			pstmt = null;&#13;
		}&#13;
		catch (Exception e)&#13;
		{&#13;
			pstmt = null;&#13;
		}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Compiere Logger" enabled="true" name="Logger">/**	Logger	*/&#13;
private static CLogger log = CLogger.getCLogger(${enclosing_type}.class);&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Compiere Create List and then Array" enabled="true" name="toArray">		ArrayList&lt;${enclosing_type}&gt; list = new ArrayList&lt;${enclosing_type}&gt;();&#13;
&#13;
		${enclosing_type}[] retValue = new ${enclosing_type}[list.size()];&#13;
		list.toArray (retValue);&#13;
		return retValue;&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Compiere toString" enabled="true" name="toString">/**&#13;
 * 	String Representation&#13;
 *	@return info&#13;
 */&#13;
public String toString()&#13;
{&#13;
	StringBuffer sb = new StringBuffer("${enclosing_type}[")&#13;
		.append(get_ID()).append("-").append(getName());&#13;
	sb.append("]");&#13;
	return sb.toString();&#13;
}	//	toString</template></templates>
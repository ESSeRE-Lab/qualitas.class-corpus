/* Generated By:JavaCC: Do not edit this line. AxionSqlParserConstants.java */
package org.axiondb.parser;

public interface AxionSqlParserConstants {

  int EOF = 0;
  int LINE_COMMENT = 5;
  int BLOCK_COMMENT = 6;
  int ADD = 7;
  int ALL = 8;
  int ALTER = 9;
  int AND = 10;
  int ASC = 11;
  int BEGIN = 12;
  int BETWEEN = 13;
  int BY = 14;
  int CASE = 15;
  int CHECK = 16;
  int CREATE = 17;
  int CONSTRAINT = 18;
  int DEFERRED = 19;
  int DEFERRABLE = 20;
  int DELETE = 21;
  int DESC = 22;
  int DISTINCT = 23;
  int DROP = 24;
  int ELSE = 25;
  int END = 26;
  int EXISTS = 27;
  int FALSE = 28;
  int FROM = 29;
  int GROUP = 30;
  int HAVING = 31;
  int IF = 32;
  int IMMEDIATE = 33;
  int IN = 34;
  int INITIALLY = 35;
  int INDEX = 36;
  int INNER = 37;
  int INSERT = 38;
  int INTO = 39;
  int IS = 40;
  int JOIN = 41;
  int KEY = 42;
  int LEFT = 43;
  int LIKE = 44;
  int LIMIT = 45;
  int NOT = 46;
  int NULL = 47;
  int OFFSET = 48;
  int ON = 49;
  int OR = 50;
  int ORDER = 51;
  int OUTER = 52;
  int PRIMARY = 53;
  int RIGHT = 54;
  int SELECT = 55;
  int SEQUENCE = 56;
  int SET = 57;
  int STARTS = 58;
  int SYSDATE = 59;
  int TABLE = 60;
  int THEN = 61;
  int TRUE = 62;
  int UNIQUE = 63;
  int UPDATE = 64;
  int USER = 65;
  int VALUES = 66;
  int WHEN = 67;
  int WHERE = 68;
  int WITH = 69;
  int INTEGER_LITERAL = 70;
  int FLOATING_POINT_LITERAL = 71;
  int EXPONENT = 72;
  int STRING_LITERAL = 73;
  int ID = 74;
  int LETTER = 75;
  int DIGIT = 76;
  int ASSIGN = 77;
  int COMMA = 78;
  int CONCAT = 79;
  int SEMICOLON = 80;
  int DOT = 81;
  int LESS = 82;
  int LESSEQUAL = 83;
  int GREATER = 84;
  int GREATEREQUAL = 85;
  int EQUAL = 86;
  int NOTEQUAL = 87;
  int NOTEQUAL2 = 88;
  int JOINPLUS = 89;
  int OPENPAREN = 90;
  int CLOSEPAREN = 91;
  int ASTERISK = 92;
  int SLASH = 93;
  int PLUS = 94;
  int MINUS = 95;
  int QUESTIONMARK = 96;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "<LINE_COMMENT>",
    "<BLOCK_COMMENT>",
    "\"add\"",
    "\"all\"",
    "\"alter\"",
    "\"and\"",
    "\"asc\"",
    "\"begin\"",
    "\"between\"",
    "\"by\"",
    "\"case\"",
    "\"check\"",
    "\"create\"",
    "\"constraint\"",
    "\"deferred\"",
    "\"deferrable\"",
    "\"delete\"",
    "\"desc\"",
    "\"distinct\"",
    "\"drop\"",
    "\"else\"",
    "\"end\"",
    "\"exists\"",
    "\"false\"",
    "\"from\"",
    "\"group\"",
    "\"having\"",
    "\"if\"",
    "\"immediate\"",
    "\"in\"",
    "\"initially\"",
    "\"index\"",
    "\"inner\"",
    "\"insert\"",
    "\"into\"",
    "\"is\"",
    "\"join\"",
    "\"key\"",
    "\"left\"",
    "\"like\"",
    "\"limit\"",
    "\"not\"",
    "\"null\"",
    "\"offset\"",
    "\"on\"",
    "\"or\"",
    "\"order\"",
    "\"outer\"",
    "\"primary\"",
    "\"right\"",
    "\"select\"",
    "\"sequence\"",
    "\"set\"",
    "\"starts\"",
    "\"sysdate\"",
    "\"table\"",
    "\"then\"",
    "\"true\"",
    "\"unique\"",
    "\"update\"",
    "\"user\"",
    "\"values\"",
    "\"when\"",
    "\"where\"",
    "\"with\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
    "\":=\"",
    "\",\"",
    "\"||\"",
    "\";\"",
    "\".\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"<>\"",
    "\"(+)\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"?\"",
  };

}

# $Id: checklist_de.properties 335 2010-02-21 09:54:00Z BraunHarald $
#******************************************************************************
# Copyright (c) 2009 Contributors - see below
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#    mvw
#******************************************************************************
#
# Some portions of this file was previously release using the BSD License:
#
# Copyright (c) 2005 The Regents of the University of California. All
# Rights Reserved. Permission to use, copy, modify, and distribute this
# software and its documentation without fee, and without a written
# agreement is hereby granted, provided that the above copyright notice
# and this paragraph appear in all copies.  This software program and
# documentation are copyrighted by The Regents of the University of
# California. The software program and documentation are supplied "AS
# IS", without any accompanying services from The Regents. The Regents
# does not warrant that the operation of the program will be
# uninterrupted or error-free. The end-user understands that the program
# was developed for research purposes and is advised not to rely
# exclusively on the program for any reason.  IN NO EVENT SHALL THE
# UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
# Keys in the same order as in org.argouml.uml.cognitive.critics.Init
#
# NOTE TO TRANSLATORS: The string "<ocl>self</ocl>" will be replaced
# at runtime with the name of the model element.  This string should
# not be translated.
#
checklist.actor.encoding = Codieren
checklist.actor.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in zwei \
	oder mehrere Klassen aufgeteilt werden?
checklist.actor.encoding.convert-to-attribute = Sollte \"<ocl>self</ocl>\" \
	eine eigene Klasse bilden, oder nur ein einfaches Attribut einer anderen \
	Klasse sein?
checklist.actor.encoding.do-just-one-thing = Tut \"<ocl>self</ocl>\" exakt \
	eine einzige Sache und tut sie es richtig?
checklist.actor.location = Ort
checklist.actor.location.eliminate-from-model = Kann \"<ocl>self</ocl>\" aus \
	dem Modell entfernt werden?
checklist.actor.location.eliminates-or-affects-something-else = Gibt es im \
	Modell eine andere Klasse, die \u00FCberarbeitet oder entfernt werden 
	sollte, weil sie dem gleichen Zweck dient wie \"<ocl>self</ocl>\"?
checklist.actor.location.move-somewhere = Kann \"<ocl>self</ocl>\" an einer \
	anderen Stelle in der Klassenhierarchie definiert werden?
checklist.actor.location.planned-subclasses = Haben Sie eine Unterklasse von \
	\"<ocl>self</ocl>\" geplant?
checklist.actor.naming = Bezeichnung
checklist.actor.naming.describe-clearly = Gibt der Name \"<ocl>self</ocl>\" \
	eine klare Beschreibung der Klasse?
checklist.actor.naming.is-noun = Ist \"<ocl>self</ocl>\" ein Substantiv oder \
	ein substantiv\u00E4hnlicher Ausdruck?
checklist.actor.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" falsch \
	interpretiert werden und etwas anderes bedeuten?
checklist.actor.updates = \u00C4nderungen
checklist.actor.updates.affects-something-else = Gibt es andere Objekte, die \
	ge\u00E4ndert werden m\u00FCssen, wenn \"<ocl>self</ocl>\" ge\u00E4ndert \
	wurde?
checklist.actor.updates.reasons-for-update = In welchen F\u00E4llen wird eine \
	Objekt von \"<ocl>self</ocl>\" ge\u00E4ndert?
checklist.actor.value = Wert
checklist.actor.value.convert-to-invariant = K\u00F6nnen Sie einen \
	unver\u00E4nderlichen Wert in diese Klasse schreiben?
checklist.actor.value.establish-invariant-in-constructors = Initialisieren \
	alle Konstruktoren diesen unver\u00E4nderlichen Wert?
checklist.actor.value.maintain-invariant = Verwenden alle Methoden diesen \
	unver\u00E4nderlichen Wert?
checklist.actor.value.start-with-meaningful-values = Sind alle Attribute \
	von \"<ocl>self</ocl>\" mit sinnvollen Werten initialisiert?
checklist.association.encoding = Codieren
checklist.association.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in \
	zwei oder mehrere Klassen aufgeteilt werden?
checklist.association.encoding.convert-to-attribute = Sollte \
	\"<ocl>self</ocl>\" eine eigene Klasse bilden, oder nur ein einfaches \
	Attribut einer anderen Klasse sein?
checklist.association.encoding.do-just-one-thing = Tut \"<ocl>self</ocl>\" \
	exakt eine einzige Sache und tut sie es richtig?
checklist.association.location = Ort
checklist.association.location.eliminate-from-model = Kann \"<ocl>self</ocl>\" \
	aus dem Modell entfernt werden?
checklist.association.location.eliminates-or-affects-something-else = Gibt es \
	im Modell eine andere Klasse, die \u00FCberarbeitet oder entfernt werden \
	sollte, weil sie dem gleichen Zweck dient wie \"<ocl>self</ocl>\"?
checklist.association.location.move-somewhere = Kann \"<ocl>self</ocl>\" an \
	einer anderen Stelle in der Klassenhierarchie definiert werden?
checklist.association.location.planned-subclasses = Haben Sie eine Unterklasse \
	von \"<ocl>self</ocl>\" geplant?
checklist.association.naming=Bezeichnung	
checklist.association.naming.describe-clearly = Gibt der Name \
	\"<ocl>self</ocl>\" eine klare Beschreibung der Klasse?
checklist.association.naming.is-noun = 	Ist \"<ocl>self</ocl>\" \
	ein Substantiv oder ein substantiv\u00E4hnlicher Ausdruck?
checklist.association.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" \
	falsch interpretiert werden und etwas anderes bedeuten?
checklist.association.updates = \u00C4nderungen
checklist.association.updates.affects-something-else = Gibt es andere Objekte, \
	die ge\u00E4ndert werden m\u00FCssen, wenn \"<ocl>self</ocl>\" ge\u00E4ndert \
	wurde?
checklist.association.updates.reasons-for-update = In welchen F\u00E4llen wird \
	ein Objekt von \"<ocl>self</ocl>\" ge\u00E4ndert?
checklist.association.value = Wert
checklist.association.value.convert-to-invariant = K\u00F6nnen Sie einen \
	unver\u00E4nderlichen Wert in diese Klasse schreiben?
checklist.association.value.establish-invariant-in-constructors = \
	Initialisieren alle Konstruktoren diesen unver\u00E4nderlichen Wert?
checklist.association.value.maintain-invariant = Verwenden alle Methoden \
	diesen unver\u00E4nderlichen Wert?
checklist.association.value.start-with-meaningful-values = Sind alle \
	Attribute von \"<ocl>self</ocl>\" mit sinnvollen Werten initialisiert?
checklist.attribute.encoding = Codieren
checklist.attribute.encoding.allow-impossible-values = L\u00E4\u00DFt der Typ \
	<ocl>self.type</ocl> Werte f\u00FCr \"<ocl>self</ocl>\" zu, die niemals \
	richtig sein k\u00F6nnen?
checklist.attribute.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in \
	zwei oder mehrere Teile aufgeteilt werden (z.B.: eine Telefonnummer kann \
	in den Bereichscode, den Pr\u00E4fix und die Nummer unterteilt werden)?
checklist.attribute.encoding.combine-with-other = Kann \"<ocl>self</ocl>\" mit \
	einigen anderen Attributen des <ocl>self.owner</ocl> kombiniert werden \
	(z.B.: {owner.structuralFeature})?
checklist.attribute.encoding.is-computable = Kann \"<ocl>self</ocl>\" aus \
	anderen Attributen berechnet werden, ohne da\u00DF es gespeichert werden \
	mu\u00DF?
checklist.attribute.encoding.is-too-restrictive = Ist der Typ \
	<ocl>self.type</ocl> zu eingeschr\u00E4nkt, um alle m\u00F6glichen Werte \
	von \"<ocl>self</ocl>\" darzustellen?
checklist.attribute.location = Ort
checklist.attribute.location.could-be-eliminated = Kann \"<ocl>self</ocl>\" \
	aus dem Modell entfernt werden?
checklist.attribute.location.eliminates-or-affects-something-else = Gibt es \
	ein anderes Attribut im Modell, das ge\u00E4ndert oder entfernt werden \
	sollte, weil es dem gleichen Zweck wie \"<ocl>self</ocl>\" dient?
checklist.attribute.location.include-all = Kann \"<ocl>self</ocl>\" auf alle \
	Objekte der Klasse <ocl>self.owner</ocl>, einschlie\u00DFlich der Objekte \
	der Unterklassen angewendet werden?
checklist.attribute.location.move-somewhere = Kann \"<ocl>self</ocl>\" in \
	einer anderen Klasse definiert werden, die mit <ocl>self.owner</ocl> \
	assoziiert ist?
checklist.attribute.location.move-up-hierarchy = Kann \"<ocl>self</ocl>\" in \
	der Vererbungshierarchie hochsteigen, um es f\u00FCr den owner.name und \
	mit anderen Klassen verwenden zu k\u00F6nnen?
checklist.attribute.naming = Bezeichnung
checklist.attribute.naming.describe-clearly = Gibt der Name \
	\"<ocl>self</ocl>\" eine klare Beschreibung des Attributes wieder?
checklist.attribute.naming.is-noun = 	Ist \"<ocl>self</ocl>\" ein Substantiv \
	oder ein substantiv\u00E4hnlicher Ausdruck?
checklist.attribute.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" \
	falsch interpretiert werden und etwas anderes bedeuten?
checklist.attribute.updates = \u00C4nderungen
checklist.attribute.updates.affects-something-else = Gibt es einige andere \
	Attribute, die ge\u00E4ndert werden m\u00FCssen, wenn \"<ocl>self</ocl>\" \
	ge\u00E4ndert wird?
checklist.attribute.updates.exists-method-for-specific-value = Gibt es eine \
	Methode, die aufgerufen werden sollte, wenn \"<ocl>self</ocl>\" einen \
	bestimmten Wert erh\u00E4lt?
checklist.attribute.updates.exists-method-for-update = Gibt es eine Methode, \
	die aufgerufen werden sollte, wenn \"<ocl>self</ocl>\" ge\u00E4ndert wird?
checklist.attribute.updates.reasons-for-update = In welchen F\u00E4llen wird \
	\"<ocl>self</ocl>\" ge\u00E4ndert?
checklist.attribute.value = Wert
checklist.attribute.value.correct-default-value = Ist der Anfangswert \
	<ocl>self.initialValue</ocl> richtig?
checklist.attribute.value.default-value = Sollte \"<ocl>self</ocl>\" einen \
	Anfangswert (Standardwert) aufweisen?
checklist.attribute.value.is-correctness-checkable = K\u00F6nnen Sie einen \
	Ausdruck schreiben, um zu pr\u00FCfen, ob \"<ocl>self</ocl>\" richtig ist? \
	Plausibel?
checklist.class.encoding = Codieren
checklist.class.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in zwei \
	oder mehrere Klassen aufgeteilt werden?
checklist.class.encoding.convert-to-attribute = Sollte \"<ocl>self</ocl>\" \
	eine eigene Klasse bilden, oder nur ein einfaches Attribut einer anderen \
	Klasse sein?
checklist.class.encoding.do-just-one-thing = Tut \"<ocl>self</ocl>\" exakt \
	eine einzige Sache und tut sie es richtig?
checklist.class.location = Ort
checklist.class.location.eliminate-from-model = Kann \"<ocl>self</ocl>\" aus \
	dem Modell entfernt werden?
checklist.class.location.eliminates-or-affects-something-else = Gibt es im \
	Modell eine andere Klasse, die ge\u00E4ndert oder entfernt werden sollte, \
	weil sie dem gleichen Zweck dient wie \"<ocl>self</ocl>\"?
checklist.class.location.move-somewhere = Kann \"<ocl>self</ocl>\" an einer \
	anderen Stelle in der Klassenhierarchie definiert werden?
checklist.class.location.planned-subclasses = Haben Sie eine Unterklasse von \
	\"<ocl>self</ocl>\" geplant?
checklist.class.naming = Bezeichnung
checklist.class.naming.describe-clearly = Gibt der Name \"<ocl>self</ocl>\" \
	eine klare Beschreibung der Klasse wieder?
checklist.class.naming.is-noun = Ist \"<ocl>self</ocl>\" ein Substantiv \
	oder ein substantiv\u00E4hnlicher Ausdruck?
checklist.class.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" falsch \
	interpretiert werden und etwas anderes bedeuten?
checklist.class.updates = \u00C4nderungen
checklist.class.updates.affects-something-else = Gibt es andere Objekte, die \
	ge\u00E4ndert werden m\u00FCssen, wenn \"<ocl>self</ocl>\" ge\u00E4ndert \
	wurde?
checklist.class.updates.reasons-for-update = In welchen F\u00E4llen wird ein \
	Objekt von \"<ocl>self</ocl>\" ge\u00E4ndert?
checklist.class.value = Wert
checklist.class.value.convert-to-invariant = K\u00F6nnen Sie einen \
	unver\u00E4nderlichen Wert f\u00FCr diese Klasse schreiben?
checklist.class.value.establish-invariant-in-constructors = Initialisieren \
	alle Konstruktoren diesen unver\u00E4nderlichen Wert?
checklist.class.value.maintain-invariant = Behandeln alle Methoden diesen \
	unver\u00E4nderlichen Wert?
checklist.class.value.start-with-meaningful-values = Sind alle Attribute \
	von \"<ocl>self</ocl>\" mit sinnvollen Werten initialisiert?
checklist.instance.actions = Aktionen
checklist.instance.actions.list-do-action = Welche Aktionen sollen innerhalb \
	von \"<ocl>self</ocl>\" ausgef\u00FChrt werden?
checklist.instance.actions.list-entry-actions = Welche Aktion soll beim \
	Eintritt in \"<ocl>self</ocl>\" ausgef\u00FChrt werden?
checklist.instance.actions.list-exit-action = Welche Aktion sollte beim \
	Verlassen von \"<ocl>self</ocl>\" ausgef\u00FChrt werden?
checklist.instance.actions.maintained-state = Verarbeiten Zustandsaktionen \
	\"<ocl>self</ocl>\" als aktuellen Zustand?
checklist.instance.actions.update-attribute-on-entry = Sollten einige \
	Attribute beim Eintritt in \"<ocl>self</ocl>\" ge\u00E4ndert werden?
checklist.instance.actions.update-attribute-on-exit = Sollten einige Attribute \
	beim Verlassen von \"<ocl>self</ocl>\" ge\u00E4ndert werden?
checklist.instance.general = Allgemeines
checklist.instance.general.describe-clearly = Ist das Objekt 
	\"<ocl>self</ocl>\" klar beschrieben?
checklist.instance.naming = Bezeichnung
checklist.instance.naming.denotes-state = Beschreibt \"<ocl>self</ocl>\" mehr \
	einen Zustand als eine Aktivit\u00E4t?
checklist.instance.naming.describe-clearly = Gibt der Name \"<ocl>self</ocl>\" \
	eine klare Beschreibung des Objektes wieder?
checklist.instance.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" \
	falsch interpretiert werden und etwas anderes bedeuten?
checklist.instance.structure = Struktur
checklist.instance.structure.belong = Geh\u00F6rt \"<ocl>self</ocl>\" zu \
	diesem oder zu einem anderen Zustandsautomaten?
checklist.instance.structure.break-into-parts = Kann \"<ocl>self</ocl>\" in \
	zwei oder mehrere Zust\u00E4nde aufgeteilt werden?
checklist.instance.structure.can-write-characteristic-equation = K\u00F6nnen \
	Sie eine charakteristische Gleichung f\u00FCr \"<ocl>self</ocl>\" \
	schreiben?
checklist.instance.structure.do-just-one-thing = Tut \"<ocl>self</ocl>\" exakt \
	eine einzige Sache und tut sie es richtig?
checklist.instance.structure.is-state-in-another-machine-exclusive = \
	Geh\u00F6ren einige Zust\u00E4nde im anderen Zustandsautomaten exklusiv zu \
	\"<ocl>self</ocl>\"?
checklist.instance.structure.make-internal = Soll \"<ocl>self</ocl>\" ein \
	Anfangszustand sein?
checklist.instance.structure.merged-with-other = Sollte \"<ocl>self</ocl>\" \
	seinen eigenen Zustand darstellen, oder kann er mit einem anderen Zustand \
	gemischt werden?
checklist.instance.transitions = Zustand\u00FCberg\u00E4nge
checklist.instance.transitions.are-transitions-out-of-exclusive = Ist jede \
	gehende Transition exklusiv?
checklist.instance.transitions.combine-with-other-incoming = K\u00F6nnen \
	einige kommende Transitionen kombiniert werden?
checklist.instance.transitions.combine-with-other-outgoing = K\u00F6nnen \
	einige gehende Transitionen kombiniert werden?
checklist.instance.transitions.need-another-transition-into = Sollte es eine \
	andere Transtition zu \"<ocl>self</ocl>\" geben?
checklist.instance.transitions.need-another-transition-out-of = Sollte es \
	eine andere Transition gehend von \"<ocl>self</ocl>\" geben?
checklist.instance.transitions.use-all-transitions-into = K\u00F6nnen alle \
	Transitionen in \"<ocl>self</ocl>\" verwendet werden?
checklist.instance.transitions.use-all-transitions-out-of = K\u00F6nnen alle \
	gehenden Transitionen von \"<ocl>self</ocl>\" verwendet \
	werden?
checklist.interface.encoding = Codieren
checklist.interface.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in \
	zwei oder mehrere Klassen aufgeteilt werden?
checklist.interface.encoding.convert-to-attribute = Sollte \"<ocl>self</ocl>\" \
	eine eigene Klasse bilden, oder nur ein einfaches Attribut einer anderen \
	Klasse sein?
checklist.interface.encoding.do-just-one-thing = Tut \"<ocl>self</ocl>\" exakt \
	eine einzige Sache und tut sie es richtig?
checklist.interface.location = Ort
checklist.interface.location.eliminate-from-model = Kann \"<ocl>self</ocl>\" \
	aus dem Modell entfernt werden?
checklist.interface.location.eliminates-or-affects-something-else = Gibt es im \
	Modell eine andere Klasse, die ge\u00E4ndert oder entfernt werden sollte, \
	weil sie dem gleichen Zweck dient wie \"<ocl>self</ocl>\"?
checklist.interface.location.move-somewhere = Kann \"<ocl>self</ocl>\" an \
	einer anderen Stelle in der Klassenhierarchie definiert werden?
checklist.interface.location.planned-subclasses = Haben Sie eine Unterklasse \
	von \"<ocl>self</ocl>\" geplant?
checklist.interface.naming = Bezeichnung
checklist.interface.naming.describe-clearly = Gibt der Name \
	\"<ocl>self</ocl>\" eine klare Beschreibung der Klasse wieder?
checklist.interface.naming.is-noun = Ist \"<ocl>self</ocl>\" ein Substantiv \
	oder ein substantiv\u00E4hnlicher Ausdruck?
checklist.interface.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" \
	falsch interpretiert werden und etwas anderes bedeuten?
checklist.interface.updates = \u00C4nderungen
checklist.interface.updates.affects-something-else = Gibt es andere Objekte, \
	die ge\u00E4ndert werden m\u00FCssen, wenn \"<ocl>self</ocl>\" \
	ge\u00E4ndert wurde?
checklist.interface.updates.reasons-for-update = In welchen F\u00E4llen wird \
	ein Objekt von \"<ocl>self</ocl>\" ge\u00E4ndert?
checklist.interface.value = Wert
checklist.interface.value.convert-to-invariant = K\u00F6nnen Sie einen \
	unver\u00E4nderlichen Wert f\u00FCr diese Klasse schreiben?
checklist.interface.value.establish-invariant-in-constructors = Initialisieren \
	alle Konstruktoren diesen unver\u00E4nderlichen Wert?
checklist.interface.value.maintain-invariant = Verarbeiten alle Methoden \
	diesen unver\u00E4nderlichen Wert?
checklist.interface.value.start-with-meaningful-values = Sind alle Attribute \
	von \"<ocl>self</ocl>\" mit sinnvollen Werten initialisiert?
checklist.link.encoding = Codieren
checklist.link.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in zwei \
	oder mehrere Klassen aufgeteilt werden?
checklist.link.encoding.convert-to-attribute = Sollte \"<ocl>self</ocl>\" eine \
	eigene Klasse bilden, oder nur ein einfaches Attribut einer anderen Klasse \
	sein?
checklist.link.encoding.do-just-one-thing = Tut \"<ocl>self</ocl>\" exakt eine \
	einzige Sache und tut sie es richtig?
checklist.link.location = Ort
checklist.link.location.eliminate-from-model = Kann \"<ocl>self</ocl>\" aus \
	dem Modell entfernt werden?
checklist.link.location.eliminates-or-affects-something-else = Gibt es im \
	Modell eine andere Klasse, die \u00FCberarbeitet oder entfernt werden \
	sollte, weil sie dem gleichen Zweck dient wie \"<ocl>self</ocl>\"?
checklist.link.location.move-somewhere = Kann \"<ocl>self</ocl>\" an einer \
	anderen Stelle in der Klassenhierarchie definiert werden?
checklist.link.location.planned-subclasses = Haben Sie eine Subklasse von \
	\"<ocl>self</ocl>\" geplant?
checklist.link.naming = Bezeichnung
checklist.link.naming.describe-clearly = Gibt der Name \"<ocl>self</ocl>\" \
	eine klare Beschreibung der Klasse wieder?
checklist.link.naming.is-noun = Ist \"<ocl>self</ocl>\" ein Substantiv oder \
	ein substantiv\u00E4hnlicher Ausdruck?
checklist.link.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" falsch \
	interpretiert werden und etwas anderes bedeuten?
checklist.link.updates = \u00C4nderungen
checklist.link.updates.affects-something-else = Gibt es andere Objekte, \
	die ge\u00E4ndert werden m\u00FCssen, wenn \"<ocl>self</ocl>\" \
	ge\u00E4ndert wurde?
checklist.link.updates.reasons-for-update = In welchen F\u00E4llen wird ein \
	Objekt von \"<ocl>self</ocl>\" ge\u00E4ndert?
checklist.link.value = Wert
checklist.link.value.convert-to-invariant = K\u00F6nnen Sie einen \
	unver\u00E4nderlichen Wert f\u00FCr diese Klasse schreiben?
checklist.link.value.establish-invariant-in-constructors = Initialisieren alle \
	Konstruktoren diesen unver\u00E4nderlichen Wert?
checklist.link.value.maintain-invariant = Verarbeiten alle Methoden diesen \
	unver\u00E4nderlichen Wert?
checklist.link.value.start-with-meaningful-values = Sind alle Attribute von \
	\"<ocl>self</ocl>\" mit sinnvollen Werten initialisiert?
checklist.operation.encoding = Codieren
checklist.operation.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in \
	zwei oder mehrere Teile aufgeteilt werden (z.B.: Vorverarbeitung, \
	Hauptverarbeitung und Nachverarbeitung)?
checklist.operation.encoding.break-into-series = Kann \"<ocl>self</ocl>\" \
	durch eine Reihe von Clientaufrufen in einfachere Methoden aufgeteilt \
	werden?
checklist.operation.encoding.combine-with-other = Kann \"<ocl>self</ocl>\" mit \
	einigen anderen Methoden von <ocl>self.owner</ocl> kombiniert werden \
	(z.B.: <ocl sep=', '>self.owner.behavioralFeature</ocl>)?
checklist.operation.encoding.does-returntype-allow-impossible-values = Erlaubt \
	'<ocl>self.returnType</ocl>' R\u00FCckgabewerte, die niemals korrekt sein \
	k\u00F6nnen?
checklist.operation.encoding.is-returntype-too-restrictive = Ist der Typ des \
	R\u00FCckgabewertes '<ocl>self.returnType</ocl>' zu restriktiv, um alle \
	m\u00F6glichen, von \"<ocl>self</ocl>\" zur\u00FCckgegebenen Werte \
	darzustellen?
checklist.operation.encoding.reduce-number-of-calls = Kann \"<ocl>self</ocl>\" \
	mit anderen Methoden kombiniert werden, um die Anzahl der Clientaufrufe zu \
	reduzieren?
checklist.operation.location = Ort
checklist.operation.location.could-be-eliminated = Kann \"<ocl>self</ocl>\" \
	aus dem Modell entfernt werden?
checklist.operation.location.eliminates-or-affects-something-else = Gibt es \
	eine andere Methode im Modell, die ge\u00E4ndert oder entfernt werden \
	sollte, weil sie dem gleichen Zweck wie \"<ocl>self</ocl>\" dient?
checklist.operation.location.include-all = Kann \"<ocl>self</ocl>\" auf alle \
	Objekte der Klasse <ocl>self.owner</ocl>, einschlie\u00DFlich der Objekte \
	der Unterklassen angewendet werden?
checklist.operation.location.move-somewhere = Kann \"<ocl>self</ocl>\" in \
	einer anderen Klasse definiert werden, die mit <ocl>self.owner</ocl> \
	assoziiert ist?
checklist.operation.location.move-up-hierarchy = Kann \"<ocl>self</ocl>\" \
	die Vererbungshierarchie hochsteigen, um es f\u00FCr den owner.name und \
	mit anderen Klassen zu verwenden?
checklist.operation.naming = Bezeichnung
checklist.operation.naming.describe-clearly = Gibt der Name \
	\"<ocl>self</ocl>\" eine klare Beschreibung der Methode wieder?
checklist.operation.naming.do-just-one-thing = Tut \"<ocl>self</ocl>\" eine \
	Sache und tut sie es richtig?
checklist.operation.naming.is-verb = Ist \"<ocl>self</ocl>\" ein Verb oder ein \
	verbaler Ausdruck?
checklist.operation.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" \
	falsch interpretiert werden und etwas anderes bedeuten?
checklist.operation.value = Wert
checklist.operation.value.are-special-cases = Gibt es spezielle F\u00E4lle, \
	die separat verarbeitet werden m\u00FCssen?
checklist.operation.value.express-postconditions-possible = K\u00F6nnen Sie \
	die Nachbedingungen von \"<ocl>self</ocl>\" ausdr\u00FCcken?
checklist.operation.value.express-preconditions-possible = K\u00F6nnen Sie \
	die Vorbedingungen von \"<ocl>self</ocl>\" ausdr\u00FCcken?
checklist.operation.value.handle-all-inputs = Kann \"<ocl>self</ocl>\" alle \
	denkbaren Eingaben verarbeiten?
checklist.operation.value.how-behave-postconditions-not-achieved = Wie wird \
	sich \"<ocl>self</ocl>\" verhalten, wenn die Nachbedingungen nicht \
	erreicht werden?
checklist.operation.value.how-behave-preconditions-violated = Wie wird sich \
	\"<ocl>self</ocl>\" verhalten, wenn die Vorbedingungen verletzt werden?
checklist.operation.value.is-correctness-checkable = K\u00F6nnen Sie einen \
	Ausdruck schreiben, um zu pr\u00FCfen, ob die Argumente f\u00FCr  \
	\"<ocl>self</ocl>\" richtig sind? Plausibel?
checklist.state.actions = Aktionen
checklist.state.actions.list-do-action = Welche Aktionen sollen innerhalb von \
	\"<ocl>self</ocl>\" ausgef\u00FChrt werden?
checklist.state.actions.list-entry-actions = Welche Aktion soll beim Eintritt \
	in \"<ocl>self</ocl>\" ausgef\u00FChrt werden?
checklist.state.actions.list-exit-action = Welche Aktion sollte beim Verlassen \
	von \"<ocl>self</ocl>\" ausgef\u00FChrt werden?
checklist.state.actions.maintained-state = Verarbeiten Zustandsaktionen \
	\"<ocl>self</ocl>\" als aktuellen Zustand?
checklist.state.actions.update-attribute-on-entry = Sollten einige Attribute \
	beim Eintritt in \"<ocl>self</ocl>\" aktualisiert werden?
checklist.state.actions.update-attribute-on-exit = Sollten einige Attribute \
	beim Verlassen von \"<ocl>self</ocl>\" aktualisiert werden?
checklist.state.naming = Bezeichnung
checklist.state.naming.denotes-state = Beschreibt \"<ocl>self</ocl>\" mehr \
	einen Zustand als eine Aktivit\u00e4t?
checklist.state.naming.describe-clearly = Gibt der Name \"<ocl>self</ocl>\" \
	eine klare Beschreibung des Zustandes wieder?
checklist.state.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" falsch \
	interpretiert werden und etwas anderes bedeuten?
checklist.state.structure = Struktur
checklist.state.structure.belong = 	Geh\u00f6rt \"<ocl>self</ocl>\" zu diesem \
	oder zu einem anderen Zustandsautomaten?
checklist.state.structure.break-into-parts = Kann \"<ocl>self</ocl>\" in zwei \
	oder mehrere Zust\u00e4nde aufgeteilt werden?
checklist.state.structure.can-write-characteristic-equation = K\u00f6nnen Sie \
	eine charakteristische Gleichung f\u00fcr \"<ocl>self</ocl>\" schreiben?
checklist.state.structure.do-just-one-thing = Tut \"<ocl>self</ocl>\" exakt \
	eine einzige Sache und tut sie es richtig?
checklist.state.structure.is-state-in-another-machine-exclusive = Geh\u00f6ren \
	einige Zust\u00e4nde im anderen Zustandsautomaten exklusiv zu \
	\"<ocl>self</ocl>\"?
checklist.state.structure.make-internal = Soll \"<ocl>self</ocl>\" ein \
	Anfangszustand sein?
checklist.state.structure.merged-with-other = Sollte \"<ocl>self</ocl>\" \
	seinen eigenen Zustand darstellen, oder kann er mit einem anderen Zustand \
	gemischt werden?
checklist.state.transitions = Transitionen
checklist.state.transitions.are-transitions-out-of-exclusive = Ist jede \
	gehende Transition exklusiv?
checklist.state.transitions.combine-with-other-incoming = K\u00f6nnen einige \
	kommende Transitionen kombiniert werden?
checklist.state.transitions.combine-with-other-outgoing = K\u00f6nnen einige \
	gehende Transitionen kombiniert werden?
checklist.state.transitions.need-another-transition-into = Sollte es eine \
	andere Transition zu \"<ocl>self</ocl>\" geben?
checklist.state.transitions.need-another-transition-out-of = Sollte es eine \
	andere Transition gehend von \"<ocl>self</ocl>\" geben?
checklist.state.transitions.use-all-transitions-into = K\u00f6nnen alle \
	Transitionen in \"<ocl>self</ocl>\" verwendet werden?
checklist.state.transitions.use-all-transitions-out-of = K\u00f6nnen alle \
	gehenden Transitionen von \"<ocl>self</ocl>\" verwendet \
	werden?
checklist.transition.actions = Aktionen
checklist.transition.actions.is-postcondition-consistant-with-destination = \
	Ist die Nachbedingung der Aktion mit dem Ziel konsistent?
checklist.transition.actions.is-precondition-met = Tritt die Vorbedingung der \
	Aktion immer ein?
checklist.transition.actions.should-have = Sollte diese Transition \
	eine Aktion haben?
checklist.transition.actions.should-have-entry = Sollte diese \
	Transitions-Aktion eine Eintritt-Aktion sein?
checklist.transition.actions.should-have-exit = Sollte diese \
	Transitions-Aktion eine Verlassen-Aktion sein?
checklist.transition.guard = Sicherheit
checklist.transition.guard.break-into-parts = Kann er in zwei oder mehrere \
	Transitionen aufgeteilt werden?
checklist.transition.guard.is-too-restrictive = Ist die Bedingung dieser \
	Transition zu streng?
checklist.transition.guard.taken-too-often = K\u00f6nnte diese \
	Transition zu oft verwendet werden?
checklist.transition.structure = Struktur
checklist.transition.structure.end-somewhere-else = Sollte diese \
	Transitions an einem anderen Ziel enden?
checklist.transition.structure.need-another-like-this = Sollte es eine \
	andere Transition \"wie\" diesen geben?
checklist.transition.structure.start-somewhere-else = Sollte diese \
	Transition eine andere Quelle starten?
checklist.transition.structure.unneeded-because-of-this = Ist eine andere \
	Transition wegen diesem hier unn\u00f6tig?
checklist.transition.trigger = Trigger
checklist.transition.trigger.happen-too-often = Wird der Trigger zu oft \
	ausgel\u00f6st?
checklist.transition.trigger.happen-too-rarely = Wird der Trigger zu selten \
	ausgel\u00f6st?
checklist.transition.trigger.needed = Ben\u00f6tigt diese \
	Transition einen Trigger?
checklist.usecase.encoding = Codieren
checklist.usecase.encoding.break-into-parts = Kann \"<ocl>self</ocl>\" in zwei \
	oder mehrere Klassen heruntergebrochen werden?
checklist.usecase.encoding.convert-to-attribute = Sollte \"<ocl>self</ocl>\" \
	eine eigene Klasse bilden, oder nur ein einfaches Attribut einer anderen \
	Klasse sein?
checklist.usecase.encoding.do-just-one-thing = Tut \"<ocl>self</ocl>\" exakt \
	eine einzige Sache und tut sie es richtig?
checklist.usecase.location = Ort
checklist.usecase.location.eliminate-from-model = Kann \"<ocl>self</ocl>\" aus \
	dem Modell entfernt werden?
checklist.usecase.location.eliminates-or-affects-something-else = Gibt es im \
	Modell eine andere Klasse, die \u00fcberarbeitet oder entfernt werden \
	sollte, weil sie dem gleichen Zweck dient wie \"<ocl>self</ocl>\"?
checklist.usecase.location.move-somewhere = Kann \"<ocl>self</ocl>\" an einer \
	anderen Stelle in der Klassenhierarchie definiert werden?
checklist.usecase.location.planned-subclasses = Haben Sie eine Unterklasse von \
	\"<ocl>self</ocl>\" geplant?
checklist.usecase.naming = Bezeichnung
checklist.usecase.naming.describe-clearly = Gibt der Name \"<ocl>self</ocl>\" \
	eine klare Beschreibung der Klasse wieder?
checklist.usecase.naming.is-noun = 	Ist \"<ocl>self</ocl>\" ein Substantiv \
	oder ein substantiv\u00e4hnlicher Ausdruck?
checklist.usecase.naming.misinterpret = Kann der Name \"<ocl>self</ocl>\" \
	falsch interpretiert werden und etwas anderes bedeuten?
checklist.usecase.updates = \u00C4nderungen
checklist.usecase.updates.affects-something-else = Gibt es andere Objekte, die \
	immer ge\u00E4ndert werden m\u00fcssen, wenn \"<ocl>self</ocl>\" \
	ge\u00E4ndert wurde?
checklist.usecase.updates.reasons-for-update = In welchen F\u00E4llen wird ein \
	Objekt von \"<ocl>self</ocl>\" ge\u00E4ndert?
checklist.usecase.value = Wert
checklist.usecase.value.convert-to-invariant = K\u00f6nnen Sie einen \
	unver\u00E4nderlichen Wert f\u00fcr diese Klasse schreiben?
checklist.usecase.value.establish-invariant-in-constructors = Initialisieren \
	alle Konstruktoren diesen unver\u00E4nderlichen Wert?
checklist.usecase.value.maintain-invariant = Verarbeiten alle Methoden diesen \
	unver\u00E4nderlichen Wert?
checklist.usecase.value.start-with-meaningful-values = Sind alle Attribute von \
	\"<ocl>self</ocl>\" mit sinnvollen Werten initialisiert?

<?xml version="1.0"?>

<!-- ===========================================================================

                     * ================================ *
                     |  How to build ArgoUML C++ module |
                     * ================================ *

           Adaption from the FOP build.xml written by Stefano Mazzocchi
                by Giacomo Pati with some addition by Fotis Jannidis
           Adapted by Andreas Rueckert, Alejandro Ramirez and Andrew Smith
           Yet even more adaptations by Luis Sergio Oliveira 
                       [There's no end to this story!...]


Introduction
============

ArgoUML is a free UML tool. It is written entirely in Java.
The homepage of Argo is http://argouml.tigris.org

ArgoUML has modules to provide specific functionalities, which may be 
kept apart from the core. Such is this module, which intent is to provide C++ 
round-trip engineering. The modules depend on ArgoUML, so, you'll find most 
convenient to start by looking at the ArgoUML Cookbook for help in giving the 
first steps.

Installing the build tools
==========================

No specific requirements besides those of ArgoUML. So, go to Argo's cookbook for 
help.

Building instructions 
=====================

First you must be capable of building ArgoUML. Look in the cookbook for 
instructions. Then, its just more of the same, now with this Ant script and its 
specific targets.

Property Settings
=================

These are set in the init target, starting by loading the properties in the 
./module.properties file. Due to the way Ant sets properties you may override 
all settings within init in that file. If you're just interested in building 
the module you'll find that no settings needs to be made.

Build targets
=============

run build with the option -projecthelp

===========================================================================
-->

<project name="argouml-cpp-module" default="install" basedir=".">

<description>
****************************** ArgoUML C++ module ******************************
The ArgoUML C++ module provides C++ language support for ArgoUML. It enables 
the generation of C++ source code and C++ notation (in the source properties tab 
within ArgoUML).
This module will in the future provide more C++ features, like reverse 
engineering of C++ code, support for built-in types and standard libraries, and 
round-trip engineering for C++ projects.
</description>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

 <target name="init" depends="pde-init"
         description="initializes the Ant script environment for the other targets">

    <tstamp/>

    <property file="build.properties"/>
    <property file="module.properties"/>

    <property name="module.root" value="${basedir}"/>
    <property name="module.src.dir" value="${module.root}/src"/>
    <property name="module.tests.src" value="${module.root}/tests"/>

    <property name="module.lib.dir" value="${module.root}/lib"/>
    
    <property name="commons-io.jar.path" value="${module.lib.dir}/commons-io-1.0.jar"/>
    <property name="easymock.jar.path" value="${module.lib.dir}/easymock-1.1.jar"/>
    <property name="preprocessor.jar.path" 
              value="${module.lib.dir}/anarres-cpp-no-dependencies-1.2.3.jar"/>

    <property name="manifest" value="manifest.mf"/>
    <property name="manifest.src" value="${module.src.dir}/org/${manifest}"/>

    <property name="module.build.dir" value="${module.root}/build"/>
    <property name="module.build.dest" value="${module.build.dir}/classes"/>
    <property name="module.tests.build" value="${module.build.dir}/tests"/>
    <property name="module.tests.classes" value="${module.tests.build}/classes"/>
    <property name="module.tests.reports" value="${module.tests.build}/reports"/>
    <property name="i18n.dir" value="org/argouml/i18n/"/>
    <property name="images.dir" value="org/argouml/Images/"/>
    <property name="profile.file" value="org/argouml/language/cpp/profile/CppUmlProfile.xmi"/>

    <property name="module.jarfile.name" value="${argo.module.jarfile}.jar"/>
    <property name="module.jarfile"
              value="${module.build.dir}/${module.jarfile.name}"/>

    <!-- Try to figure out where main ArgoUML tools directory is -->
    <property name="tool.test.file" value="checkstyle/java.header"/>
    <available file="../argouml/src/argouml-core-tools/${tool.test.file}" 
               type="file" property="argo.tools.dir"
               value="../argouml/src/argouml-core-tools"/>
    <available file="../argouml/tools/${tool.test.file}" 
               type="file" property="argo.tools.dir"
               value="../argouml/tools"/>
   <!-- Eclipse PDE build configuration -->
    <available file="../argouml-core-tools/${tool.test.file}" 
               type="file" property="argo.tools.dir"
               value="../argouml-core-tools"/>

    <!-- figure out where main ArgoUML build directory is -->
    <!-- TODO: This probably needs to reference the packaging directory -->
    <available file="../argouml/src/argouml-build/build" 
               type="dir" property="argo.build.dir"
               value="../argouml/src/argouml-build/build"/>
    <available file="../argouml/build" 
               type="dir" property="argo.build.dir"
               value="../argouml/build"/>
   <!-- Eclipse PDE build configuration -->
   <available file="../argouml-build/build" 
              type="dir" property="argo.build.dir"
              value="../argouml-build/build"/>

    <property name="argo.jarfile" value="${argo.build.dir}/argouml.jar"/>

    <property name="antlrall.jar.path" value="${module.lib.dir}/antlr-2.7.7.jar"/>

    <property name="junit.jar.path" value="${argo.tools.dir}/junit-3.8.2/junit.jar"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>

    <!-- This is the version of the c++ module. -->
    <property name="module.version" value="0.1"/>
    <echo message="Module version: ${module.version}"/>

    <!-- supports the release generation scripts -->
    <property name="result.dir" value="${argo.build.dir}"/>

    <path id="module.compile.classpath">
        <fileset dir="${argo.build.dir}" includes="*.jar"/>
        <pathelement location="${preprocessor.jar.path}"/>
    </path>

    <path id="module.compile-tests.classpath">
      <pathelement location="${module.build.dest}"/>
      <path refid="module.compile.classpath"/>
      <pathelement location="${junit.jar.path}"/>
      <pathelement location="${commons-io.jar.path}"/>
      <pathelement location="${easymock.jar.path}"/>
    </path>

    <path id="module.run-tests.classpath">
      <pathelement location="${module.build.dest}"/>
      <path refid="module.compile-tests.classpath"/>
    </path>
    
    <path id="module.antlr-genparser.classpath">
      <pathelement location="${antlrall.jar.path}"/>
    </path>

    <path id="ant.optional.classpath">
      <pathelement location="${ant.home}/libopt/ant-junit.jar"/>
      <pathelement location="${junit.jar.path}"/>
      <pathelement location="${jdepend.jar.path}"/>
      <pathelement location="${javasrc.jar.path}"/>
    </path>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>
   
    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" name="junitreport">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

  </target>

  <!-- Note this file can only make Ant display values set in the file correctly, -->
  <!-- but external values in the envionment or properties file will be operational.  -->

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <mkdir dir="${module.build.dest}"/>
    <mkdir dir="${module.tests.classes}"/>
    <mkdir dir="${module.tests.reports}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Generates the parser and lexer classes                              -->
  <!-- =================================================================== -->
  <target name="generateparser" depends="prepare" 
          description="Generates the parser and lexer classes">
    <uptodate property="parser.is.current"
      targetfile="${module.src.dir}/org/argouml/language/cpp/reveng/STDCTokenTypes.txt">
      <srcfiles dir="${module.src.dir}/org/argouml/language/cpp/reveng">
        <include name="CppParser4Java.g"/>
      </srcfiles>
    </uptodate>
    <antcall target="generateparser_internal"/>
  </target>
   
  <target name="generateparser_internal" unless="parser.is.current" 
          depends="prepare">
    <echo message="Running antlr from ${antlrall.jar.path}"/>
    <java classname="antlr.Tool" fork="yes" classpath="${antlrall.jar.path}">
      <!-- For debugging the parser or lexer you may want to use the options 
      -traceParser or / and -traceLexer. -->
      <arg value="-o"/>
      <arg file="${module.src.dir}/org/argouml/language/cpp/reveng"/>
      <arg file="${module.src.dir}/org/argouml/language/cpp/reveng/CppParser4Java.g"/>
    </java>
  </target>
  
  <target name="cleanparser" depends="init">
    <delete>
    	<fileset dir="${module.src.dir}/org/argouml/language/cpp/reveng">
        <include name="STDCTokenTypes.txt"/> 
        <include name="STDCTokenTypes.java"/> 
        <include name="CPPParser.java"/> 
        <include name="CPPLexer.java"/> 
      </fileset>
    </delete> 
  </target> 

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="generateparser" 
          description="compiles the module source code"> 
  	
    <available file="${argo.jarfile}" property="argo.is.packaged"/>
    <fail unless="argo.is.packaged" 
      message="You must build ArgoUML first, e.g., ../argouml> build package"/>

    <javac srcdir="${module.src.dir}"
           destdir="${module.build.dest}"
           excludes="*.txt,*.bat,*.xml,*.sh"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           source="1.5"
           target="1.5"
           includeAntRuntime="no"
        >
        <classpath>
            <path refid="module.compile.classpath"/>
        </classpath>
    </javac>
    <copy todir="${module.build.dest}/${images.dir}" overwrite="on">
      <fileset dir="${module.src.dir}/${images.dir}"/>
    </copy>
    <copy file="${module.src.dir}/${profile.file}" 
    	tofile="${module.build.dest}/${profile.file}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class jar                                               -->
  <!-- =================================================================== -->
  <target name="jar" depends="init, compile" 
          description="create the module jar">
    <filter token="version" value="${module.version}"/>
    <copy file="${manifest.src}" tofile="${module.build.dest}/${manifest}" filtering="on" overwrite="on" />
    <copy todir="${module.build.dest}/${i18n.dir}" overwrite="on">
        <fileset dir="${module.src.dir}/${i18n.dir}"/>
    </copy>
    <jar jarfile="${module.jarfile}"
         basedir="${module.build.dest}"
         includes="org/argouml/**"
         excludes="*.txt,*.bat,*.xml,*.sh,${manifest}"
         manifest="${module.build.dest}/${manifest}" />
  </target>

  <!-- =================================================================== -->
  <!-- Run ArgoUML from compiled sources                                   -->
  <!-- =================================================================== -->
  <target name="run" depends="init, jar" 
          description="run ArgoUML using the built module jar">
    <java classname="org.argouml.application.Main"
          fork="yes">
      <sysproperty key="log4j.configuration" value="org/argouml/resource/full_console.lcf"/>
      <classpath>
        <fileset dir="${module.build.dir}">
            <include name="${module.jarfile.name}" />
        </fileset>
        <path refid="module.compile.classpath"/>
        <!-- maybe this will be used in the future, but, for now it makes 
             this build target fail -->
        <!--
        <fileset dir="${module.lib.dir}">
            <include name="*.jar" />
        </fileset>
        -->
      </classpath>

    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" 
          description="cleanup all files and directories created by this build script">
    <delete file="${result.dir}/ext/${module.jarfile.name}"/>
    <delete file="${argo.build.dir}/ext/${module.jarfile.name}"/>
    <delete dir="${module.build.dir}"/>
   
    <antcall target="cleanparser"/>
  </target>

  <!-- =================================================================== -->
  <!-- Move the jar file into the extension directory.                     -->
  <!-- =================================================================== -->
  <target name="install" depends="init, jar" 
          description="install the module in the developer build of ArgoUML">
    <!-- supports the release generation scripts -->
    <copy todir="${result.dir}/ext">
      <fileset dir="${module.build.dir}" includes="${module.jarfile.name}"/>
    </copy>
    <copy todir="${result.dir}/ext" file="${preprocessor.jar.path}"/>
    <!-- copy it to the build directory, to enable argouml-core run target 
         to include the C++ module -->
    <copy todir="${argo.build.dir}/ext">
      <fileset dir="${module.build.dir}" includes="${module.jarfile.name}"/>
    </copy>
    <copy todir="${argo.build.dir}/ext" file="${preprocessor.jar.path}"/>
    <copy todir="${argo.build.dir}/ext" file="${antlrall.jar.path}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Runs checkstyle to find style problems.                             -->
  <!-- =================================================================== -->
  <target name="checkstyle" depends="init, cleanparser"
          description="Run checkstyle on the cpp module.">
    <property name="checkstyle.jar.path"
              value="${argo.tools.dir}/checkstyle-4.3/checkstyle-all-4.3.jar"/>
    <java classname="com.puppycrawl.tools.checkstyle.Main" failonerror="false" fork="true">
      <sysproperty key="checkstyle.header.file" value="${argo.tools.dir}/checkstyle/java.header"/>
      <classpath>
        <pathelement location="${checkstyle.jar.path}"/>
        <pathelement location="${ant-xerces.jar.path}"/>
      </classpath>
      <arg value="-c"/>
      <arg value="${argo.tools.dir}/checkstyle/checkstyle_argouml.xml"/>
      <arg value="-r"/>
      <arg value="${module.src.dir}"/>
      <arg value="-r"/>
      <arg value="${module.tests.dir}"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the tests directory                                        -->
  <!-- =================================================================== -->
  <target name="compile-tests" depends="compile"> 

    <echo message="Compiling the unit tests"/>
    
    <antcall target="copy-tests-resources"/>

    <javac srcdir="${module.tests.src}"
           destdir="${module.tests.classes}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           source="1.5"
           target="1.5">
      <classpath>
        <path refid="module.compile-tests.classpath"/>
      </classpath>
     </javac>
  </target>
  
  <target name="copy-tests-resources" depends="init">
    <property name="tests.reveng.src" 
      value="${module.tests.src}/org/argouml/language/cpp/reveng"/>
    <property name="tests.reveng.classes"
      value="${module.tests.classes}/org/argouml/language/cpp/reveng"/>
     
    <copy file="${tests.reveng.src}/SimpleClass.cpp" 
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/quadratic.i" 
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/UnionInlineDefInMember.cpp"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/CastExpressions.cpp"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/DerivedFromAbstract.cxx"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/issue0006_test_preprocessed.cpp"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/issue0025.cpp"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/issue4932.cpp"
      todir="${tests.reveng.classes}"/>
  </target> 

  <!-- =================================================================== -->
  <!-- Run a module unit test specified by property -Dtest=                -->
  <!-- today.java.net/pub/a/today/2003/09/12/individual-test-cases.html    -->
  <!-- =================================================================== -->
  <target name="run-test" depends="init, compile-tests" 
          description="run a module unit test specified by property -Dtest="> 

    <echo message="running the unit tests"/>
    
    <junit errorproperty="junit.failure" fork="yes" haltonfailure="false" 
           maxmemory="128M" printsummary="true">
          <!-- use different log4j configuration for testing -->
      <sysproperty key="log4j.configuration" value="org/argouml/resource/full_console.lcf"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <classpath>
        <path refid="module.run-tests.classpath"/>
        <pathelement location="${module.tests.classes}"/>
      </classpath>
      <assertions>
        <enable package="org.argouml"/>
      </assertions>
      <formatter type="xml"/>
      <batchtest todir="${module.tests.reports}">
        <fileset dir="${module.tests.src}">
          <include name="org/argouml/**/${test}.java"/>
        </fileset>
      </batchtest>
    </junit>
    <antcall target="create-tests-report"/>
  </target>

  <!-- =================================================================== -->
  <!-- Run the module unit tests                                           -->
  <!-- =================================================================== -->
  <target name="tests-xml" depends="init, compile-tests" 
          description="run the module unit tests in headleass mode.">
    <property name="test" value="Test*"/>
    <antcall target="run-test"/>
  </target>
  
  <target name="tests" depends="tests-xml"/>

  <target name="create-tests-report">
    <echo message="Creating unit tests report to ${module.tests.reports}/html/index.html"/>
    
    <junitreport todir="${module.tests.reports}">
      <fileset dir="${module.tests.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${module.tests.reports}/html"/>
    </junitreport>
  </target>


  <!-- =================================================================== -->
  <!-- Eclipse PDE targets from here to end of file                        -->
  <!-- =================================================================== -->
  <!-- 
    Required targets (called in this order) are:
      build.jars
      gather.bin.parts - must create and populate "${destination.temp.folder}/<Bundle-SymbolicName>_<Bundle-Version>
      gather.logs
    If p2.gathering = true in build.properties:
      publish.bin.parts target replaces gather.bin.parts
  -->
  
    <target name="pde-properties" if="eclipse.running">
      <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    </target>
  
    <target name="pde-init" depends="pde-properties">

      <property name="bundleId" value="org.argouml.module.cpp" />

      <!-- This property is magic and will have its value substituted by PDE -->
      <property name="version.suffix" value="0.28.0.200904210336"/>
      <property name="bundleVersion" value="${version.suffix}" />

      <!-- Compiler settings. -->
      <condition property="dir_bootclasspath" value="${java.home}/../Classes">
        <os family="mac" />
      </condition>
      <property name="dir_bootclasspath" value="${java.home}/lib" />
      <path id="path_bootclasspath">
        <fileset dir="${dir_bootclasspath}">
          <include name="*.jar" />
        </fileset>
      </path>
      <property name="bootclasspath" refid="path_bootclasspath" />
      <property name="bundleBootClasspath" value="${bootclasspath}" />

      <condition property="pluginTemp" value="${buildTempFolder}/plugins">
        <isset property="buildTempFolder" />
      </condition>
      <property name="pluginTemp" value="${basedir}" />
      <condition property="build.result.folder" value="${pluginTemp}/${bundleId}_${bundleVersion}">
        <isset property="buildTempFolder" />
      </condition>
      <property name="build.result.folder" value="${basedir}" />
      <property name="plugin.destination" value="${basedir}" />            
      <condition property="p2.publish.parts" value="true">
        <istrue value="${p2.gathering}"/>
      </condition>
    </target>

  <target name="pde-clean" depends="pde-init">
    <delete file="${plugin.destination}/${bundleId}_*.jar" />
    <delete file="${plugin.destination}/${bundleId}_*.zip" />
  </target>

  <target name="build.jars" depends="jar" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
    <mkdir dir="${build.result.folder}/@dot"/>
    <copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
      <fileset dir="${build.classes}" includes="org/argouml/**" excludes="*.txt,*.bat,*.xml,*.sh" />
    </copy>
  </target>

  <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${build.result.folder}/@dot" includes="**"/>
    </copy>
    
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="plugin.xml"/>
        <include name="plugin.properties"/>
      </fileset>
    </copy>

    <eclipse.versionReplacer path="${destination.temp.folder}/${bundleId}_${bundleVersion}" version="${bundleVersion}" />
  </target>

  <target name="publish.bin.parts" depends="init" if="p2.publish.parts">

    <!-- First call old target to gather binaries -->
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${build.result.folder}"/>
    </antcall>

    <eclipse.versionReplacer path="${build.result.folder}" version="${bundleVersion}" />

    <!-- Now use P2 publishing tools to publish to our build repository -->
    <eclipse.gatherBundle
      metadataRepository="${p2.build.repo}"
      artifactRepository="${p2.build.repo}"
      buildResultFolder="${build.result.folder}"
      baseDirectory="${basedir}"
    />
  </target>

  <target name="gather.logs" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}"/>
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false">
      <fileset dir="${build.dir}">
        <include name="compile.log"/>  
      </fileset>
    </copy>
  </target>
  
</project>

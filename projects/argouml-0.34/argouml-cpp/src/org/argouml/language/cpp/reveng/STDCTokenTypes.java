// $ANTLR 2.7.7 (20060930): "CppParser4Java.g" -> "CPPParser.java"$

/*REMOVE_BEGIN*/
package org.argouml.language.cpp.reveng;
/*REMOVE_END*/

import java.util.Hashtable;
import java.util.List;
import java.util.ArrayList;

public interface STDCTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_template = 4;
	int LESSTHAN = 5;
	int GREATERTHAN = 6;
	int LITERAL_typedef = 7;
	int LITERAL_enum = 8;
	int ID = 9;
	int LCURLY = 10;
	int SEMICOLON = 11;
	int LITERAL_inline = 12;
	int LITERAL_namespace = 13;
	int RCURLY = 14;
	int ASSIGNEQUAL = 15;
	int COLON = 16;
	int LITERAL_extern = 17;
	int StringLiteral = 18;
	int COMMA = 19;
	int LITERAL__inline = 20;
	int LITERAL___inline = 21;
	int LITERAL_virtual = 22;
	int LITERAL_explicit = 23;
	int LITERAL_friend = 24;
	int LITERAL__stdcall = 25;
	int LITERAL___stdcall = 26;
	int LITERAL__declspec = 27;
	int LITERAL___declspec = 28;
	int LPAREN = 29;
	int RPAREN = 30;
	int LITERAL_typename = 31;
	int LITERAL_auto = 32;
	int LITERAL_register = 33;
	int LITERAL_static = 34;
	int LITERAL_mutable = 35;
	int LITERAL_const = 36;
	int LITERAL_const_cast = 37;
	int LITERAL_volatile = 38;
	int LITERAL_char = 39;
	int LITERAL_wchar_t = 40;
	int LITERAL_bool = 41;
	int LITERAL_short = 42;
	int LITERAL_int = 43;
	// "_int64" = 44
	// "__int64" = 45
	// "__w64" = 46
	int LITERAL_long = 47;
	int LITERAL_signed = 48;
	int LITERAL_unsigned = 49;
	int LITERAL_float = 50;
	int LITERAL_double = 51;
	int LITERAL_void = 52;
	int LITERAL_class = 53;
	int LITERAL_struct = 54;
	int LITERAL_union = 55;
	int OPERATOR = 56;
	int LITERAL_this = 57;
	int LITERAL_true = 58;
	int LITERAL_false = 59;
	int LITERAL_public = 60;
	int LITERAL_protected = 61;
	int LITERAL_private = 62;
	int OCTALINT = 63;
	int STAR = 64;
	int AMPERSAND = 65;
	int LSQUARE = 66;
	int RSQUARE = 67;
	int TILDE = 68;
	int ELLIPSIS = 69;
	int LITERAL_throw = 70;
	int LITERAL_case = 71;
	int LITERAL_default = 72;
	int LITERAL_if = 73;
	int LITERAL_else = 74;
	int LITERAL_switch = 75;
	int LITERAL_while = 76;
	int LITERAL_do = 77;
	int LITERAL_for = 78;
	int LITERAL_goto = 79;
	int LITERAL_continue = 80;
	int LITERAL_break = 81;
	int LITERAL_return = 82;
	int LITERAL_try = 83;
	int LITERAL_catch = 84;
	int LITERAL_using = 85;
	int LITERAL__asm = 86;
	int LITERAL___asm = 87;
	int TIMESEQUAL = 88;
	int DIVIDEEQUAL = 89;
	int MINUSEQUAL = 90;
	int PLUSEQUAL = 91;
	int MODEQUAL = 92;
	int SHIFTLEFTEQUAL = 93;
	int SHIFTRIGHTEQUAL = 94;
	int BITWISEANDEQUAL = 95;
	int BITWISEXOREQUAL = 96;
	int BITWISEOREQUAL = 97;
	int QUESTIONMARK = 98;
	int OR = 99;
	int AND = 100;
	int BITWISEOR = 101;
	int BITWISEXOR = 102;
	int NOTEQUAL = 103;
	int EQUAL = 104;
	int LESSTHANOREQUALTO = 105;
	int GREATERTHANOREQUALTO = 106;
	int SHIFTLEFT = 107;
	int SHIFTRIGHT = 108;
	int PLUS = 109;
	int MINUS = 110;
	int DIVIDE = 111;
	int MOD = 112;
	int DOTMBR = 113;
	int POINTERTOMBR = 114;
	int PLUSPLUS = 115;
	int MINUSMINUS = 116;
	int LITERAL_sizeof = 117;
	int SCOPE = 118;
	int DOT = 119;
	int POINTERTO = 120;
	int LITERAL_dynamic_cast = 121;
	int LITERAL_static_cast = 122;
	int LITERAL_reinterpret_cast = 123;
	int NOT = 124;
	int LITERAL_new = 125;
	int LITERAL__cdecl = 126;
	int LITERAL___cdecl = 127;
	int LITERAL__near = 128;
	int LITERAL___near = 129;
	int LITERAL__far = 130;
	int LITERAL___far = 131;
	int LITERAL___interrupt = 132;
	int LITERAL_pascal = 133;
	int LITERAL__pascal = 134;
	int LITERAL___pascal = 135;
	int LITERAL_delete = 136;
	int DECIMALINT = 137;
	int HEXADECIMALINT = 138;
	int CharLiteral = 139;
	int FLOATONE = 140;
	int FLOATTWO = 141;
	int Whitespace = 142;
	int Comment = 143;
	int CPPComment = 144;
	int DIRECTIVE = 145;
	int LineDirective = 146;
	int EndOfLine = 147;
	int Escape = 148;
	int Digit = 149;
	int Decimal = 150;
	int LongSuffix = 151;
	int UnsignedSuffix = 152;
	int FloatSuffix = 153;
	int Exponent = 154;
	int Vocabulary = 155;
	int Number = 156;
}

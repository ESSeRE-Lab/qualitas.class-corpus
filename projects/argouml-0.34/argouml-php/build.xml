<?xml version="1.0"?>

<!-- ===========================================================================
     Ant build for ArgoUML PHP module
     ============================================================================ -->

<project name="argouml-module" default="compile" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

 <target name="init" depends="pde-init" >

    <property file="module.properties"/>

    <!-- we really need an absolute path for argo.root.dir -->
    <!-- if it is set in a property file before now, it must be absolute -->
    <property name="argo.root.dir" value="${basedir}/../argouml" />
    <property file="${override.build.properties}"/>

    <property name="module.root" value="${basedir}"/>
    <property name="module.src.dir" value="${module.root}/src"/>

    <property name="manifest" value="manifest.mf"/>
    <property name="manifest.src" value="${module.src.dir}/org/${manifest}"/>

    <property name="module.build.dir" value="${module.root}/build"/>
    <property name="module.build.src" value="${module.src.dir}"/>
    <property name="module.build.dest" value="${module.build.dir}/classes"/>

    <!-- figure out where main ArgoUML build directory is -->
    <available file="../argouml-build/build" 
               type="dir" property="argo.build.dir"
               value="../argouml-build/build"/>
    <available file="../argouml/build" 
               type="dir" property="argo.build.dir"
               value="../argouml/build"/>

    <property name="argo.jarfile"
              value="${argo.build.dir}/argouml.jar"/>
    <property name="module.jarfile.name"
              value="argo_php.jar"/>
    <property name="module.jarfile"
              value="${module.build.dir}/${module.jarfile.name}"/>

    <property file="${user.home}/.argo.ant.properties"/>
    <property file="${user.home}/.ant.properties"/>

    <property name="debug" value="off"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>
    <property name="result.dir" value="${argo.root.dir}/build"/>

  </target>

  <!-- Note this file can only make Ant display values set in the file correctly, -->
  <!-- but external values in the environment or properties file will be operational.  -->

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <!-- These must be there already -->
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <!-- <target name="compile" depends="generateparser,prepare"> -->

  <target name="compile" depends="prepare"> 

    <echo message="Compiling the sources"/>

    <!-- create directories -->
    <mkdir dir="${module.build.dest}"/>

    <javac srcdir="${module.build.src}"
           destdir="${module.build.dest}"
           excludes="*.txt,*.bat,*.xml,*.sh"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}">
        <classpath>
            <pathelement location="${argo.build.dir}/argouml.jar"/>
            <pathelement location="${argo.build.dir}/log4j.jar"/>
            <pathelement location="${argo.build.dir}/argouml-model.jar"/>
        </classpath>
     </javac>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the class jar                                           -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile">
    <copy file="${manifest.src}" tofile="${module.build.dest}/${manifest}" filtering="on" overwrite="on" />
    <jar jarfile="${module.jarfile}"
         basedir="${module.build.dest}"
         includes="org/argouml/**"
         excludes="*.txt,*.bat,*.xml,*.sh,${manifest}"
         manifest="${module.build.dest}/${manifest}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Run ArgoUML from compiled sources                                   -->
  <!-- =================================================================== -->
  <target name="run" depends="install">
    <java classname="org.argouml.application.Main"
          fork="yes">
        <classpath>
            <fileset dir="${module.build.dir}">
                <include name="${module.jarfile.name}" />
	    </fileset>
            <pathelement location="${argo.build.dir}/argouml.jar"/>
            <pathelement location="${ocl-argo.jar.path}"/>
            <pathelement location="${gef.jar.path}"/>
            <pathelement location="${log4j.jar.path}"/>
            <pathelement location="${swidgets.jar.path}"/>
            <pathelement location="${toolbar.jar.path}"/>
            <pathelement location="${commons-logging.jar.path}"/>
            <pathelement location="${antlrall.jar.path}"/>
            <pathelement location="${argo.build.dir}/argouml-model.jar"/>
        </classpath>

    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete file="${result.dir}/ext/${module.jarfile.name}"/>
    <delete file="${argo.build.dir}/ext/${module.jarfile.name}"/>
    <delete dir="${module.build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Move the jar file into the extension directory.                     -->
  <!-- =================================================================== -->
  <target name="install" depends="jar">
    <copy todir="${result.dir}/ext">
      <fileset dir="${module.build.dir}" includes="${module.jarfile.name}"/>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Eclipse PDE targets from here to end of file                        -->
  <!-- =================================================================== -->
  <!-- 
    Required targets (called in this order) are:
      build.jars
      gather.bin.parts - must create and populate "${destination.temp.folder}/<Bundle-SymbolicName>_<Bundle-Version>
      gather.logs
    If p2.gathering = true in build.properties:
      publish.bin.parts target replaces gather.bin.parts
  -->
  
    <target name="pde-properties" if="eclipse.running">
      <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    </target>
  
    <target name="pde-init" depends="pde-properties">

      <property name="bundleId" value="org.argouml.module.php" />

      <!-- This property is magic and will have its value substituted by PDE -->
      <property name="version.suffix" value="0.29.3.201001020415"/>
      <property name="bundleVersion" value="${version.suffix}" />

      <!-- Compiler settings. -->
      <condition property="dir_bootclasspath" value="${java.home}/../Classes">
        <os family="mac" />
      </condition>
      <property name="dir_bootclasspath" value="${java.home}/lib" />
      <path id="path_bootclasspath">
        <fileset dir="${dir_bootclasspath}">
          <include name="*.jar" />
        </fileset>
      </path>
      <property name="bootclasspath" refid="path_bootclasspath" />
      <property name="bundleBootClasspath" value="${bootclasspath}" />

      <condition property="pluginTemp" value="${buildTempFolder}/plugins">
        <isset property="buildTempFolder" />
      </condition>
      <property name="pluginTemp" value="${basedir}" />
      <condition property="build.result.folder" value="${pluginTemp}/${bundleId}_${bundleVersion}">
        <isset property="buildTempFolder" />
      </condition>
      <property name="build.result.folder" value="${basedir}" />
      <property name="plugin.destination" value="${basedir}" />            
      <condition property="p2.publish.parts" value="true">
        <istrue value="${p2.gathering}"/>
      </condition>  
    </target>

  <target name="pde-clean" depends="pde-init">
    <delete file="${plugin.destination}/${bundleId}_*.jar" />
    <delete file="${plugin.destination}/${bundleId}_*.zip" />
  </target>

  <target name="build.jars" depends="jar" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
    <mkdir dir="${build.result.folder}/@dot"/>
    <copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
      <fileset dir="${build.classes}" includes="org/argouml/**" excludes="*.txt,*.bat,*.xml,*.sh" />
    </copy>
  </target>

  <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${build.result.folder}/@dot" includes="**"/>
    </copy>
    
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="plugin.xml"/>
        <include name="plugin.properties"/>
      </fileset>
    </copy>

    <eclipse.versionReplacer path="${destination.temp.folder}/${bundleId}_${bundleVersion}" version="${bundleVersion}" />
  </target>


  <target name="publish.bin.parts" depends="init" if="p2.publish.parts">

    <!-- First call old target to gather binaries -->
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${build.result.folder}"/>
    </antcall>

    <eclipse.versionReplacer path="${build.result.folder}" version="${bundleVersion}" />

    <!-- Now use P2 publishing tools to publish to our build repository -->
    <eclipse.gatherBundle
      metadataRepository="${p2.build.repo}"
      artifactRepository="${p2.build.repo}"
      buildResultFolder="${build.result.folder}"
      baseDirectory="${basedir}"
    />
  </target>
    
  <target name="gather.logs" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}"/>
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false">
      <fileset dir="${build.dir}">
        <include name="compile.log"/>  
      </fileset>
    </copy>
  </target>

</project>

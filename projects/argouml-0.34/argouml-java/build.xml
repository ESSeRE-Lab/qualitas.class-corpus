<?xml version="1.0"?>

<!-- ===========================================================================

Introduction
============

ArgoUML is a free UML tool. It is written entirely in Java.
The homepage of Argo is http://argouml.tigris.org

ArgoUML has modules to provide specific functionalities, which may be 
kept apart from the core. Such is this module, which intent is to provide Java 
language support. The modules depend on ArgoUML, so, you'll find most 
convenient to start by looking at the ArgoUML Cookbook for help in giving the 
first steps.

Installing the build tools
==========================

No specific requirements besides those of ArgoUML. So, go to Argo's cookbook for 
help.

Building instructions 
=====================

First you must be capable of building ArgoUML. Look in the cookbook for 
instructions. Then, its just more of the same, now with this Ant script and its 
specific targets.

Property Settings
=================

These are set in the init target, starting by loading the properties in the 
./module.properties file. Due to the way Ant sets properties you may override 
all settings within init in that file. If you're just interested in building 
the module you'll find that no settings needs to be made.

Build targets
=============

run build with the option -projecthelp

===========================================================================
-->

<project name="argouml-java-module" default="install">

<description>
***************************** ArgoUML Java module *****************************
The ArgoUML Java module provides Java language support for ArgoUML. It enables 
the generation of Java source code and Java notation (in the source properties
tab within ArgoUML).
This module will in the future provide more Java features, like reverse 
engineering of Java code and support for built-in types and standard libraries.
</description>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

 <target name="init" depends="pde-init"
         description="initializes the Ant script environment for the other targets">

    <tstamp/>

    <property file="build.properties"/>
    <property file="module.properties"/>

    <property name="Name" value="ArgoModule-${argo.module.name}"/>
    <property name="name" value="argomodule-${argo.module.name}"/>

    <property name="module.root" location="."/>
    <property name="module.src.dir" value="${module.root}/src"/>
    <property name="module.src_generated.dir" value="${module.root}/src_generated"/>
    <property name="module.tests.src" value="${module.root}/tests"/>

    <property name="module.lib.dir" value="${module.root}/lib"/>
    
    <property name="antlr-rt.jar" value="antlr-runtime-3.1.1.jar"/>
    <property name="antlrall.jar.path" value="${module.lib.dir}/antlrworks-1.2.2.jar"/>
    <property name="antlr-rt.jar.path" value="${module.lib.dir}/${antlr-rt.jar}"/>
    <!-- needed only until classfile grammar is ported to Antlr3: -->
    <property name="antlr2.jar" value="antlr-2.7.7.jar"/>
    <property name="antlr2.jar.path" value="${module.lib.dir}/${antlr2.jar}"/>

    <property name="manifest" value="manifest.mf"/>
    <property name="manifest.src" value="${module.src.dir}/org/${manifest}"/>

    <property name="module.build.dir" value="${module.root}/build"/>
    <property name="module.build.dest" value="${module.build.dir}/classes"/>
    <property name="module.tests.build" value="${module.build.dir}/tests"/>
    <property name="module.tests.classes" value="${module.tests.build}/classes"/>
    <property name="module.tests.reports" value="${module.tests.build}/reports"/>
    <property name="i18n.dir" value="org/argouml/i18n/"/>
    <property name="images.dir" value="org/argouml/Images/"/>
    <property name="profile.file" value="org/argouml/language/java/profile/default-java.xmi"/>
    <property name="profile2.file" value="org/argouml/language/java/profile/java-profile-uml2.xmi"/>

    <!-- Try to figure out where main ArgoUML tools directory is -->
    <property name="tool.test.file" value="checkstyle/java.header"/>
    <available file="../argouml/src/argouml-core-tools/${tool.test.file}" 
               type="file" property="argo.tools.dir"
               value="../argouml/src/argouml-core-tools"/>
    <available file="../argouml/tools/${tool.test.file}" 
               type="file" property="argo.tools.dir"
               value="../argouml/tools"/>

    <!-- figure out where main ArgoUML build directory is -->
    <!-- TODO: This probably needs to reference the packaging directory -->
    <available file="../argouml/src/argouml-build/build" 
               type="dir" property="argo.build.dir"
               value="../argouml/src/argouml-build/build"/>
    <available file="../argouml/build" 
               type="dir" property="argo.build.dir"
               value="../argouml/build"/>
   <!-- Eclipse PDE build configuration -->
   <available file="../argouml-app/build" 
              type="dir" property="argo.build.dir"
              value="../argouml-app/build"/>

   
    <property name="module.jarfile.name" value="${argo.module.jarfile}.jar"/>
    <property name="module.jarfile"
              value="${module.build.dir}/${module.jarfile.name}"/>

    <!-- If not set by the override file we still need this one for antlr. -->
    <property name="junit.jar.path" value="${argo.tools.dir}/junit-3.8.2/junit.jar"/>
 
    <echo message="${junit.jar.path} ${ant.home}"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>

    <property name="module.version" value="${DSTAMP}-${TSTAMP}"/>
    <echo message="Module version: ${module.version}"/>

    <path id="module.compile.classpath">
        <pathelement location="${argo.build.dir}/argouml.jar"/>
        <pathelement location="${argo.build.dir}/ext/argouml-diagrams-sequence.jar"/>
        <pathelement location="${antlrall.jar.path}"/>
        <pathelement location="${antlr2.jar.path}"/>
        <pathelement location="${argo.build.dir}/argouml-model.jar"/>
        <!-- Extra elements for Eclipse PDE build which doesn't use default packaging -->
        <pathelement location="${argo.build.dir}/ocl-argo-1.1.jar"/>
        <pathelement location="${argo.build.dir}/swidgets-0.1.4.jar"/>
        <pathelement location="${module.root}/../argouml-core-infra/build/log4j-1.2.6.jar"/>
        <pathelement location="${module.root}/../argouml-core-model/build/argouml-model.jar"/>
        <pathelement location="${module.root}/../argouml-core-diagrams-sequence2/build/argouml-diagrams-sequence.jar"/>

    </path>
    <echo message="module.compile.classpath value:"/>
    <pathconvert refid="module.compile.classpath"/>

    <path id="module.compile-tests.classpath">
      <pathelement location="${module.build.dest}"/>
      <path refid="module.compile.classpath"/>
      <pathelement location="${junit.jar.path}"/>
    </path>
    <echo message="module.compile-tests.classpath value:"/>
    <pathconvert refid="module.compile-tests.classpath"/>

    <path id="module.run-tests.classpath">
      <pathelement location="${module.build.dest}"/>
      <pathelement location="${argo.build.dir}/argouml-mdr.jar"/>
      <path refid="module.compile-tests.classpath"/>
      <fileset dir="${argo.build.dir}">
        <include name="*.jar"/>
      </fileset>
    </path>
    <echo message="module.run-tests.classpath value:"/>
    <pathconvert refid="module.compile-tests.classpath"/>
    
    <path id="module.antlr-genparser.classpath">
      <pathelement location="${antlrall.jar.path}"/>
    </path>
    <echo message="module.antlr-genparser.classpath value:"/>
    <pathconvert refid="module.antlr-genparser.classpath"/>

    <path id="ant.optional.classpath">
      <pathelement location="${ant.home}/libopt/ant-junit.jar"/>
      <pathelement location="${junit.jar.path}"/>
    </path>
    <echo message="ant.optional.classpath value:"/>
    <pathconvert refid="ant.optional.classpath"/>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>
   
    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" name="junitreport">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>
    <echo message="------------------- ${Name} ${module.version} ----------------"/>
  </target>

  <!-- Note this file can only make Ant display values set in the file correctly, -->
  <!-- but external values in the envionment or properties file will be operational.  -->

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <mkdir dir="${module.build.dest}"/>
    <mkdir dir="${module.tests.classes}"/>
    <mkdir dir="${module.tests.reports}"/>
    <mkdir dir="${module.src_generated.dir}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Generates the parser and lexer classes                              -->
  <!-- =================================================================== -->
  <target name="generateparser" depends="prepare" 
          description="Generates the parser and lexer classes">
    <uptodate property="parser.is.current"
      targetfile="${module.src_generated.dir}/org/argouml/language/java/reveng/Java.tokens">
      <srcfiles dir="${module.src.dir}/org/argouml/language/java/reveng">
        <include name="Java.g"/>
      </srcfiles>
    </uptodate>
    <antcall target="generateparser_internal"/>
    <uptodate property="classfileparser.is.current"
      targetfile="${module.src_generated.dir}/org/argouml/language/java/reveng/classfile/ClassfileTokenTypes.txt">
      <srcfiles dir="${module.src.dir}/org/argouml/language/java/reveng/classfile">
        <include name="Classfile.g"/>
        <include name="classfile.tree.g"/>
      </srcfiles>
    </uptodate>
    <antcall target="generateparser_classfile"/>
  </target>

  <target name="generateparser_internal" unless="parser.is.current" 
          depends="prepare">
    <echo message="Running antlr3 from ${antlrall.jar.path}"/>
    <java classname="org.antlr.Tool" fork="yes" maxmemory="128M" classpath="${antlrall.jar.path}">
      <arg value="-o"/>
      <arg file="${module.src_generated.dir}/org/argouml/language/java/reveng"/>
      <arg file="${module.src.dir}/org/argouml/language/java/reveng/Java.g"/>
    </java>
  </target>

  <target name="generateparser_classfile" unless="classfileparser.is.current" 
          depends="prepare">
    <echo message="Running antlr2 from ${antlr2.jar.path}"/>
    <java classname="antlr.Tool" fork="yes" maxmemory="128M" classpath="${antlr2.jar.path}">
      <arg value="-o"/>
      <arg file="${module.src_generated.dir}/org/argouml/language/java/reveng/classfile"/>
      <arg file="${module.src.dir}/org/argouml/language/java/reveng/classfile/Classfile.g"/>
    </java>
    <java classname="antlr.Tool" fork="yes" maxmemory="128M" classpath="${antlr2.jar.path}">
      <arg value="-o"/>
      <arg file="${module.src_generated.dir}/org/argouml/language/java/reveng/classfile"/>
      <arg file="${module.src.dir}/org/argouml/language/java/reveng/classfile/classfile.tree.g"/>
    </java>
  </target>
  
  <target name="cleanparsers" depends="prepare">
    <delete>
      <fileset dir="${module.src_generated.dir}">
        <include name="**"/>
      </fileset>
    </delete> 
  </target> 

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="generateparser" 
          description="compiles the module source code"> 
  	
    <available file="${argo.build.dir}/argouml.jar" property="argouml.is.prepared"/>
    <fail unless="argouml.is.prepared" 
      message="You must prepare the argouml project first, e.g., ../argouml> build install"/>

    <javac destdir="${module.build.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           includeAntRuntime="no" 
           bootclasspath="${bundleBootClasspath}" 
           source="1.5"
           target="1.5" >
    	<src path="${module.src.dir}"/>
        <src path="${module.src_generated.dir}"/>
        <classpath>
            <path refid="module.compile.classpath"/>
        </classpath>
      <compilerarg line="-log '${module.build.dir}/compile.log'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />      
    </javac>
    <copy todir="${module.build.dest}/${images.dir}" overwrite="on">
      <fileset dir="${module.src.dir}/${images.dir}"/>
    </copy>
    <copy file="${module.src.dir}/${profile.file}" 
    	tofile="${module.build.dest}/${profile.file}"/>
    <copy file="${module.src.dir}/${profile2.file}" 
    	tofile="${module.build.dest}/${profile2.file}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class jar                                               -->
  <!-- =================================================================== -->
  <target name="jar" depends="init, compile" 
          description="create the module jar">
    <filter token="version" value="${module.version}"/>
    <copy file="${manifest.src}" tofile="${module.build.dest}/${manifest}" filtering="on" overwrite="on" />
    <copy todir="${module.build.dest}/${i18n.dir}" overwrite="on">
        <fileset dir="${module.src.dir}/${i18n.dir}"/>
    </copy>
    <jar jarfile="${module.jarfile}"
         basedir="${module.build.dest}"
         includes="org/argouml/**"
         excludes="*.txt,*.bat,*.xml,*.sh,${manifest}"
         manifest="${module.build.dest}/${manifest}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Run ArgoUML from compiled sources                                   -->
  <!-- =================================================================== -->
  <target name="run" depends="init, jar" 
          description="run ArgoUML using the built module jar">
    <echo message="--- Executing ${Name} ---"/>
    <java classname="org.argouml.application.Main"
          fork="yes">
      <sysproperty key="log4j.configuration" value="org/argouml/resource/full_console.lcf"/>
      <classpath>
        <fileset dir="${module.build.dir}">
            <include name="${module.jarfile.name}" />
        </fileset>
        <path refid="module.compile.classpath"/>
        <!-- maybe this will be used in the future, but, for now it makes 
             this build target fail -->
        <!--
        <fileset dir="${module.lib.dir}">
            <include name="*.jar" />
        </fileset>
        -->
      </classpath>

    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" 
          description="cleanup all files and directories created by this build script">
    <delete file="${argo.build.dir}/ext/${module.jarfile.name}"/>
    <delete file="${argo.build.dir}/ext/${antlr-rt.jar}"/>
    <delete file="${argo.build.dir}/ext/${antlr2.jar}"/>
    <delete dir="${module.build.dir}"/>
   
    <antcall target="cleanparsers"/>
    <antcall target="pde-clean" />
  </target>

  <!-- =================================================================== -->
  <!-- Move the jar file into the extension directory.                     -->
  <!-- =================================================================== -->
  <target name="install" depends="init, jar" 
          description="install the module in the developer build of ArgoUML">
    <copy todir="${argo.build.dir}/ext">
      <fileset dir="${module.build.dir}" includes="${module.jarfile.name}"/>
    </copy>
    <copy todir="${argo.build.dir}/ext">
      <fileset dir="${module.lib.dir}">
        <include name="${antlr-rt.jar}"/>
        <include name="${antlr2.jar}"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Runs checkstyle to find style problems.                             -->
  <!-- =================================================================== -->
  <target name="checkstyle" depends="init, cleanparsers"
          description="Run checkstyle on the java module.">
    <java classname="com.puppycrawl.tools.checkstyle.Main" failonerror="false" fork="true" maxmemory="32M">
      <sysproperty key="checkstyle.header.file" value="${argo.tools.dir}/checkstyle/java.header"/>
      <classpath>
        <pathelement location="${checkstyle.jar.path}"/>
        <pathelement location="${ant-xerces.jar.path}"/>
      </classpath>
      <arg value="-c"/>
      <arg value="${argo.tools.dir}/checkstyle/checkstyle_argouml.xml"/>
      <arg value="-r"/>
      <arg value="${module.src.dir}"/>
      <arg value="-r"/>
      <arg value="${module.tests.dir}"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the tests directory                                        -->
  <!-- =================================================================== -->
  <target name="compile-tests" depends="compile"> 

    <echo message="Compiling the unit tests"/>
    
    <!-- antcall target="copy-tests-resources"/ -->

    <javac srcdir="${module.tests.src}"
           destdir="${module.tests.classes}"
           debug="true"
           deprecation="false"
    	   excludes="org/argouml/language/java/reveng/TestJavaImportUnicode.java"
           optimize="false"
           source="1.5"
           target="1.5">
      <classpath>
        <path refid="module.compile-tests.classpath"/>
      </classpath>
     </javac>
    <javac srcdir="${module.tests.src}"
           destdir="${module.tests.classes}"
           debug="true"
           deprecation="false"
    	   includes="org/argouml/language/java/reveng/TestJavaImportUnicode.java"
    	   encoding="ISO-8859-1"
           optimize="false"
           source="1.5"
           target="1.5">
      <classpath>
        <path refid="module.compile-tests.classpath"/>
      </classpath>
     </javac>
  </target>
  
  <target name="copy-tests-resources" depends="init">
    <property name="tests.reveng.src" 
      value="${module.tests.src}/org/argouml/language/java/reveng"/>
    <property name="tests.reveng.classes"
      value="${module.tests.classes}/org/argouml/language/java/reveng"/>
     
    <copy file="${tests.reveng.src}/SimpleClass.java" 
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/quadratic.i" 
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/UnionInlineDefInMember.java"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/CastExpressions.java"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/DerivedFromAbstract.cxx"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/issue0006_test_preprocessed.java"
      todir="${tests.reveng.classes}"/>
    <copy file="${tests.reveng.src}/issue0025.java"
      todir="${tests.reveng.classes}"/>
  </target> 

  <!-- =================================================================== -->
  <!-- Run the module unit tests                                           -->
  <!-- =================================================================== -->
  <target name="tests" depends="init" 
          description="run the module unit tests"> 

    <echo message="running the unit tests"/>
    <antcall target="tests-xml"/>    
    <antcall target="create-tests-report"/>
  </target>
  
  <target name="tests-xml" depends="init, compile-tests" >
    <junit errorproperty="junit.failure" fork="yes" haltonfailure="false" 
           maxmemory="128M" printsummary="true">
          <!-- use different log4j configuration for testing -->
      <sysproperty key="log4j.configuration" value="org/argouml/resource/full_console.lcf"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <classpath>
        <path refid="module.run-tests.classpath"/>
        <pathelement location="${module.tests.classes}"/>
      </classpath>
      <assertions>
        <enable package="org.argouml"/>
      </assertions>
      <formatter type="xml"/>
      <!-- TODO: how to switch this on and off without lots of duplication?
           Further indirection?
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"/>
      -->
      <batchtest todir="${module.tests.reports}">
        <fileset dir="${module.tests.src}">
          <include name="org/argouml/**/Test*.java"/>
          <!-- TODO: ditto, see above. argouml-cpp's build.xml has some kind of
               solution to this.
          <include name="org/argouml/**/TestClassImportGenerics.java"/>
          -->
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="create-tests-report">
    <echo message="Creating unit tests report to ${module.tests.reports}/html/index.html"/>
    
    <junitreport todir="${module.tests.reports}">
      <fileset dir="${module.tests.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${module.tests.reports}/html"/>
    </junitreport>
  </target>


  <!-- =================================================================== -->
  <!-- Eclipse PDE targets from here to end of file                        -->
  <!-- =================================================================== -->
  <!-- 
    Required targets (called in this order) are:
      build.jars
      gather.bin.parts - must create and populate "${destination.temp.folder}/<Bundle-SymbolicName>_<Bundle-Version>
      gather.logs
    If p2.gathering = true in build.properties:
      publish.bin.parts target replaces gather.bin.parts
  -->
  
    <target name="pde-properties" if="eclipse.running">
      <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    </target>
  
    <target name="pde-init" depends="pde-properties">

      <property name="bundleId" value="org.argouml.module.java" />

      <!-- This property is magic and will have its value substituted by PDE -->
      <property name="version.suffix" value="0.29.3.201001110804"/>
      <property name="bundleVersion" value="${version.suffix}" />

      <!-- Compiler settings. -->
      <condition property="dir_bootclasspath" value="${java.home}/../Classes">
        <os family="mac" />
      </condition>
      <property name="dir_bootclasspath" value="${java.home}/lib" />
      <path id="path_bootclasspath">
        <fileset dir="${dir_bootclasspath}">
          <include name="*.jar" />
        </fileset>
      </path>
      <property name="bootclasspath" refid="path_bootclasspath" />
      <property name="bundleBootClasspath" value="${bootclasspath}" />

      <condition property="pluginTemp" value="${buildTempFolder}/plugins">
        <isset property="buildTempFolder" />
      </condition>
      <property name="pluginTemp" value="${basedir}" />
      <condition property="build.result.folder" value="${pluginTemp}/${bundleId}_${bundleVersion}">
        <isset property="buildTempFolder" />
      </condition>
      <property name="build.result.folder" value="${basedir}" />
      <property name="plugin.destination" value="${basedir}" />
      <condition property="p2.publish.parts" value="true">
        <istrue value="${p2.gathering}"/>
      </condition>
    </target>

  <target name="pde-clean" depends="pde-init">
    <delete file="${plugin.destination}/${bundleId}_*.jar" />
    <delete file="${plugin.destination}/${bundleId}_*.zip" />
  </target>

  <target name="build.jars" depends="jar" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
    <mkdir dir="${build.result.folder}/@dot"/>
    <copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
      <fileset dir="${module.build.dest}" includes="org/argouml/**" excludes="*.txt,*.bat,*.xml,*.sh" />
    </copy>
  </target>

  <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${build.result.folder}/@dot" includes="**"/>
    </copy>
    
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="plugin.properties"/>
        <include name="plugin.xml"/>
      </fileset>
    </copy>

    <eclipse.versionReplacer path="${destination.temp.folder}/${bundleId}_${bundleVersion}" version="${bundleVersion}" />
  </target>

  <target name="publish.bin.parts" depends="init" if="p2.publish.parts">

    <!-- First call old target to gather binaries -->
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${build.result.folder}"/>
    </antcall>

    <eclipse.versionReplacer path="${build.result.folder}" version="${bundleVersion}" />

    <!-- Now use P2 publishing tools to publish to our build repository -->
    <eclipse.gatherBundle
      metadataRepository="${p2.build.repo}"
      artifactRepository="${p2.build.repo}"
      buildResultFolder="${build.result.folder}"
      baseDirectory="${basedir}"
    />
  </target>

  <target name="gather.logs" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}"/>
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false">
      <fileset dir="${module.build.dir}">
        <include name="compile.log"/>  
      </fileset>
    </copy>
  </target>

</project>

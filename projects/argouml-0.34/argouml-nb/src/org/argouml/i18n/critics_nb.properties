# $Id: critics_nb.properties 57 2005-06-08 23:11:17Z hansfn $
# Based on critics.properties,v 1.13.
# Copyright (c) 2005 The Regents of the University of California. All
# Rights Reserved. Permission to use, copy, modify, and distribute this
# software and its documentation without fee, and without a written
# agreement is hereby granted, provided that the above copyright notice
# and this paragraph appear in all copies.  This software program and
# documentation are copyrighted by The Regents of the University of
# California. The software program and documentation are supplied "AS
# IS", without any accompanying services from The Regents. The Regents
# does not warrant that the operation of the program will be
# uninterrupted or error-free. The end-user understands that the program
# was developed for research purposes and is advised not to rely
# exclusively on the program for any reason.  IN NO EVENT SHALL THE
# UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
# Created from UMLCognitiveResourceBundle.java
# The keys are generated from the class names of the classes that use them.

critics.CrAlreadyRealizes-desc=Den valgte klassen realiserer allerede Interface {item.extra} indirekte. Det er ingrn grunn til å realiserer det igjen.\n\
		\n\
		Forenkling av utformingen er alltid en god ting. Du kan forkaste dette oppgaveelementet hvis du vil gjøre det veldig eksplisitt at den valgte klassen realisers dette grensesnittet.\n\
		\n\
		For å behandle dette, velg Realisering (stipled linje med hvit triangulært hode) og press Ctrl + Delete.
critics.CrAlreadyRealizes-head=Fjern unødvendige realiseringer av <ocl>self</ocl>
critics.CrAssocNameConflict-desc=Hvert element i et navnerom må ha et unikt navn.\n\
		\n\
		Klare og entydig navngiving er et nøkkelelement i kodegenerering og gjør utformingen mer forståelig og mer vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller velg elementene manuelt og bruk Egenskaper-arkfanen for å endre navnene deres.
critics.CrAssocNameConflict-head=Løs assosiasjonsnavnekonflikt
critics.CrAttrNameConflict-desc=Hvert attributt må ha distinkte navn. Denne kritikken kan ha blitt utløst som et resultat av et arvet attributtnavn.\n\
		\n\
		Klare og entydig navngiving er et nøkkelelement i kodegenerering og gjør utformingen mer forståelig og mer vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller velg et av klasseattributene som er i konflikt manuelt og endre navnet dets.
critics.CrAttrNameConflict-head=Revidér attributtnavn for å unngå konflikt
critics.CrCallWithoutReturn-desc=Hver kall- eller sendhandling krever en returhandling,\n\
		men denne lenka har ingen returhandling.
critics.CrCallWithoutReturn-head=Manglende returhandlinger
critics.CrCircularAssocClass-desc=Assosiasjonsklasser kan ikke inkludere roler som peker rett tilbake til assosiasjonsklassen.
critics.CrCircularAssocClass-head=Sirkulær assosiasjon
critics.CrCircularComposition-desc=Komposisjonsforbindelser (svarte diamanter) kan ikke ha sirkler.\n\
		\n\
		Et gyldig aggregeringshierarki er nødvendig for kodegenerering og for en korrekt utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller velg en av assosiasjonene i sirkelen manuelt, og fjerne den eller endre dens aggregering til noe annet enn sammensatt.
critics.CrCircularComposition-head=Fjern sirkulær komposisjon
critics.CrCircularInheritance-desc=Arvforbindelser kan ikke ha sirkler.\n\
		\n\
		Et lovlig klassearvhierarki er nødvendig for kodegenerering og for en korrekt utforming.
critics.CrCircularInheritance-head=Fjern <ocl>self</ocl> sin sirkulære arv
critics.CrClassMustBeAbstract-desc=Klasser som inkluderer eller arver abstrakte metoder fra basisklasser eller grensesnitt må være markert som abstrakte.\n\
		\n\
		Avgjørelsen om hvilke klasser som er abstrakte eller konkrete er en nøkkel del av utformingen av klassehierarkiet.\n\
		\n\
		For å behandle dette, bruke Neste-knappen eller velg klassen manuelt og bruk egenskaper-arkfanen til å legge til Abstract-nøkkelordet, eller manuelt implementér alle abstrakte operasjoner som er arvet fra en basisklasse eller et grensesnitt.\n\
		\n\
		
critics.CrClassMustBeAbstract-head=Klassen <ocl>self</ocl> må være abstrakt
critics.CrClassWithoutComponent-desc=I utplasseringsdiagrammer er klasser normalt inne i komponenter
critics.CrClassWithoutComponent-head=Klasser vanligvis inne i komponenter
critics.CrCompInstanceWithoutNode-desc=Det er node-instanser i diagrammet. Du har et ekte utplasseringsdiagram,\n\
		og i utplasseringsdiagram befinner komponent-instanser seg vanligvis på\n\
		node-instanser.
critics.CrCompInstanceWithoutNode-head=Komponent-instanser er vanligvis inne i noder
critics.CrComponentWithoutNode-desc=Det er noder i diagrammet. Du har et ekte utplasseringsdiagram,\n\
		og i utplasseringsdiagram befinner komponenter seg vanligvis på noder.
critics.CrComponentWithoutNode-head=Komponenter er vanligvis inne i noder
critics.CrConflictingComposites-desc=En sammensatt role (svart diamant) for en assosiasjon indikerer at klasseinstanser inneholder instanser av assosierte klasser. Siden hver instans kun kan være inneholdt i et annet objekt, kan hvert objekt kun være del av en er-del-av forbindelse.\n\
		\n\
		Bra OO-utforming avhenger av gode er-del-av egenskaper.\n\
		\n\
		For å behandle dette, bruke Neste-knappen eller endre manuelt en assosiasjon til å ha multiplisitet 0..1 eller 1..1, eller en annen type aggregering (f.eks er en hvit diamant mindre streng) eller fjern en av assosiasjonene.
critics.CrConflictingComposites-head=Fjern motstridende sammensatte assosiasjoner
critics.CrConsiderSingleton-desc=<ocl>self</ocl> har ingen ikke-statiske attributter eller noen assosiasjoner som er navigerbare vekk fra instanser av denne klassen. Dette betyr at hver instans av denne klassen vil bli identisk med alle andre instanser, siden det ikke er noe ved instansens som kan skille dem fra hverandre.\n\
		\n\
		Under disse omstendigheten bør du vurdere å gjøre det eksplisitt at du bare har en instance of denne klassen ved å bruke singleton-mønsteret. Bruk av singleton-mønsteret kan spare tid og minne. I ArgoUML kan dette gjøres ved å bruke <<singleton>> stereotypen på denne klassen.\n\
		\n\
		Hvis det ikke er din hensikt å ha en enkelt instans, bør du definere instansvariabler (altså ikke-statiske attributter) og/eller utgående assosiasjoner som vil representere forskjeller mellom instansene.\n\
		\n\
		Etter å ha spesifisert <ocl>self</ocl> som en singleton, må du definere klassen slik at det kan bare være en enkelt instans. Dette vil fullføre informasjonsrepresentasjonsdelen av din utforming. For å oppnå dette må du gjøre følgende:\n\
		\n\
		1. Definér en statisk attributt (en klassevariable) som holder instansen. Denne må derfor ha <ocl>self</ocl> som sin type.\n\
		\n\
		2. Tilby bare private konstruktører for <ocl>self</ocl> slik at nye instanser ikke kan bli lagd av annen kode. Opprettelsen av den enkelte instansen kan bli gjort gjennom en passende hjelperoperasjon som kaller denne private konstruktøren kun en gang.\n\
		\n\
		3. Tilby minst en konstruktør som overstyrer standardkonstruktøren, slik at standardkonstruktøren ikke er brukt for å opprette flere instanser.\n\
		\n\
		I UML 1.3 standard er en konstruktør en operasjon med stereotype <<create>>.\n\
		\n\
		I Java og C++ er det konvensjon at en konstruktør har samme navn som klassen, ikke er statisk og returnere ingen verdi. Merk at i ArgoUML så betyr dette at du må fjerne returverdien som opprettes som standard for konstruktøroperasjonen.
critics.CrConsiderSingleton-head=Vurdér å bruke singletin-mønsteret for <ocl>self</ocl>
critics.CrConstructorNeeded-desc=Du har ikke definert en konstruktør for klassen <ocl>self</ocl>. Konstruktører initialiserer nye instanser slike at deres attributter har gyldig verdier. Denne klassen trenger sannsynligvis en konstruktør fordi ikke alle attributtene har initialverdier.\n\
		\n\
		Definering av gode konstruktører er en nøkkel til å etablere klasseinvarianter, og klasseinvarianter er et kraftig hjelpemiddel til å skrive robust kode.\n\
		\n\
		For å behandle dette, legg til en konstruktør manuelt ved å klikke på <ocl>self</ocl> i navigator-arkfanen og legg til en operasjon ved å bruke den kontekst sensitive oppsprettmenyen in egenskaper-arkfanen, eller velg <ocl>self</ocl> hvor den viser seg i klasse diagrammet og bruk Legg til operasjon-verktøyet. Bruk så egenskaper-arkfanen i detljevinduet for å velge <<create>> stereotypen for operasjonen.\n\
		\n\
		En konstruktør er en operasjon med stereotype <<create>>.
critics.CrConstructorNeeded-head=Legg til konstruktør til <ocl>self</ocl>
critics.CrCrossNamespaceAssoc-desc=Hver klasse, grensesnitt eller annen klassifikator (<ocl>self</ocl>) involvert i en assosiasjon bør være i navnerommet til assosiasjonen.\n\
		\n\
		Hvis det ikke er tilfellet, s¨vil det ikke være noen måte for klassene, grensesnittene eller andre klassifikatorer for å navngi referansen til hverandre med assosiasjonen.\n\
		\n\
		Merk at denne kritikken for øyeblikket ikke tolker hierarkiske navnerom. Den vil utløses hvis de endelige komponentene av navnerommet er forskjellig, selv om de deler en felles rot, og denne kritikken bør tolkes i lys av det.\n\
		\n\
		\n\
		For å behandle denne, slett assosiasjonen, og gjenopprett den i et diagram med et navnerom som inkluderer klassene, grensesnittene og klassifikatorer som er involvert.
critics.CrCrossNamespaceAssoc-head=Klassifikator <ocl>self</ocl> er ikke i navnerommet til sin egen assosiasjonen
critics.CrDisambigClassName-desc=Hver klasse og grensesnitt innen en pakke må ha et unikt navn. Det er minst to elementer i denne pakken kalt <ocl>self</ocl>.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruk Neste-knappen, eller velg manuelt en av motstridende klassen og bruk egenskaper-arkfanen for å endre navnet.
critics.CrDisambigClassName-head=Velg et unikt navn for <ocl>self</ocl>
critics.CrDisambigStateName-desc=Hver tilstand innen en tilstandmaskin må ha et unikt navn. Det er minst to tilstander i denne maskinen kalt <ocl>self</ocl>.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruk Neste-knappen, eller velg manuelt en av motstridende tilstandene og bruk egenskaper-arkfanen for å endre navnet.
critics.CrDisambigStateName-head=Velg et unikt navn for <ocl>self</ocl>
critics.CrDupParamName-desc=Hver parameter i en operasjon må ha et unikt navn.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruk Neste-knappen, eller endre navn manuelt på en av parameterne til denne operasjonen.
critics.CrDupParamName-head=Duplikat parameternavn
critics.CrDupRoleNames-desc=Assosiasjonen <ocl>self</ocl> har to (eller flere) roler med samme navn.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette,  velg manuelt <ocl>self</ocl> og bruk egenskaper-arkfanen for å endre en eller flere av de motstridende rollenavnene.
critics.CrDupRoleNames-head=Duplikat ende(role)navn for <ocl>self</ocl>
critics.CrEmptyPackage-desc=Du har enda ikke puttet noe i pakken  <ocl>self</ocl>. Vanligvis inneholder pakker grupper av relaterte klasser.\n\
		\n\
		Definering og bruk av pakker er nøkkel til å lage en vedlikeholdbar utforming.\n\
		\n\
		For å behandle dette, velg pakken <ocl>self</ocl> in navigator-arkfanen og legg til diagrammer eller modellelementer som klasser eller bruksmønstre.
critics.CrEmptyPackage-head=Legg til elementer til pakke  <ocl>self</ocl>
critics.CrFinalSubclassed-desc=Nøkkelordet løv indikerer at klassen ikke er ment å ha underklasser. Denne klassen eller grensensittet er markert som løv og har underklasser.\n\
		\n\
		Et godt gjennomtenkt klassearvhierarki som bringer videre og støtter påtenkte utvidelser er en viktig del av å oppnå en forståelig og vedlikeholdbar utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller velg manuelt klassen og endre dens basisklassen, eller velg basisklassen og bruk egenskaper-arkfanen til å fjerne løv-nøkkelordet.
critics.CrFinalSubclassed-head=Fjern løv-nlkkelord eller fjern underklasser fra  <ocl>self</ocl>
critics.CrForkOutgoingTransition-desc=Kilden til  <ocl>self</ocl> er en forgreningspseudotilstand, men dens mål er ikke en tilstand. Et forgreningssegment bør alltid ha en tilstand som mål.\n\
		\n\
		Definering av gyldig overganger er nødvendig for å fullføre oppførselsspesifikasjonsdelen av utformingen din.\n\
		\n\
		For å reparere dette, fjern denne overgangen ved å klikke på overgangen i diagrammet og press Ctrl + Delete. Du kan også endre overgangens kilde- eller måltilstand.
critics.CrForkOutgoingTransition-head=Ugyldig mål for overgang
critics.CrIllegalGeneralization-desc=Modellelementer kan bare arve fra andre av samme type.\n\
		\n\
		Et lovlig arvhierarki er nødvendig for kodegenerering og for korrekt utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller velg manuelt generaliseringspilen og fjern den.
critics.CrIllegalGeneralization-head=Ulovlig generalisering
critics.CrIllegalName-desc=Navnene på modellelementer må være en sekvens av bokstaver, tall og understreker. De kan ikke inneholde tegnsetting.\n\
		\n\
		Kodegenerering krever gyldig navn for at den resulterende koden skal kompilere korrekt.\n\
		\n\
		For å behandle dette, velg manuelt det framhevede elementet og bruke egenskaper-arkfanen for å gi den et annet navn.
critics.CrIllegalName-head=Velg et lovlig navn for <ocl>self</ocl>
critics.CrInstanceWithoutClassifier-desc=Instanser har en klassifikator
critics.CrInstanceWithoutClassifier-head=Set klassifikator
critics.CrInterfaceAllPublic-desc=Grensesnitt er påtenkt å spesifisere settet med operasjoner som andre klasser må implementere. De må være offentlige.\n\
		\n\
		Et velutformet sett av grensesnitt er en god måte å definere mulige utvidelser av et klasserammeverk.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller velg manuelt grensesnittets operasjoner og bruk egenskaper-arkfanen for å gjøre dem offentlige.
critics.CrInterfaceAllPublic-head=Operasjoner i grensesnitt må være offentlige
critics.CrInterfaceOperOnly-desc=Grensesnitt er påtenkt å spesifisere settet med operasjoner som \n\
		andre klasser må implementere. De implementerer ikke disse\n\
		operasjonene selv og kan ikke ha attributter.\n\
		\n\
		Et velutformet sett av grensesnitt er en god måte å definere \n\
		mulige utvidelser av et klasserammeverk.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller velg manuelt grensesnittet\n\
		og bruk egenskaper-arkfanen for å fjerne alle attributter.
critics.CrInterfaceOperOnly-head=Grensesnitt kan bare ha operasjoner
critics.CrInterfaceWithoutComponent-desc=I utplasseringsdiagrammer er vanligvis grensesnitt inne i komponenter.
critics.CrInterfaceWithoutComponent-head=Grensesnittet er vanligvis inne i komponenter
critics.CrInvalidBranch-desc=Denne grentilstanden (valg eller kryss) har et ugyldig antall overganger. Vanligvis har grentilstander minst en innkommende og minst en utgående overgang.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å behandle dette, legg til overganger med overgangsverktøyet.
critics.CrInvalidBranch-head=Legg til valg/kryss-overgang
critics.CrInvalidFork-desc=Denne forgreningenstilstanden har et ugyldig antall overganger. Vanligvis har forgreningstilstander en innkommende og to eller flere utgående overgang.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å behandle dette, legg til eller fjern overganger manuelt.
critics.CrInvalidFork-head=Endre forgreningsoverganger
critics.CrInvalidForkTriggerOrGuard-desc=Den framhevede overgangen bør ikke ha en utløser eller vakt fordi den er en forgreningspseudotilstands utgående overgang. Overganger utgående fra en forgreningsverteks må ikke ha utløsere eller vakter.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å reparer dette, velg utløser i utforsker-arkfanen og fjern den fra modellen med høyreklikk musmenyen. Eller, hvis det er en vakt, fjern den ved å dobbeltklikke i overgangsvaktfeltet og press så Ctrl + Delete.
critics.CrInvalidForkTriggerOrGuard-head=Fjern utløser eller vakt fra forgrenings utgående overgang
critics.CrInvalidHistory-desc=Denne historietilstanden har et ugyldig antall overganger. Vanligvis har ShallowHistory- og DeepHistory-tilstander ikke mer enn en utgående overgang.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å reparere dette, fjern overganger ved å klikke på overgangen i diagrammet og press så Ctrl + Delete.
critics.CrInvalidHistory-head=Fjern ekstrå utgående overganger
critics.CrInvalidInitial-desc=Denne initielle tilstanden har et gyldig antall overganger. Vanligvis har initielle tilstander ikke mer enn en utgående overgang.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å reparere dette, fjern overganger ved å klikke på overgangen i diagrammet og press så Ctrl + Delete.
critics.CrInvalidInitial-head=Fjern ekstra utgående overganger
critics.CrInvalidJoin-desc=Denne sammenføyingstilstanden har et gyldig antall overganger. Vanligvis har sammenføyingstilstander to eller flere innkommende overganger og en utgående overgang.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å reparere dette, fjern eller legg til overganger manuelt.
critics.CrInvalidJoin-head=Endre sammenføyingsoverganger
critics.CrInvalidJoinTriggerOrGuard-desc=Den framhevede overgangen bør ikke ha en utløser eller vakt fordi den er en sammenføyingspseudotilstands innkommende overgang. Overganger inn i en sammenføyingsverteks må ikke ha utløsere eller vakter.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å reparer dette, velg utløser i utforsker-arkfanen og fjern den fra modellen med høyreklikk musmenyen. Eller, hvis det er en vakt, fjern den ved å dobbeltklikke i overgangsvaktfeltet og press så Ctrl + Delete.
critics.CrInvalidJoinTriggerOrGuard-head=Fjern utløser eller vakt fra sammenføyings innkommende overgang
critics.CrInvalidPseudoStateTrigger-desc=Den framhevede overgangen bør ikke ha en utløser fordi den er en pseudotilstands utgående overgang. Overganger utgående fra en pseudotilstand må ikke ha utløsere.\n\
		\n\
		Definering av korrekte tilstandsoverganger er nødvendig for å fullføre oppførselspesifikasjonen i utformingen din.\n\
		\n\
		For å reparer dette, velg utløser i utforsker-arkfanen eller egenskaper-arkfanen og fjern den fra modellen med høyreklikk musmenyen.
critics.CrInvalidPseudoStateTrigger-head=Fjern utløser fra pseudotilstands utgående overgang
critics.CrLinkWithoutStimulus-desc=I et sekvensdiagram sender et sende-objekt stimuli til et mottakende objekt gjennom en lenke. Lenka er den eneste kommunikasjonsforbindelsen så et stimuli er nødvendig.
critics.CrLinkWithoutStimulus-head=Intet stimulipå disse lenkene
critics.CrMissingAttrName-desc=Alle attributter må ha et navn.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruke Neste-knappen, eller velg attributtet manuelt og bruk egenskaper-arkfanen for å gi den et navn.
critics.CrMissingAttrName-head=Velg et navn
critics.CrMissingClassName-desc=Alle klasser og grensesnitt i en pakke må ha et navn.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruke Neste-knappen, eller velg klassen manuelt og bruk egenskaper-arkfanen for å gi den et navn.
critics.CrMissingClassName-head=Velg et navn
critics.CrMissingOperName-desc=Alle operasjoner må ha et navn.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruke Neste-knappen, eller velg operasjonen manuelt og bruk egenskaper-arkfanen for å gi den et navn.
critics.CrMissingOperName-head=Velg et navn
critics.CrMissingStateName-desc=Alle tilstander i en tilstandsmaskin bør ha et navn.\n\
		\n\
		Klar og entydig navngiving er et nøkkelelement for kodegenerering og gjør utformingen mer forståelig og vedlikeholdbar.\n\
		\n\
		For å behandle dette, bruke Neste-knappen, eller velg tilstanden manuelt og bruk egenskaper-arkfanen for å gi den et navn, eller velg tilstanden og skriv inn et navn.
critics.CrMissingStateName-head=Velg et navn
critics.CrMultiComposite-desc=En instans kan ikke tilhøre ved sammensetning til mer enn en sammensatt instans. Du må endre multiplisitetene ved den sammensatte enden av assosiasjonen til enten 0..1 eller 1..1 (1) for at din modell skal gi mening.\n\
		\n\
		Husk at sammensetning er en sterkere form for aggregering. Problemet kan sammenlignes med en modell hvor en finger kan være en integrert del av flere hender på samme tid.\n\
		\n\
		Dette er den andre regelen for velformethet på assosiasjonender i UML 1.3.
critics.CrMultiComposite-head=Sammensatt assosiasjonsende med multiplisitet > 1
critics.CrMultipleAgg-desc=Bare en ende(role) av en binær assosiasjon kan være aggregert eller sammensatt.\n\
		\n\
		Aggregering og sammensetning brukes for å indikere hel-del forbindelser og, ved definisjon, kan ikke "del"-enden være aggregert.\n\
		\n\
		For å behandle dette, velg Neste-knappen for å bruke veiviseren, eller velg manuelt assosiasjonen og sett noen av dens roleaggreringer til ingen.
critics.CrMultipleAgg-head=To aggregerte ende(roler) i binær assosiasjon
critics.CrMultipleDeepHistoryStates-desc=Det er multiple, flertydige dype historietilstander i denne maskinen eller sammensatte tilstanden. Vanligvis har hver tilstandsmaskin eller sammensatt tilstand bare en dyp historietilstand.\n\
		\n\
		Definering av ikke-flertydige historietilstander er nødvendig for å fullføre oppførselsspesifikasjonen i ditt design.\n\
		\n\
		For å fikse dette, velg en av de dype historietilstandene og slett den ved å trykke Ctrl + Delete.
critics.CrMultipleDeepHistoryStates-head=Fjern ekstra dype historietilstander
critics.CrMultipleRealization-desc=<ocl>self</ocl> implementer flere grensesnitt. Selvom dette er lovlig i UML så vil ikke denne koden kompilere i Java. Bytt ut de multiple realiseringene med generaliseringer hvis du vil lage kompilerbar og feilfri (Java)kode.
critics.CrMultipleRealization-head=Endre multiple realiseringer i <ocl>self</ocl> til generaliseringer
critics.CrMultipleShallowHistoryStates-desc=Det er multiple, flertydige grunne historietilstander i denne maskinen eller sammensatte tilstanden. Vanligvis har hver tilstandsmaskin eller sammensatt tilstand bare en grunn historietilstand.\n\
		\n\
		Definering av ikke-flertydige historietilstander er nødvendig for å fullføre oppførselsspesifikasjonen i ditt design.\n\
		\n\
		For å fikse dette, velg en av de grunne historietilstandene og slett den ved å trykke Ctrl + Delete.
critics.CrMultipleShallowHistoryStates-head=Fjern ekstra grunne historietilstander
critics.CrNWayAgg-desc=Treveis (eller mer) assosiasjoner kan ikke ha aggregerte ender(oler).\n\
		\n\
		Aggregering og sammensetning brukes for å indikere hel-del forbindelser og, ved definisjon, kan bare brukes på binære assosiasjoner mellom artifakter.\n\
		\n\
		For å behandle dette, velg assosiasjonen manuelt og sett  aggregeringen av hver av dens ender(oler) til ingen.
critics.CrNWayAgg-head=Aggregert ende(role) i treveis (eller mer) assosiasjon
critics.CrTooManyAssoc-desc=Det er for mange assosiasjoner på klasse <ocl>self</ocl>. Når en klasse blir for en sentral i utformingen, kan den bli en vedlikeholdsflaskehals som må oppdateres ofte.\n\
		\n\
		Definering av assosiasjonene mellom objekter er en viktig del av din utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller fjern assosiasjoner manuelt ved å klikke på en assosiasjon i navigatorvinduet eller i diagrammet og press Delete-tasten.
critics.CrTooManyAssoc-head=Redusér antall assosiasjoner på <ocl>self</ocl>
critics.CrTooManyAttr-desc=Det er for mange attributter på klasse <ocl>self</ocl>. Når en klasse blir for en sentral i utformingen, kan den bli en vedlikeholdsflaskehals som må oppdateres ofte.\n\
		\n\
		Definering av attributtene til objekter er en viktig del av din utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller fjern attributter manuelt ved å dobbelt-klikke på attributtavdelingen til den uthevede klassen i daigrammet og fjern teksten for et attributt.
critics.CrTooManyAttr-head=Redusér antall attributter på <ocl>self</ocl>
critics.CrTooManyClasses-desc=Det er for mange klasser i <ocl>self</ocl>. Når et klassediagrammet har for mange klasser, kan det bli vanskelig å forstå for mennesker.\n\
		\n\
		Definering av et forståelige sett av klassediagram er en viktig del av din utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller fjern klasser manuelt ved å klikke på en klasse i navigatorvinduet eller i diagrammet og press Delete-tasten. Eller du kan lage et nytt diagram ...
critics.CrTooManyClasses-head=Redusér antall klasser i diagram <ocl>self</ocl>
critics.CrTooManyOper-desc=Det er for mange operasjoner på klasse <ocl>self</ocl>. Når en klasse blir for en sentral i utformingen, kan den bli en vedlikeholdsflaskehals som må oppdateres ofte.\n\
		\n\
		Definering av operasjonene til objekter er en viktig del av din utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller fjern operasjoner manuelt ved å dobbelt-klikke på operasjonsavdelingen til den uthevede klassen i daigrammet og fjern teksten for en operasjon.
critics.CrTooManyOper-head=Redusér antall operasjoner på <ocl>self</ocl>
critics.CrTooManyStates-desc=Det er for mange tilstander i <ocl>self</ocl>. Hvis en tilstandsmaskin har for mange tilstander, kan den være veldig vanskelig å forstå for mennesker.\n\
		\n\
		Definering av et forståelig sett med tilstander er en viktig del av din utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller fjern tilstander manuelt ved å klikke på en tilstand i navigatorvinduet eller i diagrammet og press Delete-tasten. Eller du kan nøste tilstander ...
critics.CrTooManyStates-head=Redusér antall tilstander i maskin <ocl>self</ocl>
critics.CrTooManyTransitions-desc=Det er for mange overganger på tilstand <ocl>self</ocl>. Når en tilstand blir for sentral i maskinen, kan den bli en vedlikeholdsflaskehals som må oppdateres ofte.\n\
		\n\
		Definering av overgangene mellom tilstander er en viktig del av din utforming.\n\
		\n\
		For å behandle dette, bruk Neste-knappen eller fjern overganger manuelt ved å klikke på en overgang i navigatorvinduet eller i diagrammet og press Delete-tasten.
critics.CrTooManyTransitions-head=Redusér antall overganger på <ocl>self</ocl>
critics.CrUnconventionalAttrName-desc=Vanligvis begynner attributter med litenbokstav. Navnet «<ocl>self</ocl>» er dermed uvanlig.\n\
		\n\
		Gode navnekonvensjoner hjelper til med å forbedre forståelighet og vedlikeholdbarhet for utformingen.\n\
		\n\
		For å behandle dette, bruk Neste-knappen, eller velg manuelt <ocl>self</ocl> og bruk egenskaper-arkfanen for å gi det et annet navn.
critics.CrUnconventionalAttrName-head=Velg et bedre attributtnavn
critics.CrUnconventionalClassName-desc=Vanligvis begynner klasser med storbokstav. Navnet «<ocl>self</ocl>» er dermed uvanlig.\n\
		\n\
		Gode navnekonvensjoner hjelper til med å forbedre forståelighet og vedlikeholdbarhet for utformingen.\n\
		\n\
		For å behandle dette, bruk Neste-knappen, eller velg manuelt <ocl>self</ocl> og bruk egenskaper-arkfanen for å gi det et annet navn.
critics.CrUnconventionalClassName-head=Stor forbokstav i klassenavnet <ocl>self</ocl>\ 
critics.CrUnconventionalOperName-desc=Vanligvis begynner navn på operasjoner med litenbokstav. Navnet «<ocl>self</ocl>» er dermed uvanlig.\n\
		\n\
		Gode navnekonvensjoner hjelper til med å forbedre forståelighet og vedlikeholdbarhet for utformingen.\n\
		\n\
		For å behandle dette, bruk Neste-knappen, eller velg manuelt <ocl>self</ocl> og bruk egenskaper-arkfanen for å gi den et annet navn.
critics.CrUnconventionalOperName-head=Velg et bedre navn på operasjon
critics.CrUnconventionalPackName-desc=Vanligvis skrives pakkenavn med kun småbokstaver og punktum for å indikere nøstede pakker. Navnet «<ocl>self</ocl>» er dermed uvanlig.\n\
		\n\
		Gode navnekonvensjoner hjelper til med å forbedre forståelighet og vedlikeholdbarhet for utformingen.\n\
		\n\
		For å behandle dette, bruk Neste-knappen, eller velg manuelt <ocl>self</ocl> og bruk egenskaper-arkfanen for å gi det et annet navn.
critics.CrUnconventionalPackName-head=Revidér pakkenavn <ocl>self</ocl>
critics.CrWrongLinkEnds-desc=I utplasseringsdiagram objekter kan befinne seg enten på komponenter\n\
		eller på komponent-instanser. Så det er ikke mulig å ha to objekter\n\
		bundet sammen med en lenke mens et objekt befinner seg på en komponent og\n\
		et annet objelt befinner seg på en komponent-instans.\n\
		\n\
		For å behandle dette, fjern et av de to sammenlenkede objektene fra sin\n\
		plassering til et element som har samme type plassering som for det andre objektet.
critics.CrWrongLinkEnds-head=Lenkeender har ikke samme plassering
critics.CrZeroLengthEdge-desc=Denne kanten er for liten til å kunne sees lett. Dette kan skjule viktig informasjon og gjøre det vanskelig for mennesker å forstå. Et elegant utseende kan også gi diagrammene dine mer innflytelse på andre formgivere, utviklere og beslutningstakere.\n\
		\n\
		Konstruksjon av et forståelig sett av diagrammer er en viktig del av din utforming.\n\
		\n\
		For å behandle dette, flytt en eller flere noder slik at de framhevede kantene blir lenger, eller klikk på midten av kanten og dra for å lage en ny verteks.
critics.CrZeroLengthEdge-head=Gjør kant mer synnlig

/* Generated By:JJTree&JavaCC: Do not edit this line. CastorQLParserConstants.java */
package org.castor.cpa.query.castorql;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CastorQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int CONCATE = 7;
  /** RegularExpression Id. */
  int MULTIPLY = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int REMAINDER = 10;
  /** RegularExpression Id. */
  int GREATERTHAN = 11;
  /** RegularExpression Id. */
  int LESSTHAN = 12;
  /** RegularExpression Id. */
  int GREATEREQUAL = 13;
  /** RegularExpression Id. */
  int LESSEQUAL = 14;
  /** RegularExpression Id. */
  int EQUAL = 15;
  /** RegularExpression Id. */
  int NOTEQUAL1 = 16;
  /** RegularExpression Id. */
  int NOTEQUAL2 = 17;
  /** RegularExpression Id. */
  int IN = 18;
  /** RegularExpression Id. */
  int AS = 19;
  /** RegularExpression Id. */
  int IS = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int BY = 22;
  /** RegularExpression Id. */
  int MOD = 23;
  /** RegularExpression Id. */
  int ABS = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int ASC = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int NIL = 28;
  /** RegularExpression Id. */
  int DESC = 29;
  /** RegularExpression Id. */
  int NULL = 30;
  /** RegularExpression Id. */
  int DATE = 31;
  /** RegularExpression Id. */
  int FROM = 32;
  /** RegularExpression Id. */
  int TIME = 33;
  /** RegularExpression Id. */
  int LIKE = 34;
  /** RegularExpression Id. */
  int LIMIT = 35;
  /** RegularExpression Id. */
  int ORDER = 36;
  /** RegularExpression Id. */
  int WHERE = 37;
  /** RegularExpression Id. */
  int SELECT = 38;
  /** RegularExpression Id. */
  int OFFSET = 39;
  /** RegularExpression Id. */
  int ESCAPE = 40;
  /** RegularExpression Id. */
  int BETWEEN = 41;
  /** RegularExpression Id. */
  int DISTINCT = 42;
  /** RegularExpression Id. */
  int UNDEFINED = 43;
  /** RegularExpression Id. */
  int TIMESTAMP = 44;
  /** RegularExpression Id. */
  int IS_DEFINED = 45;
  /** RegularExpression Id. */
  int IS_UNDEFINED = 46;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 47;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 48;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 49;
  /** RegularExpression Id. */
  int TIMESTAMP_LITERAL = 50;
  /** RegularExpression Id. */
  int DATE_LITERAL = 51;
  /** RegularExpression Id. */
  int TIME_LITERAL = 52;
  /** RegularExpression Id. */
  int STRING_LITERAL = 53;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 54;
  /** RegularExpression Id. */
  int IDENTIFIER = 55;
  /** RegularExpression Id. */
  int LETTER = 56;
  /** RegularExpression Id. */
  int DIGIT = 57;
  /** RegularExpression Id. */
  int TRUE = 58;
  /** RegularExpression Id. */
  int FALSE = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"||\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "\"!=\"",
    "\"<>\"",
    "\"IN\"",
    "\"AS\"",
    "\"IS\"",
    "\"OR\"",
    "\"BY\"",
    "\"MOD\"",
    "\"ABS\"",
    "\"AND\"",
    "\"ASC\"",
    "\"NOT\"",
    "\"NIL\"",
    "\"DESC\"",
    "\"NULL\"",
    "\"DATE\"",
    "\"FROM\"",
    "\"TIME\"",
    "\"LIKE\"",
    "\"LIMIT\"",
    "\"ORDER\"",
    "\"WHERE\"",
    "\"SELECT\"",
    "\"OFFSET\"",
    "\"ESCAPE\"",
    "\"BETWEEN\"",
    "\"DISTINCT\"",
    "\"UNDEFINED\"",
    "\"TIMESTAMP\"",
    "\"IS_DEFINED\"",
    "\"IS_UNDEFINED\"",
    "<BOOLEAN_LITERAL>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<TIMESTAMP_LITERAL>",
    "<DATE_LITERAL>",
    "<TIME_LITERAL>",
    "<STRING_LITERAL>",
    "<CHAR_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<TRUE>",
    "<FALSE>",
    "\":\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"?\"",
    "\"$\"",
    "\".\"",
    "\"->\"",
  };

}

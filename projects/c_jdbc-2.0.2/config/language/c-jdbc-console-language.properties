# 0 => command name, 1 => command parameters
command.usage=Usage: {0} {1}

jmx.server.connection.lost=Connection with mbean server was lost.

module.commands.available=Commands available for the {0} module are:
module.command.not.supported=Command {0} not supported in this module, type 'help' for a list of available commands.
module.command.got.error=There was an exception of type {0} with message {1}
module.loading=Initializing {0} module...
module.quitting=Quitting module {0}
module.database.login.fail=Login for {0} failed.
module.database.invalid={0} is not a valid virtual database name.

console.command.help=Print this help message
console.command.quit=Quit this console
console.command.native=Execute an operating system native command.
console.command.native.output=Output: {0}
console.command.history=Display history of commands for this module
console.byebye=Byebye ...
console.read.command.failed=Failed to read command {0}
console.read.password.failed=Failed to read command {0}

console.error.invalid.comment.argument=Command arguments are different than expected

controller.command.add.driver.description=Upload a driver to the controller
controller.command.add.driver.params=<driver file>
controller.command.add.driver.file.sent=Driver {0} successfully uploaded to controller.
controller.command.add.driver.input.filename=Driver file name
controller.command.add.driver.null.filename=Cannot process a null filename.
controller.command.add.driver.sent.failed=Cannot upload thelist driver to the controller because of: {0}
controller.command.add.driver.file.not.found=File {0} not found.
controller.command.add.driver.file.not.read=Failed to read the file
controller.command.add.driver.file.too.big=File is too large

controller.command.admin.params=<virtualdatabase name>
controller.command.admin.description=Administrate a virtual database

controller.command.bind.params=<controller hostname> <jmx port>
controller.command.bind.description=Connect to a C-JDBC controller
controller.command.bind.success=Connected to C-JDBC controller on {0}:{1}
controller.command.bind.failed=Unable to connect to C-JDBC controller on {0}:{1}

controller.command.connect.params=<c-jdbc url>
controller.command.connect.description=Open a SQL client console for the virtual database specified by the C-JDBC URL

controller.command.drop.database.params=<virtualdatabase name>
controller.command.drop.database.description=Drop a virtual database from the controller
controller.command.drop.database.echo=Dropping database {0} from controller
controller.command.drop.database.null=Missing database name of the database to drop
controller.command.drop.database.success=Database {0} was succesfully removed from controller.

controller.command.generateReport=Generate and display a report of the controller state.
controller.command.getInfo.failed=Error while getting information from C-JDBC controller ({0})

controller.command.get.xml.description=Show Controller configuration
controller.command.get.xml.error=Error while fetching configuration. See controller's log for details.

controller.command.load.vdb.description=Send a virtual database XML configuration file to the controller and load it
controller.command.load.vdb.params=<virtualdatabase xml file>
controller.command.load.vdb.input=XML file name
controller.command.load.vdb.file.null=Xml file was null.
controller.command.load.vdb.success=XML file {0} successfully sent to C-JDBC controller.

controller.command.listDatabases=Show the names of the virtual databases for this controller
controller.command.listDatabases.failed=Error while getting information from C-JDBC controller ({0})

controller.command.monitor.params=<virtualdatabase name>
controller.command.monitor.description=Monitor a virtual database

controller.command.refresh.logs.description=Refresh the trace system by reloading the logging configuration file
controller.command.refresh.logs.completed=Logging configuration has been reloaded
controller.command.refresh.logs.failed=Loggin reconfiguraton was not reloaded due to {0}

controller.command.saveConfiguration=Save the current configuration of the virtual databases as an XML file

controller.command.show.logging.config=Show logging configuration and the most recent traces

controller.command.shutdown=Shutdown the controller and all its virtual databases. Mode parameter must be:\n\
\t1 -- wait for all client connections to be closed, does not work with a connection pool\n\
\t2 -- mode safe, default value, waits for all current transactions to complete\n\
\t3 -- mode force, immediate shutdown without consistency: recovery will be needed on restart

admin.command.backup.params=<backend name> <dump name> <backuper name> <path> [<tables>]
admin.command.backup.description=Backup a backend into a dump file and associate a checkpoint with this dump
admin.command.backup.echo=Backup backend {0} in dump file {1}
admin.command.backup.tables=Tables selected are: {0}

admin.command.restore.log.params=<dump name> <controller name>
admin.command.restore.log.description=Restore a remote recovery log from the local recovery log

admin.command.disable.backend.params=<backend name | *>
admin.command.disable.backend.description=Disable the specified backend and automatically set a checkpoint\n\
\t* means that all backends of this virtual database must be disabled
admin.command.disable.backend.with.checkpoint=Disabling backend {0} with automatic checkpoint.
admin.command.disable.backend.all.with.checkpoint=Disabling all backends with automatic checkpoint.

admin.command.force.disable.backend=Disabling backend {0} with no checkpoint
admin.command.disableAll=Disable all backends.

admin.command.disable.read.params=<backend name>
admin.command.disable.read.description=Disable read requests on a backend
admin.command.disable.read.echo=Disabling read request on backend {0}

admin.command.disable.write=Disable write requests on a backend
admin.command.disable.write.echo=Disabling write requests on backend {0}

admin.command.deleteLogUpToCheckpoint.params=<chekpoint name>
admin.command.deleteLogUpToCheckpoint.description=Purge the recovery log upto specified checkpoint

admin.command.enableAll=Enable all backends from their last known state.

admin.command.enable.params=<backend name | *>
admin.command.enable.description=Enable the specified backend\n\
\t* means that all backends of this virtual database must be enabled

admin.command.enable.read.params=<backend name>
admin.command.enable.read.description=Enable read requests on a backend
admin.command.enable.read.echo=Enabling read requests on backend {0}

admin.command.enable.write=Enable write requests on a backend
admin.command.enable.write.echo=Enabling write requests on backend {0}
admin.command.enable.with.checkpoint=Enabling backend {0} from its last known checkpoint
admin.command.enable.all.with.checkpoint=Enabling all backends from their last known checkpoints

admin.command.expert.mode.description=Switch to expert mode (commands for advanced users are available)
admin.command.expert.mode.params=<on|off>
admin.command.expert.mode.switched.on=Expert mode on
admin.command.expert.mode.switched.off=Expert mode off

admin.command.force.disable.params=<backend name | *>
admin.command.force.disable.description=Force the disabling of a backend without storing any checkpoints\n\
Warning! The backend will not be in a consistent state after this operation!\n\
\t* means that all backends of this virtual database must be disabled by force

admin.command.force.enable.params=<backend name | *>
admin.command.force.enable.description=Force the enabling of a backend without checking for checkpoints\n\
Warning! This command can break the cluster consistency, only use it if you know what you are doing!\n\
\t* means that all backends of this virtual database must be enabled by force

admin.command.force.enable.backend=Enabling backend {0} with no checkpoint

admin.command.get.backend.schema.params=<backend name> <file name>
admin.command.get.backend.schema.description=Display backend schema or save it to a file
admin.command.get.backend.schema.echo=Save schema for backend {0} in file {1}

admin.command.get.xml.description=Show the XML configuration of the virtual database

admin.command.list.backends.description=Show the names of the backends of this virtual database on the current controller

admin.command.removeCheckpoint=Delete a checkpoint and associated entries from recovery log.

admin.command.replicate.params=<backend from> <backend to> <url> [driverPath=<value>] [driver=<value>] [connectionTestStatement=<value>]
admin.command.replicate.description=Clone the configuration of a backend in the current virtual database\n\
This virtually allows to add a new backend.
admin.command.replicate.param=Found param {0} with value {1}
admin.command.replicate.echo=Replicate {0} onto {1} with new url {2}

admin.command.restore.params=<backend name> <dump name> [<tables>]
admin.command.restore.description=Starts the recovery process of the given backend for a given dump name
admin.command.restore.echo=Restoring backend {0} with dump {1}
admin.command.restore.need.dump=Need a dump name to restore.
admin.command.restore.need.backend=Need a backend name to restore.

admin.command.remove.dump.description=Delete a dump
admin.command.remove.dump.parameters=<dump name>
admin.command.remove.dump.echo=Removing dump {0}...
admin.command.remove.dump.done=Done
admin.command.remove.dump.notdone=Not Done

admin.command.show.backend.params=<backend name | *>
admin.command.show.backend.description=Show information on backend of this virtual database\n\
\t* means to show information for all the backends of this virtual database
admin.command.show.backend.no.stats=No backend information for {0}

# 0 => vdb name, 1 => number of controllers
admin.command.show.controllers.number={0} is hosted by {1} controller(s):
admin.command.show.controllers.description=Show the names of the controllers hosting this virtual database

admin.command.showbackend.state=Show extended information on a specific backend.
admin.command.showbackend.state.no.input=A backend name is required.
admin.command.showbackend.state.echo=Displaying information for backend {ConsoleTranslate.get("sql.command.request.description0} (limit is {1}, fromFirst is {2} and clone is {3})
admin.command.showbackend.state.invalid.backend=Backend {0} does not exist.
admin.command.showbackend.state.state=Backend state
admin.command.showbackend.state.active.transactions=Active Transactions
admin.command.showbackend.state.pending.requests=List of pending requests

admin.command.transfer.params=<backend name> <controller jmx address>
admin.command.transfer.description=Transfer a backend from a controller to an other controller
admin.command.transfer.echo=Transferring backend {0} to controller {1}
admin.command.transfer.error=Backend transfer failed ({0})

admin.command.transfer.dump.params=<dump name> <controller name> [nocopy]
admin.command.transfer.dump.description=Make a dump available for restore on another controller.\n\
   Optional 'nocopy' (default: false) flag specifies not to copy the dump.
admin.command.transfer.dump.echo=Transferring dump {0} to controller {1}...
admin.command.transfer.dump.done=Done

admin.command.update.dump.path.description=Update the path of the dump
admin.command.update.dump.path.parameters=<dump name> <new path>
admin.command.update.dump.path.echo=Updating dump {0} path to {1}...
admin.command.update.dump.path.done=Done.

admin.command.view.backupers.description=Show the backupers available for backup
admin.command.view.backupers.nobackuper=No backuper...
admin.command.view.backupers.prop.name=Backuper
admin.command.view.backupers.prop.dump.format=Dump Format
 
admin.command.view.checkpoints.description=Show all checkpoints available in the recovery log
admin.command.view.checkpoints.echo=Checkpoints...

admin.command.view.dumps.description=Show all dumps available for database recovery
admin.command.view.dumps.nodump=No dumps...
admin.command.view.dumps.prop.name=Name
admin.command.view.dumps.prop.path=Path
admin.command.view.dumps.prop.format=Format
admin.command.view.dumps.prop.checkpoint=Checkpoint
admin.command.view.dumps.prop.backend=Backend
admin.command.view.dumps.prop.date=Date
admin.command.view.dumps.prop.tables=Tables

admin.command.set.checkpoint.params=<backend name> <checkpoint name>
admin.command.set.checkpoint.description=Force the last know checkpoint of a disabled backend
admin.command.set.checkpoint.echo=Forcing last know checkpoint of backend {0} to {1}

admin.login.dbname=Virtual Database Name
admin.login.user=Virtual database Administrator Login
admin.login.password=Virtual database Administrator Password
admin.login.ready=Ready to administrate virtual database {0}

admin.backup.user=Backend login for backup process
admin.backup.password=Backend password for backup process
admin.restore.user=Backend login for restore process
admin.restore.password=Backend password for restore process

sql.login.cannot.load.driver=Unable to load C-JDBC driver
sql.login.loaded.driver=C-JDBC driver (v. {0}) successfully loaded.
sql.login.connection.failed=Unable to connect to database {0} ({1})
sql.login.exception=Got an exception ({0})
sql.login.prompt.url=C-JDBC URL
sql.login.prompt.user=Login
sql.login.prompt.password=Password

sql.display.exception=Got an exception ({0})
sql.display.next.rows=Press enter to display next {0} rows (current line {1})
sql.display.query.time=Query executed in {0} s {1} ms .
sql.display.affected.rows=Affected rows: {0}
sql.display.transaction.started=Transaction started



sql.command.sqlquery.error=An error occured while executing SQL query ({0})
sql.command.load.file.error=An error occured while opening file ({0})
sql.command.loading.file=Loading from {0}
sql.command.load.execute.error=Error while executing the trace file ({0})
sql.command.begin=Start a transaction
sql.command.commit=Commit a transaction

sql.command.fetchsize.params=<x>
sql.command.fetchsize.description=Set the ResultSet fetch size to x rows per block
sql.command.fetchsize.value=New fetchsize value is {0}

sql.command.load.params=<file name>
sql.command.load.description=Execute all SQL statements contained in file

sql.command.maxrows.params=<x>
sql.command.maxrows.description=Limits the maximum number of rows to get from the database to x
sql.command.maxrows.value=New maxrows value is {0}

sql.command.rollback.params=[<savepoint name>]
sql.command.rollback.description=Rollback a transaction (to an optional savepoint)
sql.command.rollback.no.savepoint=No savepoint has been found for name {0}
sql.command.rollback.done=Transaction rolled back
sql.command.rollback.to.savepoint=Transaction rolled back to savepoint {0}

sql.command.isolation.params=<x>
sql.command.isolation.description=Set the connection transaction isolation level to x\n\
\t0 - TRANSACTION_NONE\n\
\t1 - TRANSACTION_READ_UNCOMMITTED\n\
\t2 - TRANSACTION_READ_COMMITTED\n\
\t4 - TRANSACTION_REPEATABLE_READ\n\
\t8 - TRANSACTION_SERIALIZABLE
sql.command.isolation.value=Setting transaction isolation level to {0}
sql.command.isolation.failed=Failed to set transaction isolation level

sql.command.savepoint.params=<savepoint name>
sql.command.savepoint.description=Create a savepoint for the current transaction
sql.command.savepoint.saved=savepoint {0} saved

sql.command.show.tables.description=Display all the tables of this virtual database
sql.command.show.tables.no.tables=No tables...

sql.command.timeout.params=<x>
sql.command.timeout.description=Set the query timeout to x seconds (default is 60 seconds)
sql.command.timeout.value=New timeout value is {0} seconds

sql.command.call.stored.procedure.params=proc_name(?,?,...)}
sql.command.call.stored.procedure.description=Call a stored procedure
sql.command.call.stored.procedure.failed=An error occured while executing SQL procedure ({0})

sql.command.description=Any other input will be interpreted directly as an SQL statement\n

monitor.command.scheduler=Show the status of the scheduler.
monitor.command.stats=Display sql statistics.
monitor.command.cache=Display cache content.
monitor.command.controller=Display information on the controller load.
monitor.command.backends=Display information on the backends.
monitor.command.databases=Display information on databases.
monitor.command.cachestats=Display cache statistics information.
monitor.command.recovery=Display Recovery Log Content
monitor.command.settarget=Change the target database for this monitor. An empty target monitors the controller.

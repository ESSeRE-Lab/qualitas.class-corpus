<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctuntransform13966">
<title>Internal language transformations</title>
<prolog><metadata>
<keywords>
<indexterm>Language transformations for performance</indexterm>
<indexterm>Base table<indexterm>definition</indexterm></indexterm>
<indexterm>Derived tables<indexterm>definition</indexterm></indexterm>
<indexterm>Equality predicate<indexterm>definition</indexterm></indexterm>
<indexterm>Equijoin predicate<indexterm>definition</indexterm></indexterm>
<indexterm>Optimizable<indexterm>definition</indexterm></indexterm>
<indexterm>Predicates<indexterm>definition</indexterm></indexterm>
<indexterm>Sargable<indexterm>definition</indexterm></indexterm>
<indexterm>Simple column reference<indexterm>definition</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<p>The <ph conref="../conrefs.dita#prod/productshortname"></ph> SQL parser sometimes transforms SQL statements
internally for performance reasons. This appendix describes those transformations.
Understanding the internal language transformations can help you analyze and
tune performance. Understanding the internal language transformations is not
necessary for the general user.</p>
<p>This chapter uses some specialized terms. Here are some
definitions:</p>
<dl id="i827520">
<dlentry><dt id="rtuntransform41494">base table</dt>
<dd>A real table in a FROM list. In queries that involve "virtual"
tables such as views and derived tables, base tables are the underlying tables
to which virtual tables correspond.</dd></dlentry>
<dlentry><dt>derived table</dt>
<dd>A virtual table, such as a subquery given a correlation name or a view.
For example:<i> SELECT derivedtable.c1 FROM (VALUES ('a','b'))
AS derivedtable(c1,c2)</i>.</dd></dlentry>
<dlentry><dt id="rtuntransform24389">equality predicate</dt>
<dd>A <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform25022">predicate</xref> in which one value is
compared to another value using the = operator.</dd></dlentry>
<dlentry><dt id="rtuntransform36163">equijoin predicate</dt>
<dd>A predicate in which one column is compared to a column in another table
using the = operator.</dd></dlentry>
<dlentry><dt id="rtuntransform19435">optimizable</dt>
<dd>A predicate is <i>optimizable</i> if it provides a
starting or stopping point and allows use of an index. Optimizable predicates
use only <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform13785">simple column reference</xref>s and =, &lt;, &gt;, +, &gt;=,
and IS NULL operators. For complete details, see <xref href="ctunoptimz39106.dita#ctunoptimz39106"/>. A synonym for <i>optimizable</i> is  <i>indexable</i>.</dd></dlentry>
<dlentry><dt id="rtuntransform25022">predicate</dt>
<dd>A WHERE clause contains boolean expressions that can be linked together
by AND or OR clauses. Each part is called a <i>predicate</i>.
For example: <i>WHERE c1 =2 AND c2 = 5</i> contains two predicates.</dd></dlentry>
<dlentry><dt id="rtuntransform26698">sargable</dt>
<dd><i>Sargable</i> predicates are a superset of optimizable
predicates; not all sargable predicates are optimizable, because sargable
predicates also include the &lt;&gt; operator. (<i>Sarg</i> stands
for "search argument.") Predicates that are sargable but not optimizable
nevertheless improve performance and allow the optimizer to use more accurate
costing information.   
<p>In addition, sargable predicates can be <i>pushed down </i>(see <xref href="ctuntransform36623.dita#ctuntransform36623"/>).</p></dd></dlentry>
<dlentry><dt id="rtuntransform13785">simple column reference</dt>
<dd>A reference to a column that is not part of an expression. For example, <i>c1</i> is a simple column reference, but <i>c1+1,</i> <i>max(c1)</i>, and <i>lower(c1)</i> are not.</dd></dlentry>
</dl>
</conbody></concept>

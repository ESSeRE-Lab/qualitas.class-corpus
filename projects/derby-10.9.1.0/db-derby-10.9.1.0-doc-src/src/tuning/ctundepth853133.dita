<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<concept id="ctundepth853133" xml:lang="en-us">
<title>Statement execution plan</title>
<prolog><metadata>
<keywords><indexterm>Statement execution plan</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>RUNTIMESTATISTICS also provides information about the <i>statement execution
plan</i>. The statement execution plan shows how long each node took to evaluate,
how many rows were retrieved, whether an index was used, and so on. If an
index was used, it shows the start and stop positions for the matching index
scan. Looking at the plan can help you determine whether to add an index or
to rewrite the query.</p>
<p>A statement execution plan is composed of a tree of result set nodes. A
result set node represents the evaluation of one portion of the statement;
it returns rows to a calling (or parent) node and can receive rows from a
child node. A node can have one or more children. Starting from the top, if
a node has children, it requests rows from the children. Usually only the
execution plans of DML statements (queries, inserts, updates, and deletes,
not dictionary object creation) are composed of more than one node.</p>
<p>For example, consider the following query:   <codeblock><b>SELECT * FROM Countries</b></codeblock></p>
<p>This simple query involves one node only-reading all the data out of the <i>Countries</i> table.
It involves a single node with no children. This result set node is called
a <i>Table Scan ResultSet</i>. RUNTIMESTATISTICS text for this node looks
something like this:   <codeblock>
Statement Name:
        null
Statement Text:
        select * from countries
Parse Time: 20
Bind Time: 10
Optimize Time: 50
Generate Time: 20
Compile Time: 100
Execute Time: 10
Begin Compilation Timestamp : 2005-05-25 09:16:21.24
End Compilation Timestamp : 2005-05-25 09:16:21.34
Begin Execution Timestamp : 2005-05-25 09:16:21.35
End Execution Timestamp : 2005-05-25 09:16:21.4
Statement Execution Plan Text:
Table Scan ResultSet for COUNTRIES at read committed isolation
level using instntaneous share row 
locking chosen by the optimizer
Number of opens = 1
Rows seen = 114
Rows filtered = 0
Fetch Size = 16
        constructor time (milliseconds) = 0
        open time (milliseconds) = 0
        next time (milliseconds) = 10
        close time (milliseconds) = 0
        next time in milliseconds/row = 0

scan information:
        Bit set of columns fetched=All
        Number of columns fetched=3
        Number of pages visited=3
        Number of rows qualified=114
        Number of rows visited=114
        Scan type=heap
        start position:
null    stop position:
null    qualifiers:
None
        optimizer estimated row count:          119.00
        optimizer estimated cost:           69.35
</codeblock></p>
<p>Consider this second, more complex query:   <codeblock><b><ph></ph>SELECT Country
FROM Countries
WHERE Region = 'Central America'</b></codeblock></p>
<p>When executed, this query involves two nodes- one to retrieve
qualifying rows (the restriction is done at this node) and one to project
the requested columns. So, at bottom, there is a <i>TableScanResultSet</i> for
scanning the table. The qualifier (Region = 'Central America') is evaluated
in this node. These data are passed up to the parent node, called a <i>Project-Restrict
ResultSet</i>, in which the rows are projected-only the <i>country</i> column
is needed (the first column in the table). RUNTIMESTATISTICS text for these
two nodes looks something like this:   <codeblock>Statement Name:
        null
Statement Text:
        SELECT Country FROM Countries WHERE Region = 'Central America'
Parse Time: 10
Bind Time: 0
Optimize Time: 370
Generate Time: 10
Compile Time: 390
Execute Time: 0
Begin Compilation Timestamp : 2005-05-25 09:20:41.274
End Compilation Timestamp : 2005-05-25 09:20:41.664
Begin Execution Timestamp : 2005-05-25 09:20:41.674
End Execution Timestamp : 2005-05-25 09:20:41.674
Statement Execution Plan Text:
Project-Restrict ResultSet (2):
Number of opens = 1
Rows seen = 6
Rows filtered = 0
restriction = false
projection = true
        constructor time (milliseconds) = 0
        open time (milliseconds) = 0
        next time (milliseconds) = 0
        close time (milliseconds) = 0
        restriction time (milliseconds) = 0
        projection time (milliseconds) = 0
        optimizer estimated row count:           11.90
        optimizer estimated cost:           69.35

Source result set:
        Table Scan ResultSet for COUNTRIES at read committed isolation level
using instantaneous share row locking chosen by the optimizer
        Number of opens = 1
        Rows seen = 6
        Rows filtered = 0
        Fetch Size = 16
                constructor time (milliseconds) = 0
                open time (milliseconds) = 10
                next time (milliseconds) = 0
                close time (milliseconds) = 0
                next time in milliseconds/row = 0

        scan information:
                Bit set of columns fetched={0, 2}
                Number of columns fetched=2
                Number of pages visited=3
                Number of rows qualified=6
                Number of rows visited=114
                Scan type=heap
                start position:
null            stop position:
null            qualifiers:
Column[0][0] Id: 2
Operator: =
Ordered nulls: false
Unknown return value: false
Negate comparison result: false

                optimizer estimated row count:           11.90
                optimizer estimated cost:           69.35
</codeblock></p>
<p>Other, more complex queries such as joins and unions have other types of
result set nodes.</p>
<p>For inserts, updates, and deletes, rows flow out of the top, where they
are inserted, updated, or deleted. For selects (queries), rows flow out of
the top into a result set that is returned to the user.</p>
<p>The <cite><ph conref="../conrefs.dita#pub/citref"></ph></cite> shows the
many possible <i>ResultSet</i> nodes that might appear in an execution plan. </p>
<p>In addition, read <xref href="ctunoptimz39739.dita#ctunoptimz39739"></xref>,
for more information about some of the ways in which <ph conref="../conrefs.dita#prod/productshortname"></ph> executes statements.</p>
</conbody>
</concept>


<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "../dtd/reference.dtd">
<reference xml:lang="en-us" id="rtuntransform345">
<title>Character string beginning with constant</title>
<prolog>
</prolog>
<refbody>
<section><p>A LIKE predicate in which a column is compared to a character string that <i>begins</i> with a character constant (not a wildcard) is transformed
into three predicates: one predicate that uses the LIKE operator, one that
uses the &gt;= operator, and one that uses the &lt; operator. For example:
  
<codeblock><b>country LIKE 'Ch%i%'</b></codeblock></p></section>
<section><p>becomes   
<codeblock><b>country LIKE 'Ch%i%'
AND country &gt;= 'Ch'
AND country &lt; 'Ci'</b></codeblock></p></section>
<section><p>The first (LIKE) predicate is not optimizable, but the new predicates added
by the transformation are.</p></section>
<section><p>When the character string begins with one more character constants and
ends with a single "%", the first LIKE clause is eliminated. For example:
 
<codeblock><b>country LIKE 'Ch%'</b></codeblock></p></section>
<section><p>becomes  
<codeblock><b>country &gt;= 'Ch'
AND country &lt; 'Ci'</b></codeblock></p></section>
</refbody></reference>

<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="ctunperf98197" xml:lang="en-us">
<title>Use the appropriate getXXX and setXXX methods for the type</title>
<shortdesc>For performance reasons, use the recommended <i>getXXX</i> method
when retrieving values, and use the recommended <i>setXXX</i> method when
setting values for parameters.</shortdesc>
<prolog><metadata>
<keywords><indexterm>methods<indexterm>getxxx</indexterm></indexterm><indexterm>methods<indexterm>setxxx</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>JDBC is permissive. It lets you use <i>java.sql.ResultSet.getFloat</i> to
retrieve an int, <i>java.sql.ResultSet.getObject</i> to retrieve any type,
and so on.  (<i>java.sql.ResultSet </i>and <i>java.sql.CallableStatement</i> provide <i>getXXX</i> methods,
and <i>java .sql.PreparedStatement</i> and <i>java.sql.CallableStatement</i> provide <i>setXXX</i> methods.)
This permissiveness is convenient but expensive in terms of performance.</p>
<p>The following table shows the recommended <i>getXXX</i> methods for given <i>java.sql</i> (JDBC)
types, and their corresponding SQL types.</p>
<table frame="all">
<title>Mapping of <i>java.sql.Types</i> to SQL types</title>
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="1" colnum="1" colwidth="36*"/>
<colspec colname="2" colnum="2" colwidth="30*"/>
<colspec colname="3" colnum="3" colwidth="34*"/>
<thead>
<row valign="bottom">
<entry colname="1">Recommended <i>getXXX</i> Method</entry>
<entry colname="2"><i>java.sql.Types</i></entry>
<entry colname="3">SQL Types</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="1"><i>getLong</i></entry>
<entry colname="2">BIGINT</entry>
<entry colname="3">BIGINT</entry>
</row>
<row>
<entry colname="1"><i>getBytes</i></entry>
<entry colname="2">BINARY</entry>
<entry colname="3">CHAR FOR BIT DATA</entry>
</row>
<row>
<entry colname="1"><i>getBlob</i></entry>
<entry colname="2">BLOB</entry>
<entry colname="3">BLOB</entry>
</row>
<row>
<entry colname="1"><i>getString</i></entry>
<entry colname="2">CHAR</entry>
<entry colname="3">CHAR</entry>
</row>
<row>
<entry colname="1"><i>getClob</i></entry>
<entry colname="2">CLOB</entry>
<entry colname="3">CLOB</entry>
</row>
<row>
<entry colname="1"><i>getDate</i></entry>
<entry colname="2">DATE</entry>
<entry colname="3">DATE</entry>
</row>
<row>
<entry colname="1"><i>getBigDecimal</i></entry>
<entry colname="2">DECIMAL</entry>
<entry colname="3">DECIMAL</entry>
</row>
<row>
<entry colname="1"><i>getDouble</i></entry>
<entry colname="2">DOUBLE</entry>
<entry colname="3">DOUBLE PRECISION</entry>
</row>
<row>
<entry colname="1"><i>getDouble</i></entry>
<entry colname="2">FLOAT</entry>
<entry colname="3">DOUBLE PRECISION</entry>
</row>
<row>
<entry colname="1"><i>getInt</i></entry>
<entry colname="2">INTEGER</entry>
<entry colname="3">INTEGER</entry>
</row>
<row>
<entry colname="1"><i>getBinaryStream</i></entry>
<entry colname="2">LONGVARBINARY</entry>
<entry colname="3">LONG VARCHAR FOR BIT DATA</entry>
</row>
<row>
<entry colname="1"><i>getAsciiStream</i>, <i>getUnicodeStream</i></entry>
<entry colname="2">LONGVARCHAR</entry>
<entry colname="3">LONG VARCHAR</entry>
</row>
<row>
<entry colname="1"><i>getBigDecimal</i></entry>
<entry colname="2">NUMERIC</entry>
<entry colname="3">DECIMAL</entry>
</row>
<row>
<entry colname="1"><i>getFloat</i></entry>
<entry colname="2">REAL</entry>
<entry colname="3">REAL</entry>
</row>
<row>
<entry colname="1"><i>getShort</i></entry>
<entry colname="2">SMALLINT</entry>
<entry colname="3">SMALLINT</entry>
</row>
<row>
<entry colname="1"><i>getTime</i></entry>
<entry colname="2">TIME</entry>
<entry colname="3">TIME</entry>
</row>
<row>
<entry colname="1"><i>getTimestamp</i></entry>
<entry colname="2">TIMESTAMP</entry>
<entry colname="3">TIMESTAMP</entry>
</row>
<row>
<entry colname="1"><i>getBytes</i></entry>
<entry colname="2">VARBINARY</entry>
<entry colname="3">VARCHAR FOR BIT DATA</entry>
</row>
<row>
<entry colname="1"><i>getString</i></entry>
<entry colname="2">VARCHAR</entry>
<entry colname="3">VARCHAR</entry>
</row>
<row>
<entry colname="1">None supported. You must use XMLSERIALIZE and then the
corresponding <i>getXXX</i> method.</entry>
<entry colname="2">SQLXML</entry>
<entry colname="3">XML</entry>
</row>
</tbody>
</tgroup>
</table>
</conbody>
</concept>

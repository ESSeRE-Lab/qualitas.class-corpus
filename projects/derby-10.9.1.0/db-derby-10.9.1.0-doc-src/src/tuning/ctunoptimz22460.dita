<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctunoptimz22460">
<title>Non-cost-based sort avoidance (tuple filtering)</title>
<prolog>
</prolog>
<conbody>
<p>In most cases, <ph conref="../conrefs.dita#prod/productshortname"></ph> needs to perform two separate steps for statements
that use DISTINCT or GROUP BY: first sorting the selected columns, then either
discarding duplicate rows or aggregating grouped rows. Sometimes it is able
to avoid sorting for these statements with tuple filtering. <i>Tuple filtering</i> means that the rows are <i>already</i> in
a useful order. For DISTINCT, <ph conref="../conrefs.dita#prod/productshortname"></ph> can simply filter out duplicate
values when they are found and return results to the user sooner. For GROUP
BY, <ph conref="../conrefs.dita#prod/productshortname"></ph> can aggregate a group of rows until a new set of rows is detected
and return results to the user sooner.</p>
<p>These are non-cost-based optimizations; the optimizer does not yet consider
the cost of these optimizations.</p>
<p>The examples in this section refer to the following tables:  
<codeblock><b>CREATE TABLE t1(c1 INT, c2 INT, c3 INT, c4 INT)
CREATE INDEX i1 ON t1(c1)
CREATE INDEX i1_2_3_4 ON t1(c1, c2, c3, c4)</b></codeblock></p>
</conbody></concept>

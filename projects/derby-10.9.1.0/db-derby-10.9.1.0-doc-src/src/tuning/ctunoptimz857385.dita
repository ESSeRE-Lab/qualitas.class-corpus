<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctunoptimz857385">
<title>Join order overview</title>
<prolog>
</prolog>
<conbody>
<p><indexterm>Join order<indexterm>performance implications
of</indexterm></indexterm><indexterm>Join order<indexterm>rules
of thumb</indexterm></indexterm>The <ph conref="../conrefs.dita#prod/productshortname"></ph> optimizer usually makes a good
choice about join order. This section discusses the performance implications
of join order.</p>
<p>In a join operation involving two tables, <ph conref="../conrefs.dita#prod/productshortname"></ph> scans the tables
in a particular order. <ph conref="../conrefs.dita#prod/productshortname"></ph> accesses rows in one table first, and this
table is now called the <i>outer table</i>.</p>
<p>Then, for each qualifying row in the outer table, <ph conref="../conrefs.dita#prod/productshortname"></ph> looks for
matching rows in the second table, which is called the <i>inner table</i>.</p>
<p><ph conref="../conrefs.dita#prod/productshortname"></ph> accesses the outer table once, and the inner table probably
many times (depending on how many rows in the outer table qualify).</p>
<p>This leads to a few general rules of thumb about join order:  
<ul>
<li>If the join has no restrictions in the WHERE clause that would limit the
number of rows returned from one of the tables to just a few, the following
rules apply:  
<ul compact="yes">
<li>If <i>only one</i> table has an index on the joined column
or columns, it is much better for that table to be the inner table. This is
because for each of the many inner table lookups, <ph conref="../conrefs.dita#prod/productshortname"></ph> can use an index
instead of scanning the entire table.</li>
<li>Since indexes on inner tables are accessed many times, if the index on
one table is smaller than the index on another, the table with the smaller
one should probably be the inner table. That is because smaller indexes (or
tables) can be cached (kept in <ph conref="../conrefs.dita#prod/productshortname"></ph>'s memory, allowing <ph conref="../conrefs.dita#prod/productshortname"></ph> to
avoid expensive I/O for each iteration).</li>
</ul></li>
<li>On the other hand, if a query has restrictions in the WHERE clause for
one table that would cause it to return only a few rows from that table (for
example, WHERE flight_id = 'AA1111'), it is better for the restricted table
to be the outer table. <ph conref="../conrefs.dita#prod/productshortname"></ph> will have to go to the inner table only
a few times anyway.  
<p id="ctunoptimz29721">Consider:  
<codeblock><b>SELECT *
FROM huge_table, small_table
WHERE huge_table.unique_column = 1
AND huge_table.other_column = small_table.non_unique_column</b></codeblock></p></li>
<li>In this case, the qualification <i>huge_table.unique_column
= 1</i> (assuming a unique index on the column) qualifies only one row, so
it is better for <i>huge_table</i> to be the outer table
in the join.</li>
</ul></p>
</conbody></concept>

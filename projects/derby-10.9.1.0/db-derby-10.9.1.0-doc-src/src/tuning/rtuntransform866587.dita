<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "../dtd/reference.dtd">
<reference xml:lang="en-us" id="rtuntransform866587">
<title>Transitive Closure on Search Clauses</title>
<prolog>
</prolog>
<refbody>
<section><p><ph conref="../conrefs.dita#prod/productshortname"></ph> applies transitive closure on search clauses after transitive
closure on join clauses. For each <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform26698">sargable</xref> predicate
where a <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform13785">simple column reference</xref> is compared with a constant
(or the IS NULL and IS NOT NULL operators), <ph conref="../conrefs.dita#prod/productshortname"></ph> looks for an <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform36163">equijoin predicate</xref> between the simple column reference
and a simple column reference from another table in the same query block.
For each such <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform36163">equijoin predicate</xref>, <ph conref="../conrefs.dita#prod/productshortname"></ph> then
searches for a similar comparison (the same operator) between the column from
the other table and the same constant. <ph conref="../conrefs.dita#prod/productshortname"></ph> adds a new predicate if
no such predicate is found.</p></section>
<section><p><ph conref="../conrefs.dita#prod/productshortname"></ph> performs all other possible transformations on the predicates
(described in <xref href="ctuntransform35783.dita#ctuntransform35783"/>) before applying
transitive closure on search clauses.</p></section>
<section><p>For example, given the following statement:  
<codeblock><b>SELECT * FROM Flights, FlightAvailability
WHERE Flights.flight_id = FlightAvailability.flight_id
AND Flights.flight_id between 'AA1100' and 'AA1250'
AND Flights.flight_id &lt;&gt; 'AA1219'
AND FlightAvailability.flight_id &lt;&gt; 'AA1271' </b></codeblock></p></section>
<section><p><ph conref="../conrefs.dita#prod/productshortname"></ph> first performs any other transformations:  
<ul>
<li>the BETWEEN transformation on the second predicate:  
<codeblock><b>AND Flights.flight_id &gt;= 'AA1100' 
AND Flights.flight_id &lt;=  'AA1250'</b></codeblock></li>
</ul></p></section>
<section><p><ph conref="../conrefs.dita#prod/productshortname"></ph> then performs the transitive closure:  
<codeblock><b>SELECT * FROM Flights, FlightAvailability
WHERE Flights.flight_id = FlightAvailability.flight_id
AND Flights.flight_id &gt;= 'AA1100' 
AND Flights.flight_id &lt;=  'AA1250'
AND Flights.flight_id &lt;&gt; 'AA1219'
AND Flights.flight_id &lt;&gt; 'AA1271'
AND FlightAvailability.flight_id &gt;= 'AA1100' 
AND FlightAvailability.flight_id &lt;=  'AA1250'
AND FlightAvailability.flight_id &lt;&gt; 'AA1271'
AND FlightAvailability.flight_id &lt;&gt; 'AA1219'</b></codeblock></p></section>
<section><p>When a sargable predicate uses the = operator, <ph conref="../conrefs.dita#prod/productshortname"></ph> can remove all <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform36163">equijoin predicate</xref>s comparing that column reference to
another simple column reference from the same query block as part of applying
transitive closure, because the <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform36163">equijoin predicate</xref> is
now redundant, whether or not a new predicate was added. For example:   
<codeblock><b>SELECT * FROM Flights, Flightavailability
WHERE Flights.flight_id = Flightavailability.flight_id
AND Flightavailability.flight_id = 'AA1122'</b></codeblock></p></section>
<section><p>becomes (and is equivalent to)  
<codeblock><b>SELECT * FROM Flights, Flightavailability
WHERE Flights.flight_id = 'AA1122'
AND Flightavailability.flight_id = 'AA1122'</b></codeblock></p></section>
<section><p>The elimination of redundant predicates gives the optimizer more accurate
selectivity information and improves performance at execution time.</p></section>
</refbody></reference>

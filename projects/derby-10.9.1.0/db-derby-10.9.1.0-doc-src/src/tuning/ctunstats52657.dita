<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctunstats52657">
<title>Selectivity from hard-wired assumptions</title>
<prolog><metadata>
<keywords>
<indexterm>Selectivity<indexterm>hard-wired assumptions</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<p>In all other cases, <ph conref="../conrefs.dita#prod/productshortname"></ph> uses a fixed number that attempts to describe
the percentage of rows that will probably be returned; it might not correspond
to the actual selectivity of the operation in every case. It is an assumption
hard-wired into the <ph conref="../conrefs.dita#prod/productshortname"></ph>
system. These assumptions are shown in the following table.</p>
<table frame="all">
<title>Selectivity for various operations for index scans
when search values are unknown in advance and statistics are not used</title>
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="1" colnum="1" colwidth="83*"/>
<colspec colname="2" colnum="2" colwidth="17*"/>
<thead>
<row valign="bottom">
<entry colname="1">Operator</entry>
<entry colname="2">Selectivity</entry></row>
</thead>
<tbody>
<row>
<entry colname="1">=, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt; when data type of
parameter is a boolean</entry>
<entry colname="2">.5 (50%)</entry></row>
<row>
<entry colname="1">other operators (except for IS NULL and IS NOT NULL) when
data type of parameter is boolean</entry>
<entry colname="2">.5 (50%)</entry></row>
<row>
<entry colname="1">IS NULL</entry>
<entry colname="2">.1 (10%)</entry></row>
<row>
<entry colname="1">IS NOT NULL</entry>
<entry colname="2">.9 (90%)</entry></row>
<row>
<entry colname="1">=</entry>
<entry colname="2">.1 (10%)</entry></row>
<row>
<entry colname="1">&gt;, &gt;=, &lt;, &lt;=</entry>
<entry colname="2">.33 (3%)</entry></row>
<row>
<entry colname="1">&lt;&gt; compared to non-boolean type</entry>
<entry colname="2">.9 (90%)</entry></row>
<row>
<entry colname="1">LIKE transformed from LIKE predicate (see <xref href="rtuntransform208.dita#rtuntransform208"/>)</entry>
<entry colname="2">1.0 (100%)</entry></row>
<row>
<entry colname="1">&gt;= and &lt; when transformed internally from LIKE (see <xref href="rtuntransform208.dita#rtuntransform208"/>)</entry>
<entry colname="2">.25 (.5 X .5)</entry></row>
<row>
<entry colname="1">&gt;= and &lt;= operators when transformed internally from
BETWEEN (see <xref href="rtuntransform139.dita#rtuntransform139"/>)</entry>
<entry colname="2">.25 (.5 X .5)</entry></row>
</tbody>
</tgroup>
</table>
</conbody></concept>

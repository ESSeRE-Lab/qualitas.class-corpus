<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctunoptimz11941">
<title>About the optimizer's choice of join strategy</title>
<prolog><metadata>
<keywords>
<indexterm>Join strategies<indexterm>how optimizer chooses</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<p>The optimizer compares the cost of choosing a hash join (if a hash join
is possible) to the cost of choosing a nested loop join and chooses the cheaper
strategy. For information about when hash joins are possible, see <xref href="ctunoptimz23173.dita#ctunoptimz23173"/>.</p>
<p>In some cases, the size of the hash table that <ph conref="../conrefs.dita#prod/productshortname"></ph> would have to
build is prohibitive and can cause the JVM to run out of memory. For this
reason, the optimizer has an upper limit on the size of a table on which it
will consider a hash join. It will not consider a hash join for a statement
if it estimates that the size of the hash table would exceed the system-wide
limit of memory use for a table, the optimizer chooses a nested loop join
instead. The optimizer's estimates of size of hash tables are approximate
only.  </p>
</conbody></concept>

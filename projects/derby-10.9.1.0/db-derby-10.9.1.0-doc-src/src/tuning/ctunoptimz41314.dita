<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctunoptimz41314">
<title>Useful indexes can use qualifiers</title>
<prolog><metadata>
<keywords>
<indexterm>Qualifiers<indexterm>in matching index scans</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<p>Matching index scans can use qualifiers that further restrict the result
set. Remember that a WHERE clause that contains at least one optimizable predicate
is optimizable. Nonoptimizable predicates can be useful in other ways.</p>
<p>Consider the following query:  
<codeblock><b>SELECT *
FROM FLIGHTS
WHERE orig_airport &lt; 'BBB'
AND orig_airport &lt;&gt; 'AKL'</b></codeblock></p>
<p>The second predicate is not optimizable, but the first predicate is. The
second predicate becomes a qualification for which <ph conref="../conrefs.dita#prod/productshortname"></ph> evaluates the
entries in the index as it traverses it.  
<ul>
<li>The following comparisons are valid qualifiers:  
<ul>
<li>=</li>
<li>&lt;</li>
<li>&lt;=</li>
<li>&gt;</li>
<li>&gt;=</li>
<li>IS NULL</li>
<li>BETWEEN</li>
<li>LIKE</li>
<li>&lt;&gt;</li>
<li>IS NOT NULL</li>
</ul></li>
<li>The qualifier's reference to the column does not have to be a simple
column reference; you can put the column in an expression.</li>
<li>The qualifier's column does not have to be the first column in the
index and does not have to be contiguous with the first column in the index.</li>
</ul></p>
</conbody></concept>

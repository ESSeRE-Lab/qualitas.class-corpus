<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "../dtd/reference.dtd">
<reference xml:lang="en-us" id="rtuntransform472">
<title>Unknown parameter</title>
<prolog>
</prolog>
<refbody>
<section><p>'The situation is similar to those described above when a column is compared
using the LIKE operator to a parameter whose value is unknown in advance (dynamic
parameter, join column, etc.).</p></section>
<section><p>In this situation, the LIKE predicate is likewise transformed into three
predicates: one LIKE predicate, one predicate using the &gt;= operator, and
one predicate using the &lt; operator. For example:  
<codeblock><b>country LIKE ?</b></codeblock></p></section>
<section><p>is transformed into  
<codeblock><b>country LIKE ?
AND country &gt;= <b><i>InternallyGeneratedParameter</i></b>
AND country &lt; <b><i>InternallyGeneratedParameter</i></b></b></codeblock></p></section>
<section><p>where the <i>InternallyGeneratedParameters</i> are calculated
at the beginning of execution based on the value of the parameter.   
<note>This transformation can lead to a bad plan if the user passes in
a string that begins with a wildcard or a nonselective string as the parameter.
Users can work around this possibility by writing the query like this (which
is not optimizable):  
<codeblock><b>(country || '') LIKE ?</b></codeblock></note></p></section>
</refbody></reference>

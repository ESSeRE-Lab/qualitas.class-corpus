<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctunoptimz23977">
<title>Performance and optimization</title>
<prolog><metadata>
<keywords>
<indexterm>Optimization</indexterm>
<indexterm>Query optimization</indexterm>
<indexterm>Indexes<indexterm>how they work</indexterm></indexterm>
<indexterm>Optimizer<indexterm>description</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<p>A DBMS often has a choice about the access path for retrieving data. For
example, the DBMS can use an index (fast lookup for specific entries) or scan
the entire table to retrieve the appropriate rows. In addition, in statements
in which two tables are joined, the DBMS can choose which table to examine
first (join order) and how to join the tables (join strategy). <i>Optimization</i> means that DBMS makes the best (optimal) choice of access
paths, join order, and join strategy. True query optimization means that the
DBMS will usually make a good choice regardless of how the query is written.
The optimizer does not necessarily make the <i>best</i> choice,
just a good one.</p>
<p><ph conref="../conrefs.dita#prod/productshortname"></ph> can use indexes to improve the performance of DML (data manipulation
language) statements such as queries, updates, and deletes. The query optimizer
can make decisions about whether to use an index for a particular table (access
path) and also makes decisions about join order, type of join, and a few other
matters.</p>
<p>This section gives an overview of the <ph conref="../conrefs.dita#prod/productshortname"></ph> optimizer and discusses
performance issues in the execution of DML statements.</p>
</conbody></concept>

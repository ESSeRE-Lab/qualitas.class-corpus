<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE task PUBLIC "-//IBM//DTD DITA Task//EN"
 "../../dtd/task.dtd">
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<task id="tadminconfig813694" xml:lang="pt-br">
<title>Utilização da API do NetworkServerControl</title>
<prolog>
<metadata>
<keywords>
<indexterm>Classe NetworkServerControl</indexterm>
<indexterm>API do NetworkServerControl<indexterm>e a classe NetworkServerControl</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<taskbody>
<context>
<p>É necessário criar uma instância da classe <i>NetworkServerControl</i>
quando se utiliza a API. Esta classe possui dois métodos construtores:</p>
<note>Antes de habilitar a conexão a partir de outros sistemas, deve haver
certeza de estar executando sob o gerenciador de segurança.</note>
</context>
<steps-unordered>
<step>
<cmd>NetworkServerControl()</cmd>
<stepresult>
<p>Este método construtor cria uma instância que escuta na porta padrão (1527),
ou na porta definida pela propriedade <codeph>derby.drda.portNumber</codeph>.
Também escuta no hospedeiro definido pela propriedade
<codeph>derby.drda.host</codeph>, ou no endereço de retorno (<i>loopback</i>)
se a propriedade não estiver definida.
Este é o construtor padrão; não permite conexão remota.
Equivale a chamar NetworkServerControl(InetAddress.getByName("localhost"),1527),
se nenhuma propriedade estiver definida.</p>
</stepresult>
</step>
<step>
<cmd>NetworkServerControl (InetAddress address, int portNumber)</cmd>
<stepresult>
<p>Este método construtor cria uma instância que escuta no número da porta
especificado e no endereço especificado.
<codeph>InetAddress</codeph> é passado para <codeph>ServerSocket</codeph>.
NULL é um valor de endereço inválido.
Os exemplos a seguir mostram como deve ser feito para permitir o
<i>Network Server</i> aceitar conexões de outros hospedeiros:
<codeblock>// Aceitar conexões de outros hospedeiro em um sistema IPv4
NetworkServerControl serverControl =
  new NetworkServerControl(InetAddress.getByName("0.0.0.0"),1527);</codeblock>
<codeblock>// Aceitar conexões de outros hospedeiro em um sistema IPv6
NetworkServerControl serverControl =
  new NetworkServerControl(InetAddress.getByName("::"),1527);</codeblock>
</p>
</stepresult>
</step>
</steps-unordered>
</taskbody>
</task>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../../dtd/reference.dtd">
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<reference id="rrefjdbc32052" xml:lang="pt-br">
<title>java.sql.Driver</title>
<prolog>
<metadata>
<keywords>
<indexterm>java.sql.Driver</indexterm>
<indexterm>Driver de JDBC<indexterm>carga</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>A classe que carrega o <i>driver</i> de JDBC local do
<ph conref="refconrefs.dita#prod/productshortname"></ph>
é a classe <i>org.apache.derby.jdbc.EmbeddedDriver</i>.
Abaixo estão listadas algumas maneiras de criar instâncias desta classe.
A classe não deve ser utilizada diretamente através da interface
<i>java.sql.Driver</i>.
Deve ser utilizada a classe <i>DriverManager</i> para criar as conexões.
<ul id="i1012571">
<li id="i1012580">
<i id="jdbc10841">Class.forName("org.apache.derby.jdbc.EmbeddedDriver")</i>
<p>Esta é a maneira recomendada, porque assegura que a classe é carregada
em todas as JVMs criando uma instância ao mesmo tempo.</p></li>
<li><i>new org.apache.derby.jdbc.EmbeddedDriver()</i>
<p>O mesmo que
<i><xref href="#rrefjdbc32052/jdbc10841">Class.forName("org.apache.derby.jdbc.EmbeddedDriver")</xref></i>,
exceto por requerer que a classe seja encontrada quando o código é compilado.</p></li>
<li><i>Class c = org.apache.derby.jdbc.EmbeddedDriver.class</i>
<p>Também é o mesmo que
<i><xref href="rrefjdbc32052.dita#rrefjdbc32052/jdbc10841">Class.forName("org.apache.derby.jdbc.EmbeddedDriver")</xref></i>,
exceto por requerer que a classe seja encontrada quando o código é compilado.
O campo pseudo-estático <i>class</i> resulta na classe nomeada.</p></li>
<li><i>Definição da propriedade do sistema jdbc.drivers
<ph><indexterm>Driver de JDBC<indexterm>carga</indexterm></indexterm></ph>
<ph><indexterm>Propriedade do sistema jdbc.drivers<indexterm>utilização para carregar o driver</indexterm></indexterm></ph>
</i>
<p>Para definir uma propriedade do sistema, deve ser alterada a linha de comando
da chamada, ou as propriedades do sistema no aplicativo.
Não é possível alterar as propriedades do sistema em uma <i>applet</i>.</p></li>
</ul>
</p>
</section>
<example>
<codeblock><b>java -Djdbc.drivers=org.apache.derby.jdbc.EmbeddedDriver
    classeAplicativo</b>
</codeblock>
</example>
<section>
<p>O <i>driver</i> real que fica registrado em <i>DriverManager</i> para tratar
o protocolo <i>jdbc:derby:</i> não é a classe
<i>org.apache.derby.jdbc.EmbeddedDriver</i>;
esta classe simplesmente detecta o tipo de <i>driver</i> do
<ph conref="refconrefs.dita#prod/productshortname"></ph>
necessário, e faz com que o <i>driver</i> apropriado do
<ph conref="refconrefs.dita#prod/productshortname"></ph>
seja carregado.</p>
</section>
<section>
<p>A única maneira suportada para conectar ao sistema
<ph conref="refconrefs.dita#prod/productshortname"></ph>
através do protocolo <i>jdbc:derby:</i> é utilizando <i>DriverManager</i>
para obter o <i>driver</i> (<i>java.sql.Driver</i>) ou a conexão
(<i>java.sql.Connection</i>), através das chamadas de método
<i>getDriver</i> e <i>getConnection</i>.</p>
</section>
</refbody>
</reference>

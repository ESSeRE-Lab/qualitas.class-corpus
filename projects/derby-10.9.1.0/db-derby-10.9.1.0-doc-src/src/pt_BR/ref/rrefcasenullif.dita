<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../../dtd/reference.dtd">
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<reference id="rrefcasenullif" xml:lang="pt-br">
<title>Expressões NULLIF e CASE</title>
<prolog>
<metadata>
<keywords>
<indexterm>Espressão NULLIF</indexterm>
<indexterm>Expressão CASE</indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>São utilizadas as expressões CASE e NULLIF para as expressões
condicionais no <ph conref="refconrefs.dita#prod/productshortname"></ph>.</p>
</section>
<section>
<p><b>Sintaxe da expressão NULLIF</b>
<codeblock>NULLIF(L,R)</codeblock>
A expressão NULLIF é muito semelhante à expressão CASE.
Por exemplo:
<codeblock>NULLIF(V1,V2)</codeblock> equivale à seguinte expressão CASE:
<codeblock>CASE WHEN V1=V2 THEN NULL ELSE V1 END</codeblock>
</p>
</section>
<section>
<p><b>Sintaxe da expressão CASE</b>
</p>
</section>
<section>
<p>A expressão CASE pode ser colocada em qualquer lugar onde é permitida uma
expressão.
Escolhe a expressão a ser avaliada baseado em um teste booleano.</p>
</section>
<example>
<codeblock>CASE WHEN ExpressãoBooleana THEN ExpressãoThen ELSE ExpressãoElse END</codeblock>
</example>
<section>
<p>A <i>ExpressãoThen</i> e a <i>ExpressãoElse</i> são expressões que devem
possuir tipos compatíveis.
Para os tipos nativos, isto significa que estes tipos devem ser o mesmo, ou
deve haver uma conversão nativa de alargamento entre os tipos.</p>
</section>
<section>
<p>Não é necessário utilizar a expressão CASE para evitar
<i>NullPointerExceptions</i> quando uma coluna que pode ter nulo se torna
receptora do método.
<codeblock>-- retorna 3
<b>VALUES CASE WHEN 1=1 THEN 3 ELSE 4 END;</b></codeblock>
Se o valor da instância especificada na chamada do método de instância for nulo,
o resultado da chamada será nulo (SQL NULL).
Entretanto, ainda é necessário utilizar a expressão CASE para uma coluna que
pode ter nulo, quando a coluna for o parâmetro de um método primitivo.
</p>
</section>
</refbody>
</reference>

<?xml version="1.0" encoding="utf-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../../dtd/reference.dtd">
<reference id="rrefjavsqlprst" xml:lang="pt-br">
<title>Instruções preparadas e colunas de fluxo</title>
<prolog>
<metadata>
<keywords>
<indexterm>Requisições setXXXStream</indexterm>
<indexterm>Colunas de fluxo<indexterm>como parâmetros IN em instruções preparadas</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>As requisições <i>setXXXStream</i> realizam um fluxo de dados entre o
aplicativo e o banco de dados.</p>
</section>
<section>
<p>O JDBC permite que o parâmetro IN seja definido como um fluxo de entrada do
Java para passagem de uma grande quantidade de dados em frações menores.
Quando a instrução é executada, o <i>driver</i> de JDBC faz chamadas repetidas
a este fluxo de entrada, lendo seu conteúdo e transmitindo este conteúdo como
dados do parâmetro.</p>
</section>
<section>
<p>
<indexterm>setBinaryStream</indexterm>
O <ph conref="refconrefs.dita#prod/productshortname"></ph>
suporta os três tipos de fluxo fornecidos pelo JDBC 1.2.
Estes três fluxos são:
<ul>
<li><i>setBinaryStream</i>
<indexterm>setBinaryStream</indexterm>
<p>para fluxos contendo bytes não interpretados</p>
</li>
<li><i><ph><indexterm>setAsciiStream</indexterm></ph>setAsciiStream</i>
<p>para fluxos contendo caracteres ASCII</p></li>
<li><i><ph><indexterm>setUnicodeStream</indexterm></ph>
<ph><indexterm>Unicode<indexterm>setUnicodeStream</indexterm></indexterm></ph>
setUnicodeStream</i>
<p>para fluxos contendo caracteres Unicode</p></li>
</ul>
</p>
</section>
<section>
<p>
<indexterm>Stream</indexterm>
O JDBC requer que seja especificado o comprimento do fluxo.
O objeto de fluxo passado para estes três métodos pode ser tanto um
objeto de fluxo Java padrão, quanto uma subclasse própria do usuário que
implementa a interface <i>java.io.InputStream</i> padrão.</p>
</section>
<section>
<p>De acordo com o padrão JDBC, os fluxos somente podem ser armazenados em
colunas dos tipos de dado mostrados na tabela
<xref href="rrefjavsqlprst.dita#rrefjavsqlprst/jdbc25312"></xref>.
Os fluxos não podem ser armazenados em colunas de outros tipos de dado nativos,
ou em tipos de dado definidos pelo usuário.
<table colsep="0" frame="none" id="jdbc25312" rowsep="0">
<title>Tipos de dado JDBC que permitem fluxo</title>
<tgroup cols="5" colsep="1" rowsep="1">
<colspec colname="1" colnum="1" colwidth="22*"/>
<colspec colname="colspec0" colnum="2" colwidth="22*"/>
<colspec colname="2" colnum="3" colwidth="15*"/>
<colspec colname="3" colnum="4" colwidth="18*"/>
<colspec colname="4" colnum="5" colwidth="20*"/>
<thead>
<row>
<entry colname="1">Valores da coluna</entry>
<entry colname="colspec0">Tipo correspondente</entry>
<entry colname="2">AsciiStream</entry>
<entry colname="3">UnicodeStream</entry>
<entry colname="4">BinaryStream</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="1">CLOB</entry>
<entry colname="colspec0">java.sql.Clob</entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">CHAR</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">VARCHAR</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">LONGVARCHAR</entry>
<entry colname="colspec0"></entry>
<entry colname="2">X</entry>
<entry colname="3">X</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">BINARY</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">x</entry>
</row>
<row>
<entry colname="1">BLOB</entry>
<entry colname="colspec0">java.sql.Blob</entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">x</entry>
</row>
<row>
<entry colname="1">VARBINARY</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">x</entry>
</row>
<row>
<entry colname="1">LONGVARBINARY</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">X</entry>
</row>
</tbody>
</tgroup>
</table>
</p>
</section>
<section>
<p>O X maiúsculo indica o tipo de dado de destino preferido para o tipo de
fluxo (Consulte <xref href="rrefjdbc20377.dita#rrefjdbc20377/jdbc31241"></xref>.)
<note>Se o fluxo for armazenado em uma coluna de um tipo que não seja
LONG VARCHAR ou LONG VARCHAR FOR BIT DATA, deverá ser possível que todo o
fluxo caiba na memória de uma só vez.
Os fluxos armazenados em colunas LONG VARCHAR e LONG VARCHAR FOR BIT DATA
não possuem esta limitação.</note></p>
</section>
<section>
<p>O exemplo a seguir mostra como o usuário pode armazenar
<i>java.io.File</i> em uma coluna LONG VARCHAR usando fluxo:
<codeblock expanse="column"><b>Statement s = conn.createStatement();
s.executeUpdate("CREATE TABLE minha_tabela (a INT, b LONG VARCHAR)");
conn.commit();
java.io.File arquivo = new java.io.File("derby.txt");
int comprArquivo = (int) arquivo.length();
<b>// primeiro, criar o fluxo de entrada</b>
java.io.InputStream fluxoEntrada = new java.io.FileInputStream(arquivo);
PreparedStatement ps = conn.prepareStatement(
    "INSERT INTO minha_tabela VALUES (?, ?)");
ps.setInt(1, 1);
<b>// definir o valor do parâmetro de entrada como sendo o fluxo de entrada</b>
ps.setAsciiStream(2, fluxoEntrada, comprArquivo);
ps.execute();
conn.commit();</b>
</codeblock>
</p>
</section>
</refbody>
</reference>

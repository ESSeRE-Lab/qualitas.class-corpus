<?xml version="1.0" encoding="utf-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../../dtd/reference.dtd">
<reference id="rrefjdbc75719" xml:lang="pt-br">
<title>CallableStatement e parâmetros INOUT</title>
<prolog>
<metadata>
<keywords>
<indexterm>java.sql.CallableStatement<indexterm>e parâmetros INOUT</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>Os parâmetros INOUT são mapeados em uma <i>matriz</i> do tipo do parâmetro
no Java (O método deve receber uma matriz como seu parâmetro).
Isto está em conformidade com as recomendações do padrão SQL.</p>
</section>
<section>
<p>Dado o seguinte exemplo:
<codeblock expanse="column"><b>CallableStatement call = conn.prepareCall(
    "{CALL dobreMeuInteiro(?)}");
<ph>// para os parâmetros INOUT, é boa prática registrar
// o parâmetro de saída antes de definir o valor de entrada</ph>
call.registerOutParameter(1, Types.INTEGER);
call.setInt(1,10);
call.execute();
int retval = call.getInt(1);</b>
</codeblock>
</p>
</section>
<section>
<p>O método <i>doubleIt</i> deve receber uma matriz unidimensional de
<codeph>inteiros</codeph>.
Abaixo está um código fonte de amostra para este método:
<codeblock expanse="column"><b>public static void dobreMeuInteiro(int[] i) {
    i[0] *=2;
    <ph>/* O <ph conref="refconrefs.dita#prod/productshortname"></ph>  retorna o primeiro elemento da matriz. */</ph>
}</b>
</codeblock>
<note>O valor retornado <i>não</i> é empacotado em uma matriz, mesmo que o
parâmetro para o método seja.</note>
<table frame="all">
<title>Correspondência de tipo do parâmetro INOUT</title>
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="1" colnum="1" colwidth="39*"/>
<colspec colname="2" colnum="2" colwidth="27*"/>
<colspec colname="3" colnum="3" colwidth="33*"/>
<thead>
<row>
<entry align="left" colname="1" valign="bottom">Tipo do JDBC</entry>
<entry align="left" colname="2" valign="bottom">Tipo da matriz para o parâmetro do método</entry>
<entry align="left" colname="3" valign="bottom">Valor e tipo retornado</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="1">BIGINT</entry>
<entry colname="2">long[]</entry>
<entry colname="3">long</entry>
</row>
<row>
<entry colname="1">BINARY</entry>
<entry colname="2">byte[][]</entry>
<entry colname="3">byte[]</entry>
</row>
<row>
<entry colname="1">BIT</entry>
<entry colname="2">boolean[]</entry>
<entry colname="3">boolean</entry>
</row>
<row>
<entry colname="1">DATE</entry>
<entry colname="2"><i>java.sql.Date[]</i></entry>
<entry colname="3"><i>java.sql.Date</i></entry>
</row>
<row>
<entry colname="1">DOUBLE</entry>
<entry colname="2">double[]</entry>
<entry colname="3">double</entry>
</row>
<row>
<entry colname="1">FLOAT</entry>
<entry colname="2">double[]</entry>
<entry colname="3">double</entry>
</row>
<row>
<entry colname="1">INTEGER</entry>
<entry colname="2">int[]</entry>
<entry colname="3">int</entry>
</row>
<row>
<entry colname="1">LONGVARBINARY</entry>
<entry colname="2">byte[][]</entry>
<entry colname="3">byte[]</entry>
</row>
<row>
<entry colname="1">REAL</entry>
<entry colname="2">float[]</entry>
<entry colname="3">float</entry>
</row>
<row>
<entry colname="1">SMALLINT</entry>
<entry colname="2">short[]</entry>
<entry colname="3">short</entry>
</row>
<row>
<entry colname="1">TIME</entry>
<entry colname="2"><i>java.sql.Time[]</i></entry>
<entry colname="3"><i>java.sql.Time</i></entry>
</row>
<row>
<entry colname="1">TIMESTAMP</entry>
<entry colname="2"><i>java.sql.Timestamp[]</i></entry>
<entry colname="3"><i>java.sql.Timestamp</i></entry>
</row>
<row>
<entry colname="1">VARBINARY</entry>
<entry colname="2">byte[][]</entry>
<entry colname="3">byte[]</entry>
</row>
<row>
<entry colname="1">OTHER</entry>
<entry colname="2"><i>seuTipo[]</i></entry>
<entry colname="3"><i>seuTipo</i></entry>
</row>
<row>
<entry colname="1">JAVA_OBJECT (válido apenas nos ambientes Java2/JDBC 2.0)</entry>
<entry colname="2"><i>seuTipo[]</i></entry>
<entry colname="3"><i>seuTipo</i></entry>
</row>
</tbody>
</tgroup>
</table>
</p>
</section>
<section>
<p>Deve ser registrado o tipo de dado de saída do parâmetro antes de executar
a chamada.
Para os parâmetros INOUT, é boa prática registrar o parâmetro de saída antes
de definir seu valor de entrada.</p>
</section>
</refbody>
</reference>

<?xml version="1.0" encoding="utf-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../../dtd/reference.dtd">
<reference id="rrefbuiltchar" xml:lang="pt-br">
<title>CHAR</title>
<prolog>
<metadata>
<keywords>
<indexterm>Função CHAR</indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
A função CHAR retorna a representação cadeia de caracteres de comprimento fixo
de:
<ul>
<li>uma cadeia de caracteres, se o primeiro argumento for algum tipo de
cadeia de caracteres.</li>
<li>um valor data/hora, se o primeiro argumento for DATE, TIME ou TIMESTAMP.</li>
<li>um número decimal, se o primeiro argumento for um número decimal.</li>
<li>um número de ponto flutuante de precisão dupla, se o primeiro argumento
for DOUBLE ou REAL.</li>
<li>um número inteiro, se o primeiro argumento for SMALLINT, INTEGER ou BIGINT.</li>
</ul>
O primeiro argumento deve ser de um tipo de dado nativo.
O resultado da função é uma cadeia de caracteres de comprimento fixo.
Se o primeiro argumento puder ser nulo, o resultado poderá ser nulo.
Se o primeiro argumento for nulo, o resultado será o valor nulo.
</section>
<section>
<title>Sintaxe caractere para caractere</title>
<codeblock><b>CHAR (<i>ExpressãoCaractere</i> [, <i>inteiro</i>] ) </b>
</codeblock> <dl>
<dlentry>
<dt>ExpressãoCaractere</dt>
<dd>Uma expressão que retorna um valor do tipo de dado CHAR, VARCHAR,
LONG VARCHAR ou CLOB.</dd>
</dlentry>
<dlentry>
<dt>inteiro</dt>
<dd>O atributo comprimento da cadeia de caracteres de comprimento fixo
resultante.
O valor deve estar entre 0 e 254.</dd>
</dlentry>
</dl>
<p>Se o comprimento da expressão caractere for menor que o atributo comprimento
do resultado, o resultado será preenchido com brancos até o comprimento do
resultado.
Se o comprimento da expressão caractere for maior que o atributo comprimento
do resultado, será realizado um truncamento.
Retorna uma advertência, a menos que os caracteres truncados sejam todos brancos
e a expressão caractere não seja uma cadeia longa (LONG VARCHAR ou CLOB).</p>
</section>
<section>
<title>Sintaxe inteiro para caractere</title>
<codeblock><b>CHAR (<i>ExpressãoInteira</i>)</b>
</codeblock>
<dl>
<dlentry>
<dt>ExpressãoInteira</dt>
<dd>Uma expressão que retorna um valor com tipo de dado inteiro (SMALLINT,
INTEGER ou BIGINT).</dd>
</dlentry>
</dl>
<p>O resultado é a representação cadeia de caracteres do argumento na forma
de uma constante inteira do SQL.
O resultado consiste de n caracteres, que são os dígitos significativos que
representam o valor do argumento, precedidos pelo sinal menos se o argumento
for negativo.
É alinhado à esquerda.</p>
<ul>
<li>Se o primeiro argumento for um SMALLINT: O comprimento do resultado
será igual a 6.
Se o número de caracteres do resultado for menor que 6, então o resultado
será preenchido à direita com brancos até o comprimento 6.</li>
<li>Se o primeiro argumento for um INTEGER: O comprimento do resultado
será igual 11.
Se o número de caracteres no resultado for menor que 11, então o resultado
será preenchido à direita com brancos até o comprimento 11.</li>
<li>Se o primeiro argumento for um BIGINT: O comprimento do resultado
será igual a 20.
Se o número de caracteres no resultado for menor que 20, então o resultado
será preenchido à direita com brancos até o comprimento 20.</li>
</ul>
</section>
<section>
<title>Sintaxe de data/hora para caractere</title>
<codeblock><b>CHAR (<i>ExpressãoDataHora</i>)</b>
</codeblock> <dl>
<dlentry>
<dt>ExpressãoDataHora</dt>
<dd>Uma expressão de um dos três seguintes tipos de dado:
<ul>
<li><b>DATE</b>: O resultado é a representação caractere da data.
O comprimento do resultado é 10.</li>
<li><b>TIME</b>: O resultado é a representação caractere da hora.
O comprimento do resultado é 8.</li>
<li><b>TIMESTAMP</b>: O resultado é a representação caractere do carimbo do
tempo. O comprimento do resultado é 26.</li>
</ul>
</dd>
</dlentry>
</dl>
</section>
<section>
<title>Decimal para caractere</title>
<codeblock><b>CHAR (<i>ExpressãoDecimal</i>)</b>
</codeblock>
<dl>
<dlentry>
<dt>ExpressãoDecimal</dt>
<dd>Uma expressão que retorna um valor com tipo de dado decimal.
Se for desejada uma precisão e escala diferente, poderá ser utilizado primeiro
a função escalar DECIMAL para fazer a alteração.</dd>
</dlentry>
</dl>
</section>
<section>
<title>Sintaxe ponto flutuante para caractere</title>
<codeblock><b>CHAR (<i>ExpressãoPontoFlutuante</i>)</b>
</codeblock>
<dl>
<dlentry>
<dt>ExpressãoPontoFlutuante</dt>
<dd>Uma expressão que retorna um valor como tipo de dado de ponto flutuante
(DOUBLE ou REAL).</dd>
</dlentry>
</dl>
</section>
<example>
<p>Utilizar a função CHAR para retornar os valores para NÍVEL_EDUC (definido
como SMALLINT) como uma cadeia de caracteres de comprimento fixo:
<codeblock><b>SELECT CHAR</b>(NÍVEL_EDUC) <b>FROM</b> EMPREGADOS</codeblock>
Um NÍVEL_EDUC igual a 18 retorna como o valor CHAR(6) igual a
'18&nbsp;&nbsp;&nbsp;&nbsp;' (18 seguido por quatro brancos).</p>
</example>
</refbody>
</reference>

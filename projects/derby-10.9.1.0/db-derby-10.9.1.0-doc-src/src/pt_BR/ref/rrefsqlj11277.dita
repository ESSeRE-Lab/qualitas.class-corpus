<?xml version="1.0" encoding="utf-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../../dtd/reference.dtd">
<reference id="rrefsqlj11277" xml:lang="pt-br">
<title>VALUES Expressão</title>
<prolog>
<metadata>
<keywords>
<indexterm>VALUES expressão</indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>"VALUES Expressão" permite construir uma linha ou uma tabela a partir de
valores.
A instrução VALUES é utilizada quando não existe uma cláusula FROM.
Esta construção pode ser utilizada em todos os locais onde uma consulta pode
ser utilizada e, portanto, pode ser utilizada como uma instrução que retorna
um <i>ResultSet</i>, dentro de expressões e instruções sempre que uma
subconsulta for permitida, e como fonte de valores para a instrução INSERT.</p>
</section>
<refsyn>
<title>Sintaxe</title>
<codeblock><b>{
    VALUES ( <i><xref href="rrefsqlj87167.dita#rrefsqlj87167">Valor</xref></i> {, <i><xref
href="rrefsqlj87167.dita#rrefsqlj87167">Valor</xref></i> }* )
        [ , ( <i><xref href="rrefsqlj87167.dita#rrefsqlj87167">Valor</xref></i> {, <i><xref
href="rrefsqlj87167.dita#rrefsqlj87167">Valor</xref></i> }* ) ]* |
    VALUES <i><xref href="rrefsqlj87167.dita#rrefsqlj87167">Valor</xref></i> [ , <i><xref
href="rrefsqlj87167.dita#rrefsqlj87167">Valor</xref></i> ]* |
 }</b>
</codeblock>
<p>A primeira forma constrói linhas com várias colunas.
A segunda forma constrói linhas com uma única coluna, com cada expressão sendo
o valor da coluna da linha.</p>
<p>A palavra chave DEFAULT é permitida somente quando a expressão VALUES está
em uma instrução INSERT.
A especificação de DEFAULT para a coluna insere o valor padrão da coluna na
coluna.
Outra forma de inserir o valor padrão na coluna é omitir a coluna na lista
de colunas, e somente inserir valores nas outras colunas da tabela.</p>
</refsyn>
<example> <codeblock><b><ph>-- 3 linhas de 1 coluna</ph>
VALUES (1),(2),(3);

<ph>-- 3 linhas de 1 coluna</ph>
VALUES 1, 2, 3;

<ph>-- 1 linha de 3 colunas</ph>
VALUES (1, 2, 3);

<ph>-- 3 linhas de 2 colunas</ph>
VALUES (1,21),(2,22),(3,23);

<ph>-- construção de uma tabela derivada</ph>
VALUES ('laranja', 'laranja'), ('maçã', 'vermelha'),
('banana', 'amarela')

<ph>-- Inserir dois novos departamentos na tabela DEPARTAMENTOS
-- utilizando uma instrução, mas não atribuir gerente
-- aos novos departamentos.</ph>
INSERT INTO DEPARTAMENTOS (NUM_DEP, NOME_DEP, ADMRDEPT)
  VALUES ('B11', 'COMPRAS', 'B01'),
    ('E41', 'ADMINISTRAÇÃO DE BANCO DE DADOS', 'E01')

<ph>-- inserir uma linha com valor DEFAULT para a coluna PROJ_PRINC</ph>
INSERT INTO PROJETO (NUM_PROJ, NOME_PROJ, NUM_DEP, EMP_RESP,
    PROJ_DATA_INÍCIO, PROJ_PRINC)
VALUES ('PL2101', 'ENSURE COMPAT PLAN', 'B01', '000020',
    CURRENT_DATE, DEFAULT);

<ph>-- utilização de função nativa</ph>
VALUES CURRENT_DATE

<ph>-- obter o valor a partir de uma expressão arbitrária</ph>
VALUES (3*29, 26.0E0/3)

<ph>-- obter o valor retornado por uma função nativa</ph>
VALUES CHAR(1)
</b>
</codeblock>
</example>
</refbody>
</reference>

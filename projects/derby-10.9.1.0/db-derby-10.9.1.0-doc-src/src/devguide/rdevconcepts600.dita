<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rdevconcepts600" xml:lang="en-us">
<title>Example of threads sharing a statement</title>
<shortdesc>This example shows what can happen if two threads try to share
a single<i> Statement</i>.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Statements shared by threads<indexterm>dangers of</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<example> <codeblock>PreparedStatement ps = conn.prepareStatement(
    "UPDATE account SET balance =  balance + ? WHERE id = ?");
<b>/* now assume two threads T1,T2 are given this
java.sql.PreparedStatement object </b>and that the following events
happen in the order shown (pseudojava code)*/
T1 - ps.setBigDecimal(1, 100.00);
T1 - ps.setLong(2, 1234);
T2 -  ps.setBigDecimal(1, -500.00);
<b>// *** At this point the prepared statement has the parameters
// -500.00 and 1234
// T1 thinks it is adding 100.00 to account 1234 but actually
// it is subtracting 500.00</b>
T1 - ps.executeUpdate();
T2 - ps.setLong(2, 5678);
<b>// T2 executes the correct update</b>
 T2 - ps.executeUpdate();
<b>/* Also, the auto-commit mode of the connection can lead
to some strange behavior.*/</b></codeblock></example>
<section><p>If it is absolutely necessary, the application can get around
this problem with Java synchronization.</p></section>
<section><p>If the threads each obtain their own <i>PreparedStatement</i> (with
identical text), their <codeph><i>setXXX</i></codeph> calls do not interfere
with each other. Moreover, <ph conref="../conrefs.dita#prod/productshortname"></ph> is
able to share the same compiled query plan between the two statements; it
needs to maintain only separate state information. However, there is the potential
for confusion in regard to the timing of the <i>commit</i>, since a single <i>commit</i> commits
all the statements in a transaction.</p></section>
</refbody>
</reference>

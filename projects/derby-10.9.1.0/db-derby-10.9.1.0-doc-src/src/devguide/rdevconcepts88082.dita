<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rdevconcepts88082" xml:lang="en-us">
<title>Simple non-updatable result sets</title>
<shortdesc>This example is an excerpt from a sample JDBC application that
generates a result set with a simple SELECT statement and then processes
the rows.</shortdesc>
<prolog></prolog>
<refbody>
<example> <codeblock>Connection conn = DriverManager.getConnection(
    "jdbc:derby:sample");
Statement s = conn.createStatement();
s.execute("set schema 'SAMP'");
<b>//note that autocommit is on--it is on by default in JDBC</b>
ResultSet rs = s.executeQuery(
    "SELECT empno, firstnme, lastname, salary, bonus, comm "
				 + "FROM samp.employee");
<b>/** a standard JDBC ResultSet. It maintains a 
  *  cursor that points to the current row of data. The cursor 
  *  moves down one row each time the method next() is called.
  *  You can scroll one way only--forward--with the next()
  *  method. When auto-commit is on, after you reach the 
  *  last row the statement is considered completed
  *  and the transaction is committed.
  */</b>
System.out.println( "last name" + "," + "first name" + ": earnings");
<b>/* here we are scrolling through the result set 
with the next() method.*/</b>
while (rs.next()) {
<b>    // processing the rows</b>
    String firstnme = rs.getString("FIRSTNME");
    String lastName = rs.getString("LASTNAME");
    BigDecimal salary = rs.getBigDecimal("SALARY");
    BigDecimal bonus = rs.getBigDecimal("BONUS");
    BigDecimal comm = rs.getBigDecimal("COMM"); 
    System.out.println( lastName + ", " + firstnme + ": " 
                       + (salary.add(bonus.add(comm))));
}
rs.close();
<b>// once we've iterated through the last row,
// the transaction commits automatically and releases
//shared locks</b>
s.close();</codeblock></example>
</refbody>
</reference>

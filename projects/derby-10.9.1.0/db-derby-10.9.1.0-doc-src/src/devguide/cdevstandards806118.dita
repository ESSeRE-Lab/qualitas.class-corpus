<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevstandards806118" xml:lang="en-us">
<title>Derby and standards</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> adheres
to SQL99 or newer standards wherever possible. This section describes those
features currently in <ph conref="../conrefs.dita#prod/productshortname"></ph> that
are not standard; these features are currently being evaluated and might be
removed in future releases.</shortdesc>
<prolog><metadata>
<keywords><indexterm>SQL99 standards<indexterm>and Derby</indexterm></indexterm>
<indexterm>data types<indexterm>CLOB</indexterm></indexterm><indexterm>data
types<indexterm>BLOB</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>This section describes those parts of <ph conref="../conrefs.dita#prod/productshortname"></ph> that
are non-standard or not typical for a database system.</p>
<dl>
<dlentry>
<dt>ALTER TABLE syntax</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> uses a
slightly different ALTER TABLE syntax for altering column defaults. While
SQL99 uses DROP and SET, <ph conref="../conrefs.dita#prod/productshortname"></ph>
uses DEFAULT.</dd>
</dlentry>
<dlentry>
<dt>Calling functions and procedures</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> supports
the CALL (procedure) statement for calling external procedures declared by
the CREATE PROCEDURE statement. Built-in functions and user-defined functions
declared with the CREATE FUNCTION command can be called as part of an SQL
select statement or by using either a VALUES clause or VALUES expression.</dd>
</dlentry>
<dlentry>
<dt>CLOB and BLOB data types</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> supports the
standard CLOB and BLOB data types. BLOB and CLOB values are limited to a
maximum of 2,147,483,647 characters.</dd>
</dlentry>
<dlentry>
<dt>Cursors</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> uses JDBC's result
sets, and does not provide SQL for manipulating cursors except for positioned
update and delete. <ph conref="../conrefs.dita#prod/productshortname"></ph>'s
scrollable insensitive cursors are provided through JDBC, not through SQL
commands.</dd>
</dlentry>
<dlentry>
<dt>DECIMAL max precision</dt>
<dd>For <ph conref="../conrefs.dita#prod/productshortname"></ph>, the maximum
precision for DECIMAL columns is 31 digits. SQL99 does not require a specific
maximum precision for decimals, but most products have a maximum precision of
15-32 digits.</dd>
</dlentry>
<dlentry>
<dt>Dynamic SQL</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> uses JDBC's
Prepared Statement, and does not provide SQL commands for dynamic SQL.</dd>
</dlentry>
<dlentry>
<dt>Expressions on LONGs</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> permits
expressions on LONG VARCHAR; however, LONG VARCHAR data types are not allowed
in the following clauses, operations, constraints, functions, and predicates:
<ul>
<li>GROUP BY clauses</li>
<li>ORDER BY clauses</li>
<li>JOIN operations</li>
<li>PRIMARY KEY constraints</li>
<li>Foreign KEY constraints</li>
<li>UNIQUE key constraints</li>
<li>MIN aggregate function</li>
<li>MAX aggregate function</li>
<li>[NOT] IN predicate</li>
<li>UNION, INTERSECT, and EXCEPT operators</li>
</ul>
SQL99 also places some restrictions on expressions on LONG types.
</dd>
</dlentry>
<dlentry>
<dt>Information schema</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> uses its own system
catalog that can be accessed using standard JDBC DatabaseMetadata calls.
<ph conref="../conrefs.dita#prod/productshortname"></ph> does not provide the
standard Information Schema views.</dd>
</dlentry>
<dlentry>
<dt>NOT NULL characteristic</dt>
<dd>The SQL standard says NOT NULL is a constraint, and can be named and viewed
in the information schema as such.
<ph conref="../conrefs.dita#prod/productshortname"></ph> does not provide naming
for NOT NULL, nor does it present it as a constraint in the information schema,
only as a characteristic of the column.</dd>
</dlentry>
<dlentry>
<dt>Stored routines and PSM</dt>
<dd><ph conref="../conrefs.dita#prod/productshortname"></ph> supports external
procedures using the Java programming language. Procedures are managed using the
CREATE PROCEDURE and DROP PROCEDURE statements.</dd>
</dlentry>
<dlentry>
<dt>Transactions</dt>
<dd>All operations in <ph conref="../conrefs.dita#prod/productshortname"></ph>
are transactional. <ph conref="../conrefs.dita#prod/productshortname"></ph>
supports transaction control using JDBC Connection methods. This includes
support for savepoints and for the four JDBC transaction isolation levels. The
only SQL command provided for transaction control is SET TRANSACTION ISOLATION.
</dd>
</dlentry>
</dl>
</conbody>
</concept>

<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevcsecuregrantrevokeaccess" xml:lang="en-us">
<title>Using SQL standard authorization</title>
<shortdesc>When the SQL standard authorization mode is enabled, object owners
can use the GRANT and REVOKE SQL statements to set the user privileges for
specific database objects or for specific SQL actions. They can also use roles
to administer privileges.</shortdesc>
<prolog><metadata>
<keywords><indexterm>user authorizations<indexterm>granting</indexterm></indexterm>
<indexterm>user authorizations<indexterm>revoking</indexterm></indexterm><indexterm>user
authorizations<indexterm>PUBLIC</indexterm></indexterm><indexterm>GRANT statement<indexterm>overview</indexterm></indexterm>
<indexterm>REVOKE statement<indexterm>overview</indexterm></indexterm><indexterm>access
control system<indexterm>SQL2003</indexterm></indexterm><indexterm>SQL standard
authorization mode</indexterm>
<indexterm>invoker rights<indexterm>versus definer rights</indexterm></indexterm>
<indexterm>definer rights<indexterm>versus invoker rights</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>The SQL standard authorization mode is a SQL2003 compatible access control
system. You enable the SQL standard authorization mode by setting the <codeph>derby.database.sqlAuthorization</codeph> property
to <codeph>TRUE</codeph>.</p>
<p>While <ph conref="../conrefs.dita#prod/productshortname"></ph> has a simpler
database access mode which can be set to provide users with <varname>full</varname>, <varname>read-only</varname>,
or <varname>no access</varname> authorization, this simpler access mode is
less appropriate for most client-server database configurations. When users
or applications issue SQL statements directly against the database, the <ph
conref="../conrefs.dita#prod/productshortname"></ph> SQL authorization mode
provides a more precise mechanism to limit the actions that users can take
on the database.</p>
<p>The GRANT statement is used to grant specific privileges to users or to
roles, or to grant roles to users or to roles. The
REVOKE statement is used to revoke privileges and role grants. The grant and
revoke privileges are:<ul>
<li>DELETE</li>
<li>EXECUTE</li>
<li>INSERT</li>
<li>SELECT</li>
<li>REFERENCES</li>
<li>TRIGGER</li>
<li>UPDATE</li>
</ul></p>
<p>When a table, view, function, or procedure is created, the person that
creates the object is referred to as the <term>owner</term> of the object.
Only the object owner and the
<xref href="cdevcsecureDbOwner.dita#cdevcsecureDbOwner">database owner</xref>
have full privileges on the object.
No other users have privileges on the object until the object owner grants
privileges to them.</p>
<p>Another way of saying that privileges on objects belong to the owner is to
call them <term>definer rights</term>, as opposed to <term>invoker rights</term>.
This is the terminology used by the SQL standard.</p>
<p>See the <cite><ph conref="../conrefs.dita#pub/citref"></ph></cite> for more
information on the GRANT and REVOKE statements.</p>
<section><title>Public and individual user privileges</title><p>The object
owner can grant and revoke privileges for specific users, for specific roles,
or for all users.
The keyword PUBLIC is used to specify all users. When PUBLIC is specified,
the privileges affect all current and future users. The privileges granted
and revoked to PUBLIC and to individual users or roles are independent. For example,
a SELECT privilege on table <codeph>t</codeph> is granted to both PUBLIC and
to the user <codeph>harry</codeph>. The SELECT privilege is later revoked
from user <codeph>harry</codeph>, but user <codeph>harry</codeph> has access
to table <codeph>t</codeph> through the PUBLIC privilege.</p><note othertype="Exception"
type="other">When you create a view, trigger, or constraint, <ph conref="../conrefs.dita#prod/productshortname"></ph> first
checks to determine if you have the required privileges at the user level.
If you have the user-level privileges, the object is created and is dependent
on that user-level privilege. If you do not have the required privileges at
the user-level, <ph conref="../conrefs.dita#prod/productshortname"></ph> checks
to determine if you have the required privileges at the PUBLIC level. If you
have the PUBLIC level privileges, the object is created and is dependent on
that PUBLIC level privilege. After the object is created, if the privilege
on which the object depends is revoked, the object is automatically dropped. <ph
conref="../conrefs.dita#prod/productshortname"></ph> does not try to determine
if you have other privileges that can replace the privileges that are being
revoked. <dl><dlentry>
<dt>Example 1</dt>
<dd>User <codeph>zhi</codeph> creates table <codeph>t1</codeph> and grants
SELECT privileges to user <codeph>harry</codeph> on table <codeph>t1</codeph>.
User <codeph>zhi</codeph> grants SELECT privileges to PUBLIC on table <codeph>t1</codeph>.
User <codeph>harry</codeph> creates view <codeph>v1</codeph> with the statement
<codeph>SELECT * from zhi.t1</codeph>. The view depends on the user-level
privilege that user <codeph>harry</codeph> has on <codeph>t1</codeph>. Subsequently,
user <codeph>zhi</codeph> revokes SELECT privileges from user <codeph>harry</codeph> on
table <codeph>t1</codeph>. As a result, the view <codeph>harry.v1</codeph> is
dropped.</dd>
</dlentry><dlentry>
<dt>Example 2</dt>
<dd>User <codeph>anita</codeph> creates table <codeph>t1</codeph> and grants
SELECT privileges to PUBLIC. User <codeph>harry</codeph> creates view <codeph>v1</codeph> with
the statement <codeph>SELECT * from anita.t1</codeph>. The view depends on
the PUBLIC level privilege that user <codeph>harry</codeph> has on <codeph>t1</codeph>, since
user <codeph>harry</codeph> does not have user-level privileges on table <codeph>t1</codeph> when
he creates the view <codeph>harry.v1</codeph>. Subsequently, user <codeph>anita</codeph> grants
SELECT privileges to user <codeph>harry</codeph> on table <codeph>anita.t1</codeph>.
The view <codeph>harry.v1</codeph> continues to depend on the PUBLIC level privilege
that user <codeph>harry</codeph> has on <codeph>t1</codeph>. When user <codeph>anita</codeph> revokes
SELECT privileges from PUBLIC on table <codeph>t1</codeph>, the view <codeph>harry.v1</codeph> is
dropped.</dd>
</dlentry></dl>
<p>See
<xref href="cdevcsecureprivileges.dita#cdevcsecureprivileges"></xref> for
more information.</p></note></section>
</conbody>
</concept>

<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevconcepts24019" xml:lang="en-us">
<title>Multiple connections from a single application</title>
<shortdesc>A single application can work with multiple <i>Connections</i> to
the same database and assign them to different threads.</shortdesc>
<prolog></prolog>
<conbody>
<p>You can avoid concurrency and deadlock problems in your application in
several ways:</p>
<ul>
<li>Use the <i>TRANSACTION_READ_COMMITTED</i> isolation level and turn on
row-level locking (the defaults).</li>
<li>Beware of deadlocks caused by using more than one <i>Connection</i> in
a single thread (the most obvious case). For example, if the thread tries
to update the same table from two different <codeph><i>Connections</i></codeph>,
a deadlock can occur.</li>
<li>Assign <i>Connections</i> to threads that handle discrete tasks. For example,
do not have two threads update the <i>Hotels</i> table. Have one thread update
the <i>Hotels</i> table and a different one update the <i>Groups</i> table.</li>
<li>If threads access the same tables, commit transactions often.</li>
<li>Multi-threaded Java applications have the ability to self-deadlock without
even accessing a database, so beware of that too.</li>
<li>Use nested connections to share the same lock space.</li>
</ul>
</conbody>
</concept>

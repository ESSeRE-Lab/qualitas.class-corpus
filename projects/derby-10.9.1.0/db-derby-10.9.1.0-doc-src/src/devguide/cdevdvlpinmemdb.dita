<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevdvlpinmemdb" xml:lang="en-us">
<title>Using in-memory databases</title>
<shortdesc>For testing and developing applications, or for processing transient
or reproducible data, you can use
<ph conref="../conrefs.dita#prod/productshortname"></ph>'s in-memory database
facility.</shortdesc>
<prolog><metadata><keywords>
<indexterm>in-memory databases</indexterm>
<indexterm>databases<indexterm>in-memory</indexterm></indexterm>
</keywords></metadata></prolog>
<conbody>
<p>An in-memory database resides completely in main memory, not in the file
system. It is useful for testing and developing applications, when you may want
to create and discard databases that will never be used again. It is also 
useful when you need to process only temporary or reproducible data.</p>
<p>If you have the required memory available, you may also benefit from faster
processing (no disk I/O) and from the simplicity of not having to explicitly
delete databases you have finished with.</p>
<section><title>Creating an in-memory database</title>
<p>To create an in-memory database, specify <codeph>memory</codeph> as the JDBC
subsubprotocol. For example, to create an in-memory database named
<codeph>myDB</codeph> using the embedded driver, use the following connection
URL:</p>
<codeblock>jdbc:derby:memory:myDB;create=true</codeblock>
<p>For the network client driver, use the following connection URL. Because
the client driver does not understand the <codeph>memory</codeph>
subsubprotocol, you must include it in the database name:</p>
<codeblock>jdbc:derby://<i>myhost</i>:1527/memory:myDB;create=true</codeblock>
<p>Be careful to specify a colon (<codeph>:</codeph>) after
<codeph>memory</codeph>.</p>
</section>
<section><title>Referring to in-memory databases</title>
<p>When you create or refer to an in-memory database, any path that is not
absolute is interpreted as relative to the system directory, just as with file
system databases. For example, if the system directory is
<codeph>C:\myderby</codeph>, the following paths are regarded as
equivalent:</p>
<codeblock>jdbc:derby:memory:db
jdbc:derby:memory:C:\myderby\db</codeblock>
<p>Similarly, <ph conref="../conrefs.dita#prod/productshortname"></ph> treats
the following URLs as names for the same in-memory database:</p>
<codeblock>jdbc:derby:memory:/home/myname/db
jdbc:derby:memory:/home/myname/../myname/db</codeblock>
<p><xref href="cdevdvlp40350.dita#cdevdvlp40350"></xref> has more information on
database paths.</p>
</section>
<section><title>Using in-memory databases</title>
<p>When you use an in-memory database, you need to make sure to configure the
heap and the <ph conref="../conrefs.dita#prod/productshortname"></ph> page
cache size. See "Configure
<ph conref="../conrefs.dita#prod/productshortname"></ph> to use an in-memory
database" in <ph conref="../conrefs.dita#pub/cittuning"></ph> for details.</p>
<p>For examples of how to use an in-memory database, see some of the
<codeph>ij</codeph> command examples in the
<ph conref="../conrefs.dita#pub/citutilities"></ph> (<codeph>execute</codeph>
and <codeph>async</codeph>, for example).</p>
</section>
<section><title>Removing an in-memory database</title>
<p>To remove an in-memory database, use the connection URL attribute <i>drop</i>
as follows:</p>
<codeblock>jdbc:derby:memory:myDB;drop=true</codeblock>
<codeblock>jdbc:derby://<i>myhost</i>:1527/memory:myDB;drop=true</codeblock>
<p>You can shut down an in-memory database using the <i>shutdown=true</i>
attribute before you drop the database, but this is optional. Dropping the
database also performs the shutdown.</p>
<p>When you drop the database,
<ph conref="../conrefs.dita#prod/productshortname"></ph> issues what appears to
be an error but is actually an indication of success. You need to catch error
08006, as described in "The WwdEmbedded program" in
<ph conref="../conrefs.dita#pub/citgetstart"></ph>.</p>
<p>
If user
<xref href="cdevcsecure36127.dita#cdevcsecure36127">authentication</xref>
and
<xref href="cdevcsecure36595.dita#cdevcsecure36595">SQL authorization</xref>
are both enabled, only the
<xref href="cdevcsecureDbOwner.dita#cdevcsecureDbOwner">database owner</xref>
can drop the database.
</p>
<p>An in-memory database is automatically removed if any of the following
happens:</p>
<ul>
<li>The Java Virtual Machine (JVM) is shut down normally (for example, if you
exit the <codeph>ij</codeph> tool)</li>
<li>The JVM crashes</li>
<li>The machine you are running on crashes or shuts down</li>
</ul>
</section>
<section><title>Persisting an in-memory database</title>
<p>If you create an in-memory database and then decided that you want to keep it
after all, you can use one of the backup system procedures
(SYSCS_UTIL.SYSCS_BACKUP_DATABASE, for example) to persist it. You can then boot
it as an in-memory database at a later time, or use it as a normal file system
database. See "Backing up and restoring databases" in
<ph conref="../conrefs.dita#pub/citadmin"></ph> for information on using the
backup procedures.</p>
</section>
</conbody>
</concept>

<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevcsecure67151" xml:lang="en-us">
<title>Specifying an alternate encryption algorithm</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> supports
the following encryption algorithms.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Encryption algorithms<indexterm>configuring</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<ul>
<li>DES (the default)</li>
<li>DESede (also known as triple DES)</li>
<li>Any encryption algorithm that fulfills the following requirements:   <ul>
<li>It is symmetric</li>
<li>It is a block cipher, with a block size of 8 bytes</li>
<li>It uses the <i>NoPadding</i> padding scheme</li>
<li>Its secret key can be represented as an arbitrary byte array</li>
<li>It requires exactly one initialization parameter, an initialization vector
of type <i>javax.crypto.spec.IvParameterSpec</i></li>
<li>It can use <i>javax.crypto.spec.SecretKeySpec</i> to represent its key</li>
</ul>  <p>For example, the algorithm <i>Blowfish</i> implemented in the
Java Cryptography Extension (JCE) packages (<i>javax.crypto.*</i>) fulfills
these requirements.</p></li>
</ul>
<p>By Java convention, an encryption algorithm is specified like this:</p>
<codeblock><b><i>algorithmName</i>/<i>feedbackMode</i>/<i>padding</i></b></codeblock>
<p>The only feedback modes allowed are:</p>
<ul>
<li>CBC</li>
<li>CFB</li>
<li>ECB</li>
<li>OFB</li>
</ul>
<p>The only padding mode allowed is <i>NoPadding</i>.</p>
<p>By default, <ph conref="../conrefs.dita#prod/productshortname"></ph> uses
the DES algorithm of <i>DES/CBC/NoPadding</i>.</p>
<p>To specify an alternate encryption algorithm when you create a database, use
the <i>encryptionAlgorithm=algorithm</i> attribute. If the algorithm you specify
is not supported by the provider you have specified, <ph conref="../conrefs.dita#prod/productshortname"></ph> throws
an exception.</p>
<p>To specify the AES encryption algorithm with a key length other than the
default of 128, specify the <i>encryptionKeyLength</i> attribute. For example,
you might specify the following connection attributes:</p>
<codeblock>
jdbc:derby:encdbcbc_192;create=true;dataEncryption=true;
encryptionKeyLength=192;encryptionAlgorithm=AES/CBC/NoPadding;
bootPassword=Thursday
</codeblock>
<p>To use the AES algorithm with a key length of 192 or 256, you must use 
unrestricted policy jar files for your JRE. You can obtain these files from your
Java provider. They might have a name like "Java Cryptography Extension (JCE)
Unlimited Strength Jurisdiction Policy Files." If you specify a non-default key
length using the default policy jar files, a Java exception occurs.</p>
</conbody>
</concept>

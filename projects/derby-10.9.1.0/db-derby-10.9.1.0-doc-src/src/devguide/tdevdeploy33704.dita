<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
 "../dtd/task.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<task id="tdevdeploy33704" xml:lang="en-us">
<title>Transferring read-only databases to archive (jar or zip) files</title>
<shortdesc>Once a database has been created in <ph conref="../conrefs.dita#prod/productshortname"></ph>,
it can be stored in a jar or zip file and continue to be accessed by <ph conref="../conrefs.dita#prod/productshortname"></ph> in
read-only mode.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Zip files<indexterm>databases in</indexterm></indexterm>
<indexterm>Archiving read-only databases</indexterm><indexterm>Read-only databases<indexterm>archiving
to jar or zip files</indexterm></indexterm><indexterm>Jar files<indexterm>databases
in</indexterm></indexterm></keywords>
</metadata></prolog>
<taskbody>
<context> <p>This allows a read-only database to be distributed as a single
file instead of as multiple files within a directory and to be compressed.
In fact, a jar or zip file can contain any number of <ph conref="../conrefs.dita#prod/productshortname"></ph> databases
and can also contain other information not related to <ph conref="../conrefs.dita#prod/productshortname"></ph>,
such as application data or code.</p><p>You cannot store the <i>derby.properties</i> file
in a jar or zip file.</p><p>To create a jar or zip file containing one or
more <ph conref="../conrefs.dita#prod/productshortname"></ph> databases: <ol>
<li>Create a database for use on read-only media.</li>
<li>From the directory that contains the database folder, archive the database
directory and its contents. For example, for the database<i> sales</i> that
lives in the system directory<i> C:\london</i>, issue the command from <i>london</i>.
Do not issue the command from inside the database directory itself.</li>
</ol></p><p>For example, archive the database folder and its contents using
the JAR program from the JDK. You can use any zip or jar tool to generate
the archive.</p><p>This command archives the database directory <i>sales</i> and
its contents into a compressed jar file called <i>dbs.jar</i>.<codeblock>cd C:\london
jar cMf C:\dbs.jar sales</codeblock></p><p>You can add multiple databases
with jar. For example, this command puts the <i>sales</i> databases and the <i>boiledfood</i> database
(in the subdirectory products) into the archive.<codeblock>cd C:\london
jar cMf C:\dbs.jar sales products\boiledfood</codeblock></p><p>The relative
paths of the database in the jar need not match their original relative paths.
You can do this by allowing your archive tool to change the path, or by moving
the original databases before archiving them.</p><p>The archive can be compressed
or uncompressed, or individual databases can be uncompressed or compressed
if your archive tool allows it. Compressed databases take up a smaller amount
of space on disk, depending on the data loaded, but are slower to access.</p><p>Once
the database is archived into the jar or zip file, it has no relationship
to the original database. The original database can continue to be modified
if desired.</p></context>
</taskbody>
</task>

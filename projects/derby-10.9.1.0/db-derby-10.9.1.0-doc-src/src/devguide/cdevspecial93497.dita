<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevspecial93497" xml:lang="en-us">
<title>Aborting statements and transactions</title>
<shortdesc>You might want a trigger action to be able to abort the triggering
statement or even the entire transaction.</shortdesc>
<prolog></prolog>
<conbody>
<p>Triggers that use the current connection are not permitted to commit or
roll back the connection, so how do you do that? The answer is: have the trigger
throw an exception, which is by default a statement-level exception (which
rolls back the statement). The application-side code that contains the statement
that caused the trigger to fire can then roll back the entire connection if
desired. Programming triggers in this respect is no different from programming
any database-side JDBC method.</p>
</conbody>
</concept>

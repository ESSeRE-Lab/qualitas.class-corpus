<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevconcepts842385" xml:lang="en-us">
<title>Update locks</title>
<shortdesc>When a user-defined update cursor (created with the FOR UPDATE
clause or by using concurrency mode
<codeph>ResultSet.CONCUR_UPDATABLE</codeph>) reads data, its
transaction obtains an <i>update</i> lock on the data.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Update locks</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>If the user-defined update cursor updates the data, the update lock is
converted to an exclusive lock. If the cursor does not update the row, when
the transaction steps through to the next row, transactions using the TRANSACTION_READ_COMMITTED
isolation level release the lock. (For update locks, the TRANSACTION_READ_UNCOMMITTED
isolation level acts the same way as TRANSACTION_READ_COMMITTED.)</p>
<p>Update locks help minimize deadlocks.</p>
</conbody>
</concept>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevspecial49460" xml:lang="en-us">
<title>Triggers and exceptions</title>
<shortdesc>Exceptions raised by triggers have a statement severity; they roll
back the statement that caused the trigger to fire.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Triggers<indexterm>and exceptions</indexterm></indexterm>
<indexterm>Triggers<indexterm>automatic rollback of trigger actions</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>This rule applies to nested triggers (triggers that are fired by other
triggers). If a trigger action raises an exception (and it is not caught),
the transaction on the current connection is rolled back to the point before
the triggering event. For example, suppose Trigger A causes Trigger B to fire.
If Trigger B throws an exception, the current connection is rolled back to
the point before the statement in Trigger A that caused Trigger B to fire.
Trigger A is then free to catch the exception thrown by Trigger B and continue
with its work. If Trigger A does not throw an exception, the statement that
caused Trigger A, as well as any work done in Trigger A, continues until the
transaction in the current connection is either committed or rolled back.
However, if Trigger A does not catch the exception from Trigger B, it is as
if Trigger A had thrown the exception. In that case, the statement that caused
Trigger A to fire is rolled back, along with any work done by both of the
triggers.</p>
</conbody>
</concept>

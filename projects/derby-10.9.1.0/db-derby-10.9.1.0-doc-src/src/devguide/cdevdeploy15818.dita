<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevdeploy15818" xml:lang="en-us">
<title>Create jar files for your application</title>
<shortdesc>Include any Java classes in a jar file that are intended for <ph
conref="../conrefs.dita#prod/productshortname"></ph> class loading, except
the following classes:</shortdesc>
<prolog></prolog>
<conbody>
<ul>
<li>The standard Java packages (<i>java.*</i>, <i>javax.*</i>)
  <p><ph conref="../conrefs.dita#prod/productshortname"></ph> does not prevent
you from storing such a jar file in the database, but these classes <i>are
never loaded</i> from the jar file.</p></li>
<li>The classes that are supplied with your Java environment (for example, <i>sun.*</i>)</li>
</ul>
<p>A running <ph conref="../conrefs.dita#prod/productshortname"></ph> system
can load classes from any number of jar files from any number of schemas and
databases.</p>
<p>Create jar files intended for <ph conref="../conrefs.dita#prod/productshortname"></ph> database
class loading the same way you create a jar file for inclusion in a user's
classpath. For example, consider an application targeted at travel agencies: </p>
<codeblock><b>jar cf travelagent.jar travelagent/*.class.</b></codeblock>
<p>Various IDEs have tools to generate a list of contents for a jar file based
on your application. If your application requires classes from other jar files,
you have a choice:</p>
<ul>
<li><i>Extract the required third-party classes from their jar file and include
only those classes in your jar file.</i>   <p>Use this option when you need
only a small subset of the classes in the third-party jar file.</p></li>
<li><i>Store the third-party jar file in the database.</i>   <p>Use this option
when you need most or all of the classes in the third-party jar file, since
your application and third-party logic can be upgraded separately.</p></li>
<li><i>Deploy the third-party jar file in the user's class path.</i>   <p>Use
this option when the classes are already installed on a user's machine (for
example, Objectspace's JGL classes).</p></li>
</ul>
</conbody>
</concept>

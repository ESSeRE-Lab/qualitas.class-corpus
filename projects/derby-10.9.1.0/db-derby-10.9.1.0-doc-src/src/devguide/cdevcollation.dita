<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevcollation" xml:lang="en-us">
<title>Character-based collation in <ph conref="../conrefs.dita#prod/productshortname"></ph></title>
<shortdesc>A character set is a set of symbols and encodings. Character data
types are represented as Unicode 2.0 sequences in <ph conref="../conrefs.dita#prod/productshortname"></ph>. </shortdesc>
<prolog><metadata>
<keywords><indexterm>collation<indexterm>overview</indexterm></indexterm>
<indexterm></indexterm></keywords>
</metadata></prolog>
<conbody>
<section><title>How collation works in <ph conref="../conrefs.dita#prod/productshortname"></ph></title><p><ph
conref="../conrefs.dita#prod/productshortname"></ph> supports a wide range
of character sets and encodes all of the character sets by using the Unicode
support provided by the java.lang.Character  class in the Java Virtual Machine
(JVM) in which the <ph conref="../conrefs.dita#prod/productshortname"></ph> database
runs. See the Java API documentation for the java.lang.Character class for
the exact level of Unicode Standard that is supported.</p><p>A collation is
a set of rules for comparing characters in a character set.  In <ph conref="../conrefs.dita#prod/productshortname"></ph> the
collation rules affect comparisons of the CHAR and VARCHAR data  types. Collation
rules also affect how the LIKE Boolean operator processes the CHAR, VARCHAR,
CLOB, and LONG VARCHAR data types.</p><p>The default <ph conref="../conrefs.dita#prod/productshortname"></ph> collation
rule is based on the binary Unicode values of the characters. So a character
is greater than (&lt;), equal to (=), or less than (>) another character based
on the numeric comparison of the Unicode values. This rule allows for very
efficient comparisons of character strings.</p><note>When LIKE comparisons
are used, <ph conref="../conrefs.dita#prod/productshortname"></ph> compares
one character at a time for non-metacharacters. This is different than the
way <ph conref="../conrefs.dita#prod/productshortname"></ph> processes = comparisons.
The comparisons with the = operator compare the entire character string on
left side of the = operator with the entire character string on the right
side of the = operator. See the <xref href="cdevcollation.dita#cdevcollation/territorylike"></xref> section
below.</note></section>
<section><title>Territory-based collation</title><p><ph conref="../conrefs.dita#prod/productshortname"></ph> also
supports the ability to define collation rules that are appropriate to a territory,
and is referred to as <i><term>territory-based collation</term></i>.  <ph
conref="../conrefs.dita#prod/productshortname"></ph> supports the territories
that Java supports.</p><p>You can specifically set the territory of a database
when you create the database. If you do not specify a territory, <ph conref="../conrefs.dita#prod/productshortname"></ph> uses
the default territory of the JVM in which the database is created. Each JVM
can support many territories that are independent from the default territory
for the JVM. Collation support for these additional territories is provided
through the <codeph>java.text.RuleBasedCollator</codeph> class and the set
of rules for these territories. Refer to the JVM specification for details
of how these rules are used to provide territory specific collation. <ph conref="../conrefs.dita#prod/productshortname"></ph> currently
supports only running those rules that can be loaded dynamically from the
running JVM based on the territory attribute. Overrides to these rules by
the user are not supported. </p><p>The territory-based collation in <ph conref="../conrefs.dita#prod/productshortname"></ph> affects
how the CHAR and VARCHAR data types are compared. Specifying territory-based
collation also impacts how the LIKE Boolean operator processes CHAR, VARCHAR,
CLOB, and LONG VARCHAR data. </p><p>Territory-based collation does add extra
processing overhead to all character-based comparison operations.</p></section>
<section><title>Database attributes that control collation</title><p>When
you create a <ph conref="../conrefs.dita#prod/productshortname"></ph> database,
the attributes that you set determine the collation that is used with all
of character data in the database. The following table shows some examples.</p>
<table>
<title>The create database attributes that control collation</title>
<desc>This table shows how collation is controlled with various database creation attributes.</desc>
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="col1" colnum="1" colwidth="70*"/>
<colspec colname="col2" colnum="2" colwidth="30*"/>
<thead>
<row valign="bottom">
<entry colname="col1">Example Create URLs</entry>
<entry colname="col2">Collation Is Driven By</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1">jdbc:derby:abcDB;create=true</entry>
<entry colname="col2">Unicode codepoint collation (UCS_BASIC), which is the
default collation for <ph conref="../conrefs.dita#prod/productshortname"></ph> databases. </entry>
</row>
<row>
<entry colname="col1">jdbc:derby:abcDB;create=true;territory=es_MX</entry>
<entry colname="col2">Unicode codepoint collation (UCS_BASIC). The <codeph>collation</codeph> attribute
is not set.</entry>
</row>
<row>
<entry colname="col1">jdbc:derby:abcDB;create=true;collation=TERRITORY_BASED</entry>
<entry colname="col2">The territory of the JVM, since the <codeph>territory</codeph> attribute
is not set. <note type="tip">To determine the territory of the JVM, run <codeph>Locale.getDefault()</codeph>.</note></entry>
</row>
<row>
<entry colname="col1">jdbc:derby:abcDB;create=true;territory=es_MX;collation=TERRITORY_BASED</entry>
<entry colname="col2">The <codeph>territory</codeph> attribute.</entry>
</row>
</tbody>
</tgroup>
</table></section>
<section><title>Collation examples</title><p>With Unicode codepoint collation
(UCS_BASIC), the numerical values of the Unicode encoding of the characters
are used directly for ordering. For example, the FRUIT table contains the NAME
column that uses the VARCHAR(20) data type. The contents of the NAME column
are:<sl>
<sli>orange</sli>
<sli>apple</sli>
<sli>Banana</sli>
<sli>Pineapple</sli>
<sli>Grape</sli>
</sl></p><p>UCS_BASIC collation sorts all lower case letters before upper
case letters. The statement <codeph>SELECT * FROM FRUIT ORDER BY NAME</codeph> returns: <sl>
<sli>apple</sli>
<sli>orange</sli>
<sli>Banana</sli>
<sli>Grape</sli>
<sli>Pineapple</sli>
</sl></p><p>If the database is created with the territory attribute set to
en_US (English language, United States country code), and the collation attribute
set to TERRITORY_BASED, the results of the statement <codeph>SELECT * FROM
FRUIT ORDER BY NAME</codeph> returns: <sl>
<sli>apple</sli>
<sli>Banana</sli>
<sli>Grape</sli>
<sli>orange</sli>
<sli>Pineapple</sli>
</sl></p><p>The collation set for the database also impacts comparison operators
on character data types. For example, the statement <codeph>SELECT * FROM
FRUIT WHERE NAME > 'Banana' ORDER BY NAME</codeph> returns: 
<lines>      UCS_BASIC collation       Territory-based collation
                Grape                                Grape
                Pineapple                           orange
                                                          Pineapple</lines></p>
<p>For information on creating case-insensitive databases, see
<xref href="tdevdvlpcollation.dita#tdevdvlpcollation"></xref>.</p>
</section>
<section id="territorylike"><title>Differences between LIKE and equal (=)
comparisons</title><p>When you use territory-based collation, the comparisons
can return different results when you use the LIKE and equal
(=) operators. For example, suppose that the <ph conref="../conrefs.dita#prod/productshortname"></ph> database
is set to use a territory where the character 'z' has same collation elements
as 'xy'. Consider the following two WHERE clauses: <ol>
<li>WHERE 'zcb' = 'xycb'</li>
<li>WHERE 'zcb' LIKE 'xy_b'</li>
</ol></p><p>For WHERE clause 1, <ph conref="../conrefs.dita#prod/productshortname"></ph> returns
TRUE because the collation elements for the entire string 'zcb' will match
the collation elements of the entire string 'xycb'.  </p><p>For WHERE clause
2, <ph conref="../conrefs.dita#prod/productshortname"></ph> returns FALSE
because collation element for character 'z' does not match the collation element
for character 'x'. In addition, when metacharacter such as an underscore is
used with the LIKE operator, the metacharacter counts for one character in
the string value. A clause like WHERE 'xycb' LIKE '_cb' returns FALSE because
'x' is compared to the metacharacter _ and 'y' does not match 'c'.</p></section>
</conbody>
</concept>
<?Pub *0000009279?>

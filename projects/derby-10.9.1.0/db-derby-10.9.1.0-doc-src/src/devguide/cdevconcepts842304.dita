<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevconcepts842304" xml:lang="en-us">
<title>Shared locks</title>
<shortdesc>When a statement reads data without making any modifications, its
transaction obtains a <i>shared lock</i> on the data.</shortdesc>
<prolog></prolog>
<conbody>
<p>Another transaction that tries to read the same data is permitted to read,
but a transaction that tries to update the data will be prevented from doing
so until the shared lock is released. How long this shared lock is held depends
on the isolation level of the transaction holding the lock. Transactions using
the TRANSACTION_READ_COMMITTED isolation level release the lock when the transaction
steps through to the next row. Transactions using the TRANSACTION_SERIALIZABLE
or TRANSACTION_REPEATABLE_READ isolation level hold the lock until the transaction
is committed, so even a SELECT can prevent updates if a commit is never issued.
Transactions using the TRANSACTION_READ_UNCOMMITTED isolation level do not
request any locks.</p>
</conbody>
</concept>

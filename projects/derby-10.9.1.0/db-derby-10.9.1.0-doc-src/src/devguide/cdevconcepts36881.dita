<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevconcepts36881" xml:lang="en-us">
<title>Connections</title>
<shortdesc>A <i>Connection</i> object represents a connection with a database.</shortdesc>
<prolog><metadata>
<keywords><indexterm>JDBC Connections<indexterm>definition</indexterm></indexterm>
<indexterm>Connections<indexterm>getting</indexterm></indexterm><indexterm>Connecting
to multiple databases</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>Within the scope of one <i>Connection</i>, you access
only a single <ph conref="../conrefs.dita#prod/productshortname"></ph> database.
(Database-side JDBC routines can allow you to access more than one database
in some circumstances.) A single application might allow one or more <i>Connections</i> to <ph
conref="../conrefs.dita#prod/productshortname"></ph>, either to a single database
or to many different databases, provided that all the databases are within
the same system.</p>
<p>With DriverManager, you use the connection URL as an argument to get the <i>getConnection</i> method
to specify which database to connect to and other details.</p>
<p>The following example shows an application establishing three separate
connections to two different databases in the current system.</p>
<codeblock>Connection conn = DriverManager.getConnection(
    "jdbc:derby:sample");
System.out.println("Connected to database sample");
conn.setAutoCommit(false);
Connection conn2 = DriverManager.getConnection(
    "jdbc:derby:newDB;create=true");
System.out.println("Created AND connected to newDB");
conn2.setAutoCommit(false);
Connection conn3 = DriverManager.getConnection(
    "jdbc:derby:newDB");
System.out.println("Got second connection to newDB");
conn3.setAutoCommit(false);</codeblock>
<p>A <i>Connection</i> object has no association with any specific thread;
during its lifetime, any number of threads might have access to it, as controlled
by the application.</p>
</conbody>
</concept>

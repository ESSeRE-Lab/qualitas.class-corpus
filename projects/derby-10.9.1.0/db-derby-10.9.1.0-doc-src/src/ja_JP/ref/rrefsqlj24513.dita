<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefsqlj24513" xml:lang="ja">
<title>CREATE TABLE 文</title>
<prolog><metadata>
<keywords><indexterm>CREATE TABLE statement</indexterm><indexterm><indexterm>SQL
statements</indexterm>CREATE TABLE</indexterm><indexterm>tables<indexterm>creating</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section> <p>CREATE TABLE文により表を作成します。表には列および制約があって、情報が沿うべき規則が決められています。表ごとの制約は列の集合ないしは列を指定します。列にはデータ型が決まっていて、列の制約(列ごとの制約)があります。</p>
<p>表や<xref href="rrefattrib26867.dita#rrefattrib26867">データベースの所有者</xref>は自動的に以下の権限を持ち、また他のユーザにこれらの権限を与える事ができます。<ul>
<li>INSERT</li>
<li>SELECT</li>
<li>REFERENCES</li>
<li>TRIGGER</li>
<li>UPDATE</li>
</ul>これらの権限を表やデータベースの所有者から剥奪することはできません。</p>
<p>制約についての情報は、<xref href="rrefsqlj13590.dita#rrefsqlj13590"></xref>を参照してください。</p>
<p>列には既定値を与えることができます。既定値とは値が指定されなかったとき、列に挿入される値です。明示されない場合列の既定値はNULLです。詳細は<xref href="rrefsqlj30540.dita#rrefsqlj30540/sqlj64478"></xref>を参照してください。</p>
<p><codeph>SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY</codeph>というシステムの手続を呼ぶことで、ページサイズのような記録の属性を設定することができます。</p>
<p>表を限定する場合、スキーマ名は<i>SYS</i>で始まってはなりません。</p></section>
<refsyn><title>構文</title>
    <p>CREATE TABLEには二通りの書き方があります。これは、列の定義と制約を指定しようとするか、問い合わせ式の結果に基づき列を定義するかによります。</p>
<codeblock><b>CREATE TABLE <i><xref href="rreftablename.dita#rreftablename">表名</xref></i></b>
    ( {<i><xref href="rrefsqlj30540.dita#rrefsqlj30540">列定義</xref></i> | <i><xref
href="rrefsqlj42154.dita#rrefsqlj42154">表毎制約</xref></i>}
    [ , {<i><xref href="rrefsqlj30540.dita#rrefsqlj30540">列定義</xref></i> | <i><xref
href="rrefsqlj42154.dita#rrefsqlj42154">表毎制約</xref></i>} ] * )
  |
      [ ( <i><xref href="rrefsimplecolumnname.dita#rrefsimplecolumnname">列名</xref></i> [ , <i><xref href="rrefsimplecolumnname.dita#rrefsimplecolumnname">列名</xref></i> ] * ) ]
      <b>AS</b> <i>問い合わせ式</i>
      <b>WITH NO DATA</b>
   }

</codeblock> </refsyn>
<example><title>例</title><codeblock><b>CREATE TABLE HOTELAVAILABILITY
     (HOTEL_ID INT NOT NULL, BOOKING_DATE DATE NOT NULL,
	ROOMS_TAKEN INT DEFAULT 0, PRIMARY KEY (HOTEL_ID, BOOKING_DATE));
<ph>-- 表で主キーを定義することで、2列からなる主キーを定義できます。</ph>
PRIMARY KEY (hotel_id, booking_date))
<ph>-- 識別子列の属性を、INTEGERの列に与え、
-- さらに列に主キー制約を定義します。</ph>
CREATE TABLE PEOPLE
	(PERSON_ID INT NOT NULL GENERATED ALWAYS AS IDENTITY
	CONSTRAINT PEOPLE_PK PRIMARY KEY, PERSON VARCHAR(26));
<ph>-- 識別子列の属性を、SMALLINTの列に与え、
-- 初期値を5に増分値を5に設定します。</ph>
CREATE TABLE GROUPS
	(GROUP_ID SMALLINT NOT NULL GENERATED ALWAYS AS IDENTITY 
	(START WITH 5, INCREMENT BY 5), ADDRESS VARCHAR(100), PHONE VARCHAR(15));</b></codeblock><note>さまざまな制約を使った、より多くのCREATE TABLE文の例が<xref href="rrefsqlj13590.dita#rrefsqlj13590"></xref>にあります。</note> </example>
<section><title>CREATE TABLE ... AS ... </title>
    <p>もう一つのCREATE TABLE文の書き方は、問い合わせで列の名前と/あるいは列のデータ型を指定します。問い合わせ結果の列は、新しい表の各列を作成するときにモデルとして利用されます。</p>
<p>新しい表に列名が指定されなかった場合、問い合わせの結果の全列が、新しい表に同じ名前と対応するデータ型で作成されます。
ひとつあるいはそれ以上の列の名前が新しい表に指定された場合、問い合わせ式の結果には同数の列が無ければなりません。問い合わせ結果の列のデータ型は新しい表の対応する列に引き継がれます。</p>
<p>WITH NO DATA節は問い合わせ結果行のデータは使われず、列の名称と型だけが利用されることを表します。
WITH NO DATAは<b>必ず</b>指定してください。今後のリリースにて、DerbyでもWITH DATAを指定して、問い合わせ式の結果を新規作成された表に挿入するように出来るようになるかもしれません。しかし現在のリリースでは、WITH NO DATAの文しか処理されません。</p>
</section>
<example><title>例</title>
    <codeblock><b>
<ph>-- 既存の表の全列とデータ型を使って新しい表を作成する。</ph>
CREATE TABLE T3 AS SELECT * FROM T1 WITH NO DATA;
<ph>-- 列に名前を指定して表を作成する。そのデータ型は既存表の列に沿ったものとする。</ph>
CREATE TABLE T3 (A,B,C,D,E) AS SELECT * FROM T1 WITH NO DATA;
<ph>-- 列に名前を指定して表を作成する。そのデータ型は既存表の指定された列のデータ型に沿ったものとする。</ph>
CREATE TABLE T3 (A,B,C) AS SELECT V,DP,I FROM T1 WITH NO DATA;
<ph>-- この例では問い合わせ式の結果にある列に名前がないが、そのデータ型は新規作成された表にて対応する列のデータ型となる。</ph>
CREATE TABLE T3 (X,Y) AS SELECT 2*I,2.0*F FROM T1 WITH NO DATA;
</b></codeblock>
</example>
</refbody>
</reference>

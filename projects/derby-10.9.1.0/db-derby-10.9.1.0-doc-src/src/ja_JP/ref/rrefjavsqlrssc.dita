<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefjavsqlrssc" xml:lang="ja">
<title>結果セットと列のストリーミング</title>
<prolog><metadata>
<keywords><indexterm>getXXXStream  requests</indexterm><indexterm>Streaming
columns<indexterm>retrieving from ResultSets using getXXXStream methods</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p>もし元となるオブジェクトが<i>OutputStream</i>クラスであれば、<i>getBinaryStream</i>はそのオブジェクトを直接返します。</p></section>
<section><p><indexterm>getAsciiStream</indexterm><indexterm>getUnicodeStream</indexterm><indexterm>getBinaryStream</indexterm>
可能な型であれば<i>getXXXStream</i>メソッドにより、列をストリーミングして<i>ResultSet</i>からフィールドを取得することができます。
何らかのストリームを利用可能な型の一覧については、<xref href="rrefjavsqlprst.dita#rrefjavsqlprst/jdbc25312"></xref>を参照してください。(また、<xref href="rrefjdbc20377.dita#rrefjdbc20377/jdbc31241"></xref>も参照してください。)</p></section>
<section><p>実際にストリームとして記録されているか否かにかかわらず、型に従いストリームとして取得することが可能か決まります。</p></section>
<section><p>次の例ではLONG VARCHARの列がストリームとして取得されます。   <codeblock expanse="column"><b><ph>// データをストリームとして取得する。</ph>
ResultSet rs = s.executeQuery("SELECT b FROM atable");
while (rs.next()) {
    <ph>// java.io.InputStreamを使ってデータを取得する。</ph>
    java.io.InputStream ip = rs.getAsciiStream(1);
    <ph>// ストリームを処理する。--これはデータを出力する</ph>
    <ph>// 一般的なやり方である。</ph>
    int c;
    int columnSize = 0;
    byte[] buff = new byte[128];
    for (;;) {
        int size = ip.read(buff);
        if (size == -1)
            break;
        columnSize += size;
        String chunk = new String(buff, 0, size);
        System.out.print(chunk);
    }
}
rs.close();
s.close();
conn.commit();</b></codeblock></p></section>
</refbody>
</reference>


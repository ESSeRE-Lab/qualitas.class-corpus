<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefjavsqlprst" xml:lang="ja">
<title>準備済み文と列のストリーミング</title>
<prolog><metadata>
<keywords><indexterm>setXXXStream requests</indexterm><indexterm>Streaming
columns<indexterm>as IN parameters to prepared statement</indexterm></indexterm>
<indexterm>setBinaryStream</indexterm><indexterm>setAsciiStream</indexterm>
<indexterm>setUnicodeStream</indexterm><indexterm>Unicode<indexterm>setUnicodeStream</indexterm></indexterm>
<indexterm>setBinaryStream</indexterm><indexterm>setAsciiStream</indexterm>
<indexterm>setUnicodeStream</indexterm><indexterm>Unicode<indexterm>setUnicodeStream</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p><i>setXXXStream</i>により、アプリケーションとデータベース間で情報を通信させることができます。</p></section>
<section><p>JDBCではINの引数に、Javaの入力ストリームをとって、大規模な情報を小分けにして渡すことができます。文が実行されると、JDBCドライバはこの入力ストリームへの呼び出しを繰り返します。
<ph conref="../conrefs.dita#prod/productshortname"></ph>ではJDBC 1.2が提供する三種類のストリームを利用することができます。
この三種類のストリームとは、
  <ul>
<li><i>setBinaryStream</i> <p>解釈されないバイトストリームに使われます。</p></li>
<li><i>setAsciiStream</i>   <p>ASCII文字のストリームに使われます。</p></li>
<li><i>setUnicodeStream</i>   <p>Unicode文字のストリームに使われます。</p></li>
</ul></p>
<p>JDBC 2.0やJDBC 3.0ではストリームの長さを指定する必要があります。<ph conref="../conrefs.dita#prod/productshortname"></ph>ではアプリケーションがJDK 1.5以前の環境で動作している時、この事は要件です。JDK1.6以降の環境では、<ph conref="../conrefs.dita#prod/productshortname"></ph>はJDBC4.0の実装を提供します。これによりストリーム長を指定する必要のないストリームのインターフェイスを使うことができます。
これらの三つのメソッドに渡すストリームオブジェクトは、標準のJavaストリームオブジェクトあるいは標準の<i>java.io.InputStream</i>インターフェイスを実装する、ユーザが定義したサブクラスの何れであっても構いません。
</p>
<p>
JDBCの標準に従い、ストリームは以下の表に記すデータ型の列に対してのみ記録できます。
<table frame="all" id="jdbc25312">
<title>ストリーム可能なJDBCのデータ型</title>
<tgroup cols="5" colsep="1" rowsep="1"><colspec colname="1" colnum="1" colwidth="22*"/>
<colspec colname="colspec0" colnum="2" colwidth="22*"/><colspec colname="2"
colnum="3" colwidth="15*"/><colspec colname="3" colnum="4" colwidth="18*"/>
<colspec colname="4" colnum="5" colwidth="20*"/>
<thead>
<row>
<entry colname="1">列のデータ型</entry>
<entry colname="colspec0">対応するJavaの型</entry>
<entry colname="2">AsciiStream</entry>
<entry colname="3">UnicodeStream</entry>
<entry colname="4">BinaryStream</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="1">CLOB</entry>
<entry colname="colspec0">java.sql.Clob</entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">CHAR</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">VARCHAR</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">LONGVARCHAR</entry>
<entry colname="colspec0"></entry>
<entry colname="2">X</entry>
<entry colname="3">X</entry>
<entry colname="4"></entry>
</row>
<row>
<entry colname="1">BINARY</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">x</entry>
</row>
<row>
<entry colname="1">BLOB</entry>
<entry colname="colspec0">java.sql.Blob</entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">x</entry>
</row>
<row>
<entry colname="1">VARBINARY</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">x</entry>
</row>
<row>
<entry colname="1">LONGVARBINARY</entry>
<entry colname="colspec0"></entry>
<entry colname="2">x</entry>
<entry colname="3">x</entry>
<entry colname="4">X</entry>
</row>
</tbody>
</tgroup>

</table></p><note><ul>
<li>この表にて大文字のXは、ストリームの型として推奨される対照型である事を表します。<xref href="rrefjdbc20377.dita#rrefjdbc20377/jdbc31241"></xref>を参照してください。</li>
<li>もしストリームの記録される列の型がLONG VARCHARないしLONG VARCHAR FOR BIT DATAの何れでも無い場合、ストリーム全体が一括してメモリに収まらなければなりません。
LONG VARCHARおよびLONG VARCHAR FOR BIT DATAの列に記録されるストリームについては、この制限はありません。</li>
<li>ストリームを他の組み込みデータ型やユーザが定義したデータ型に記録することはできません。</li>
</ul></note></section>
<section><p>以下の例は<i>java.io.File</i>をストリーム経由でLONG VARCHAR型の列に格納する方法を示します。   
<codeblock expanse="column">Statement s = conn.createStatement();
s.executeUpdate("CREATE TABLE atable (a INT, b LONG VARCHAR)");
conn.commit();
java.io.File file = new java.io.File("derby.txt");
int fileLength = (int) file.length();
<b>// まず入力ストリームを作ります。</b>
java.io.InputStream fin = new java.io.FileInputStream(file);
PreparedStatement ps = conn.prepareStatement(
    "INSERT INTO atable VALUES (?, ?)");
ps.setInt(1, 1);
<b>// 入力パラメータに入力ストリームを代入します。</b>
ps.setAsciiStream(2, fin, fileLength);
ps.execute();
conn.commit();</codeblock></p></section>
</refbody>
</reference>


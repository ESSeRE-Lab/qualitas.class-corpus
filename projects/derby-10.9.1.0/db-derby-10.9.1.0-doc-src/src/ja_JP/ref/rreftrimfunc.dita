<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rreftrimfunc" xml:lang="en-us">
<title>TRIM 関数</title>
<prolog><metadata>
<keywords><indexterm>functions<indexterm>TRIM</indexterm></indexterm>
<indexterm>TRIM function</indexterm></keywords>
</metadata></prolog>
<refbody>
<section>TRIMは文字式を引数にとる関数で、引数から前あるいは/および後の詰められた文字を取り除いた値を返します。省略可能な引数に文字を指定できて、この文字は取り除かれる、前あるいは後、あるいはその両方にある詰められた文字です。</section>
<refsyn><title>構文x</title> <codeblock>TRIM( [ <i>trimOperands</i> ] <i>trimSource</i>)</codeblock> 
<p>
<codeblock>
<i>trimOperands</i>  ::= { <i>trimType</i> [ <i>trimCharacter ] </i> FROM | <i>trimCharacter</i> FROM }
<i>trimType</i>      ::= { LEADING | TRAILING | BOTH }
<i>trimCharacter</i> ::= <i>文字式</i>
<i>trimSource</i>    ::= <i>文字式</i>
</codeblock>
</p><p>
<i>trimType</i>が指定されなかった場合、既定でBOTHとみなされます。<i>trimCharacter</i>が指定されなかった場合、既定で空白文字(' ')とみなされます。<i>trimCharacter</i>の値は以下のいずれかに評価されなければなりません。
	<ul>
	    <li>長さ一文字の文字列あるいは</li>
	    <li>NULL</li>
	</ul>
</p><p>
<i>trimCharacter</i>と<i>trimSource</i>がNULLと評価される場合、TRIM関数の結果はNULlです。さもなければTRIM関数の結果は以下のいずれかになります。
	<ul>
	<li>trimTypeがLEADINGなら、結果はtrimSourceの値の前からtrimCharを取り除いた値です。</li>
	<li>trimTypeがTRAILINGなら、結果はtrimSourceの値の後ろからtrimCharを取り除いた値です。</li>
	<li>trimTypeがBOTHなら、結果はtrimSourceの値の前*と*後からtrimCharを取り除いた値です。</li>
	</ul>
</p><p><i>trimSource</i>のデータ型がCHARあるいはVARCHARなら、TRIM関数の返り値の型はVARCHARです。それ以外の場合、TRIM関数の返り値の型はCLOBです。
</p>
</refsyn>
<example><title>例</title>
<p>
<codeblock><b><ph>-- 'derby'を返します。(空白はありません。)</ph>
VALUES TRIM('  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- 'derby'を返します。 (空白はありません。)</ph>
VALUES TRIM(BOTH ' ' FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- 'derby 'を返します。 (末尾に空白があります。)</ph>
VALUES TRIM(LEADING ' ' FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- '  derby'を返します。 (先頭に二つ空白があります。)</ph>
VALUES TRIM(TRAILING ' ' FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- NULLを返します。</ph>
VALUES TRIM(cast (null as char(1)) FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- NULLを返します。</ph>
VALUES TRIM(' ' FROM cast(null as varchar(30)))</b></codeblock> 
</p><p>
<codeblock><b><ph>-- ' derb'を返します。(先頭に空白がありあｍす。)</ph>
VALUES TRIM('y' FROM ' derby')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- <i>trimCharacter</i>には一文字しか指定できないのでエラーとなります。</ph>
VALUES TRIM('by' FROM ' derby')</b></codeblock> 
</p>
</example>
</refbody>
</reference>
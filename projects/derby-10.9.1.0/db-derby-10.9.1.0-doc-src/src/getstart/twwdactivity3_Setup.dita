<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
 "../dtd/task.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<task id="tgsactivity3_Setup" xml:lang="en-us">
<title>Activity 3: Run a JDBC program using the embedded driver</title>
<shortdesc>This activity loads the <ph conref="../conrefs.dita#prod/productshortname"></ph> database
engine using a simple Java JDBC program. </shortdesc>
<prolog><metadata>
<keywords><indexterm>WwdEmbedded.java program<indexterm>running</indexterm></indexterm>
<indexterm>CLASSPATH environment variable</indexterm></keywords>
</metadata></prolog>
<taskbody>
<prereq>This activity assumes that you have opened a command window and navigated
to the <codeph>DERBYTUTOR</codeph> directory.</prereq>
<context>JDBC is the Java Database Connectivity API and is also the native
API for <ph conref="../conrefs.dita#prod/productshortname"></ph>. The program
uses the embedded driver to create the <codeph>jdbcDemoDB</codeph> database
(if the database does not exist) and then connect to the database. You can
then populate a table within the database with text. The program demonstrates
some basic JDBC processing along with related error handling.  <p>The Java
compiler and runtime use the classpath, specified by the <codeph>CLASSPATH</codeph> environment
variable, to locate the binary files  (jar files and class files) that are
needed to run  <ph conref="../conrefs.dita#prod/productshortname"></ph> and
other Java  applications. Before performing this activity, you need to set
the classpath and compile the <codeph>WwdEmbedded.java</codeph> program.</p></context>
<steps>
<step><cmd>Copy the program files into the <codeph>DERBYTUTOR</codeph> directory
and set the <codeph>CLASSPATH</codeph> environment variable, as shown in the
following table.</cmd><stepxmp>
<table>
<title>Commands to copy the program files and set the <codeph>CLASSPATH</codeph>
environment variable</title>
<desc>This table lists the commands to copy the program files into the <codeph>DERBYTUTOR</codeph> directory and set the <codeph>CLASSPATH</codeph> environment variable on UNIX and Windows systems.</desc>
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="col1" colnum="1" colwidth="25*"/>
<colspec colname="col2" colnum="2" colwidth="75*"/>
<thead>
<row valign="bottom">
<entry colname="col1">Operating System</entry>
<entry colname="col2">Command</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1">UNIX (Korn Shell)</entry>
<entry colname="col2"><codeblock><b><userinput>cp $DERBY_HOME/demo/programs/workingwithderby/* .

export CLASSPATH=$DERBY_HOME/lib/derby.jar:.</userinput></b></codeblock></entry>
</row>
<row>
<entry colname="col1">Windows</entry>
<entry colname="col2"><codeblock><b><userinput>copy %DERBY_HOME%\demo\programs\workingwithderby\* .

set CLASSPATH=%DERBY_HOME%\lib\derby.jar;.</userinput></b></codeblock></entry>
</row>
</tbody>
</tgroup>
</table>
<note type="important">Include the dot (<codeph>.</codeph>)
at the end of each command so that your current working directory is included
in the classpath and the files are copied to the correct location. </note></stepxmp>
</step>
<step><cmd>Compile the program source files.</cmd>
<info> The sample program is contained in two source files:
<codeph>WwdEmbedded.java</codeph> and <codeph>WwdUtils.java</codeph>.
Issue the following command to compile both at the same time:</info>
<stepxmp>
<codeblock><b><userinput>javac WwdEmbedded.java WwdUtils.java</userinput></b></codeblock>
<note type="important">A command prompt appears if the compilation
is successful. The binary files <codeph>WwdEmbedded.class</codeph> and
<codeph>WwdUtils.class</codeph> are created.
If an error message appears, verify that the JDK is properly installed.</note> </stepxmp>
</step>
<step><cmd>Run the program.</cmd><info>The <xref href="rwwdactivity3.dita#rwwdactivity3"><codeph>WwdEmbedded.java</codeph> program</xref> populates
a table with wish-list items. The program prompts you for text input (up to
32 characters), stores the text input in a database table, and then lists
the items stored in the table. The program continues to ask for wish-list
items until the you type the command <codeph>exit</codeph> or a problem is
encountered. Some basic information on program progress is displayed at the
beginning and the end of  the program.</info><stepxmp> <codeblock><b><userinput>java WwdEmbedded</userinput></b>
<systemoutput>org.apache.derby.jdbc.EmbeddedDriver loaded.
Connected to database jdbcDemoDB
 . . . . creating table WISH_LIST
Enter wish-list item (enter exit to end):</systemoutput>
<b><userinput>a peppermint stick</userinput></b>
<systemoutput>  __________________________________________________
On 2011-03-02 17:41:52.531 I wished for a peppermint stick
  __________________________________________________
Enter wish-list item (enter exit to end):</systemoutput>
<b><userinput>a long vacation</userinput></b>
<systemoutput>  __________________________________________________
On 2011-03-02 17:41:52.531 I wished for a peppermint stick
On 2011-03-02 17:42:03.248 I wished for a long vacation
  __________________________________________________
Enter wish-list item (enter exit to end):</systemoutput>
<b><userinput>exit</userinput></b>
<systemoutput>Closed connection
Database shut down normally
Getting Started With Derby JDBC program ending.</systemoutput></codeblock></stepxmp>
</step>
</steps>
</taskbody>
</task>

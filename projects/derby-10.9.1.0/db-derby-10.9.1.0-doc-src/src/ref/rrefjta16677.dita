<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefjta16677" xml:lang="en-us">
<title>Java EE Compliance: Java Transaction API and javax.sql Interfaces</title>
<prolog><metadata>
<keywords><indexterm>Resource manager<indexterm>Derby as a Java EE system</indexterm></indexterm>
<indexterm>JNDI</indexterm>
<indexterm>javax.sql.DataSource</indexterm>
<indexterm>Connection pooling</indexterm>
<indexterm>javax.sql.ConnectionPoolDataSource</indexterm>
<indexterm>javax.sql.PooledConnection</indexterm>
<indexterm>XA</indexterm>
<indexterm>Distributed transaction management</indexterm>
<indexterm>javax.sql.XAxxx interfaces</indexterm>
<indexterm>java.transaction.xa package</indexterm></keywords>
</metadata></prolog>
<refbody>
<section><p>The Java 2 Platform, Enterprise Edition (the Java EE platform), is a
standard for development of enterprise applications based on reusable components
in a multi-tier environment. In addition to the features of the Java Platform,
Standard Edition (the Java SE platform), the Java EE platform adds support for
Enterprise JavaBeans (EJB) technology, the Java Persistence API, JavaServer
Faces technology, Java Servlet technology, JavaServer Pages (JSP) technology,
and many more. The Java EE platform architecture is used to bring together
existing technologies and enterprise applications in a single, manageable
environment.</p></section>
<section><p><ph conref="../conrefs.dita#prod/productshortname"></ph> is a
Java EE platform conformant component in a distributed Java EE system. As such,
<ph conref="../conrefs.dita#prod/productshortname"></ph> is
one part of a larger system that includes, among other things, a JNDI server,
a connection pool module, a transaction manager, a resource manager, and user
applications.  Within this system, <ph conref="../conrefs.dita#prod/productshortname"></ph> can
serve as the resource manager.</p>
<p>For more information on the Java EE platform, see
<xref format="html" href="http://www.oracle.com/technetwork/java/javaee/documentation/index.html"
scope="external">http://www.oracle.com/technetwork/java/javaee/documentation/index.html</xref>.
</p>
<p>In
order to qualify as a resource manager in a Java EE system, the Java EE
platform requires these basic areas of support:   <ul>
<li>JNDI support<p>Allows calling applications to register names for databases
and access them through those names instead of through database connection
URLs. Implementation of one of the JDBC interfaces, <i><xref href="rrefjta18596.dita#rrefjta18596/jta20722">javax.sql.DataSource</xref>,</i> provides
this support.</p></li>
<li>Connection pooling <p>A mechanism by which a connection pool server keeps
a set of open connections to a resource manager (<ph conref="../conrefs.dita#prod/productshortname"></ph>).
A user requesting a connection can get one of the available connections from
the pool. Such a connection pool is useful in client/server environments because
establishing a connection is relatively expensive. In an embedded environment,
connections are much cheaper, making the performance advantage of a connection
pool negligible. Implementation of two of the JDBC interfaces, <i><xref href="rrefjta18596.dita#rrefjta18596/jta96573">javax.sql.ConnectionPoolDataSource
and javax.sql.PooledConnection</xref></i>, provide this support.</p></li>
<li>XA support<p>XA is one of several standards for distributed transaction
management. It is based on two-phase commit. The <i>javax.sql.XAxxx</i> interfaces,
along with <i>java.transaction.xa</i> package, are an abstract implementation
of XA. For more information about XA, see <cite>X/Open CAE Specification-Distributed
Transaction Processing: The XA Specification</cite>, X/Open Document No. XO/CAE/91/300
or ISBN 1 872630 24 3. Implementation of the JTA API, the interfaces of the
java.transaction.xa package (<i><xref href="rrefjta18596.dita#rrefjta18596/jta18170">javax.sql.XAConnection</xref>,</i> <i><xref
href="rrefjta18596.dita#rrefjta18596/jta88962">javax.sql.XADataSource</xref>,</i> <i><xref
href="rrefjta51021.dita#rrefjta51021/jta18387">javax.transaction.xa.XAResource</xref>,</i> <i><xref
href="rrefjta51021.dita#rrefjta51021/jta75105">javax.transaction.xa.Xid</xref>,</i> and <i><xref
href="rrefjta51021.dita#rrefjta51021/jta93666">javax.transaction.xa.XAException</xref></i>),
provides this support.</p></li>
</ul></p><p>With the exception of the core JDBC interfaces, these interfaces
are not visible to the end-user application; instead, they are used only by
the other back-end components in the system.   <note>For information on the
classes that implement these interfaces and on how to use
<ph conref="../conrefs.dita#prod/productshortname"></ph> as a resource manager,
see "Using <ph conref="../conrefs.dita#prod/productshortname"></ph> as a Java EE
Resource Manager" in the <ph conref="../conrefs.dita#pub/citdevelop"></ph>.</note></p></section>
</refbody>
</reference>

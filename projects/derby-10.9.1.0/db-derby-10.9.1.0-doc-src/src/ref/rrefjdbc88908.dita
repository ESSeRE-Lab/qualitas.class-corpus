<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefjdbc88908" xml:lang="en-us">
<title>JDBC escape syntax for fn keyword</title>
<prolog><metadata>
<keywords><indexterm>fn<indexterm>JDBC escape keyword</indexterm></indexterm>
<indexterm>JDBC<indexterm>escape keyword</indexterm></indexterm>
<indexterm>escape keyword<indexterm>JDBC</indexterm></indexterm>
<indexterm>JDBC<indexterm>escape functions</indexterm></indexterm>
<indexterm>abs<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>acos<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>asin<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>atan<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>atan2<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>ceiling<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>cos<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>cot<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>degrees<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>exp<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>floor<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>log<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>log10<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>mod<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>pi<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>radians<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>rand<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>sign<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>sin<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>sqrt<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>tan<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>concat<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>lcase<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>length<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>locate<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>ltrim<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>rtrim<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>substring<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>ucase<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>curdate<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>curtime<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>hour<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>minute<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>month<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>second<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>TIMESTAMPADD function<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>TIMESTAMPDIFF function<indexterm>JDBC scalar function</indexterm></indexterm>
<indexterm>year<indexterm>JDBC scalar function</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section> <p>You can specify functions in JDBC escape syntax by using the
<codeph>fn</codeph> keyword.</p></section>
<refsyn><title>Syntax</title>
<codeblock><b>{fn <i>functionCall</i>}</b></codeblock>
<p>where <i>functionCall</i> is the name of one of the scalar functions listed
below. The functions are of the following types:</p>
<ul>
<li>Numeric functions</li>
<li>String functions</li>
<li>Date and time functions</li>
<li>System function</li>
</ul>
</refsyn>
<section><title>Numeric functions</title>
<dl><dlentry>
<dt>abs</dt>
<dd>Returns the absolute value of a number.
<codeblock><b>abs(<i>NumericExpression</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn abs(<i>NumericExpression</i>)}</codeph> is
equivalent to the built-in syntax <codeph>ABS(<i>NumericExpression</i>)</codeph>.
For more information, see <xref href="rrefsqlj98067.dita#rrefsqlj98067"></xref>.</p></dd>
</dlentry><dlentry>
<dt>acos</dt>
<dd>Returns the arc cosine of a specified number.
<codeblock><b>acos(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn acos(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>ACOS(<i>number</i>)</codeph>. For more
information, see <xref href="rreffuncacos.dita#rreffuncacos"></xref>.</p></dd>
</dlentry><dlentry>
<dt>asin</dt>
<dd>Returns the arc sine of a specified number.
<codeblock><b>asin(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn asin(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>ASIN(<i>number</i>)</codeph>. For more
information, see <xref href="rreffuncasin.dita#rreffuncasin"></xref>.</p></dd>
</dlentry><dlentry>
<dt>atan</dt>
<dd>Returns the arc tangent of a specified number.
<codeblock><b>atan(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn atan(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>ATAN(<i>number</i>)</codeph>. For more
information, see <xref href="rreffuncatan.dita#rreffuncatan"></xref>.</p></dd>
</dlentry><dlentry>
<dt>atan2</dt>
<dd>Returns the arc tangent in radians of <codeph><i>y</i>/<i>x</i></codeph>.
<codeblock><b>atan2(<i>y</i>, <i>x</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn atan2(<i>y</i>, <i>x</i>)}</codeph> is
equivalent to the built-in syntax <codeph>ATAN2(<i>y</i>, <i>x</i>)</codeph>.
For more information, see <xref href="rreffuncatan2.dita#rreffuncatan2"></xref>.</p></dd>
</dlentry><dlentry>
<dt>ceiling</dt>
<dd>Rounds the specified number up, and returns the smallest number that is
greater than or equal to the specified number.
<codeblock><b>ceiling(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn ceiling(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>CEILING(<i>number</i>)</codeph>. For
more information, see <xref href="rreffuncceil.dita#rreffuncceil"></xref>.</p></dd>
</dlentry><dlentry>
<dt>cos</dt>
<dd>Returns the cosine of a specified number.
<codeblock><b>cos(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn cos(<i>number</i>)}</codeph> is equivalent
to the built-in syntax <codeph>COS(<i>number</i>)</codeph>. For more
information, see <xref href="rreffunccos.dita#rreffunccos"></xref>.</p></dd>
</dlentry><dlentry>
<dt>cot</dt>
<dd>Returns the cotangent of a specified number.
<codeblock><b>cot(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn cot(<i>number</i>)}</codeph> is equivalent
to the built-in syntax <codeph>COT(<i>number</i>)</codeph>. For more
information, see <xref href="rreffunccot.dita#rreffunccot"></xref>.</p></dd>
</dlentry><dlentry>
<dt>degrees</dt>
<dd>Converts a specified number from radians to degrees.
<codeblock><b>degrees(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn degrees(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>DEGREES(<i>number</i>)</codeph>. For
more information, see <xref href="rreffuncdegrees.dita#rreffuncdegrees"></xref>.</p></dd>
</dlentry><dlentry>
<dt>exp</dt>
<dd>Returns <term>e</term> raised to the power of the specified number.
<codeblock><b>exp(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn exp(<i>number</i>)}</codeph> is equivalent
to the built-in syntax <codeph>EXP(<i>number</i>)</codeph>. For more
information, see <xref href="rreffuncexp.dita#rreffuncexp"></xref>.</p></dd>
</dlentry><dlentry>
<dt>floor</dt>
<dd>Rounds the specified number down, and returns the largest number that
is less than or equal to the specified number.
<codeblock><b>floor(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn floor(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>FLOOR(<i>number</i>)</codeph>. For
more information, see <xref href="rreffuncfloor.dita#rreffuncfloor"></xref>.</p></dd>
</dlentry><dlentry>
<dt>log</dt>
<dd>Returns the natural logarithm (base <term>e</term>) of the specified number.
<codeblock><b>log(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn log(<i>number</i>)}</codeph> is equivalent
to the built-in syntax <codeph>LOG(<i>number</i>)</codeph>. For more
information, see <xref href="rreffunclog.dita#rreffunclog"></xref>.</p></dd>
</dlentry><dlentry>
<dt>log10</dt>
<dd>Returns the base-10 logarithm of the specified number.
<codeblock><b>log10(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn log10(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>LOG10(<i>number</i>)</codeph>. For
more information, see <xref href="rreffunclog10.dita#rreffunclog10"></xref>.</p></dd>
</dlentry><dlentry>
<dt>mod</dt>
<dd> Returns the remainder (modulus) of argument 1 divided by argument 2.
The result is negative only if argument 1 is negative.
<codeblock><b>mod(<i>integer_type</i>, <i>integer_type</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn mod(<i>integer_type</i>, <i>integer_type</i>)}</codeph> is
equivalent to the built-in syntax
<codeph>MOD(<i>integer_type</i>, <i>integer_type</i>)</codeph>. For more
information, see <xref href="rrefsqljmod.dita#rrefsqljmod"></xref>.</p></dd>
</dlentry><dlentry>
<dt>pi</dt>
<dd>Returns a value that is closer than any other value to <term>pi</term>.
<codeblock><b>pi()</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn pi()}</codeph> is equivalent to the
built-in syntax <codeph>PI()</codeph>. For more information, see
<xref href="rreffuncpi.dita#rreffuncpi"></xref>.</p></dd>
</dlentry><dlentry>
<dt>radians</dt>
<dd>Converts a specified number from degrees to radians.
<codeblock><b>radians(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn radians(<i>number</i>)}</codeph> is
equivalent to the built-in syntax <codeph>RADIANS(<i>number</i>)</codeph>. For
more information, see <xref href="rreffuncradians.dita#rreffuncradians"></xref>.</p></dd>
</dlentry><dlentry>
<dt>rand</dt>
<dd>Returns a random number given a seed number.
<codeblock><b>rand(<i>seed</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn rand(<i>seed</i>)}</codeph> is equivalent
to the built-in syntax <codeph>RAND(<i>seed</i>)</codeph>. For more
information, see <xref href="rreffuncrand.dita#rreffuncrand"></xref>.</p></dd>
</dlentry><dlentry>
<dt>sign</dt>
<dd>Returns an integer that represents the sign of a specified number (+1 if the
number is positive, -1 if it is negative, 0 if it is 0).
<codeblock><b>sign(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn sign(<i>number</i>)}</codeph> is equivalent
to the built-in syntax <codeph>SIGN(<i>number</i>)</codeph>. For more
information, see <xref href="rreffuncsign.dita#rreffuncsign"></xref>.</p></dd>
</dlentry><dlentry>
<dt>sin</dt>
<dd>Returns the sine of a specified number.
<codeblock><b>sin(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn sin(<i>number</i>)}</codeph> is equivalent
to the built-in syntax <codeph>SIN(<i>number</i>)</codeph>. For more
information, see <xref href="rreffuncsin.dita#rreffuncsin"></xref>.</p></dd>
</dlentry><dlentry>
<dt>sqrt</dt>
<dd>Returns the square root of a floating-point number.
<codeblock><b>sqrt(<i>FloatingPointExpression</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn sqrt(<i>FloatingPointExpression</i>)}</codeph> is equivalent to the
built-in syntax <codeph>SQRT(<i>FloatingPointExpression</i>)</codeph>. For more
information, see <xref href="rrefsqlj73147.dita#rrefsqlj73147"></xref>.</p></dd>
</dlentry><dlentry>
<dt>tan</dt>
<dd>Returns the tangent of a specified number.
<codeblock><b>tan(<i>number</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn tan(<i>number</i>)}</codeph> is equivalent
to the built-in syntax <codeph>TAN(<i>number</i>)</codeph>. For more
information, see <xref href="rreffunctan.dita#rreffunctan"></xref>.</p></dd>
</dlentry></dl></section>
<section><title>String functions</title>
<dl><dlentry>
<dt>concat</dt>
<dd>Returns the concatenation of character strings; that is, the character
string formed by appending the second string to the first string. If either
string is null, the result is NULL. 
<codeblock><b>concat(<i>CharacterExpression</i>, <i>CharacterExpression</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn concat(<i>CharacterExpression</i>,
<i>CharacterExpression</i>)}</codeph> is equivalent to the built-in syntax
<codeph><i>CharacterExpression</i> || <i>CharacterExpression</i></codeph>. For more
information, see <xref href="rrefsqlj40899.dita#rrefsqlj40899"></xref>.</p></dd>
</dlentry><dlentry>
<dt>lcase</dt>
<dd>Returns a string in which all alphabetic characters in the argument have
been converted to lowercase. 
<codeblock><b>lcase(<i>CharacterExpression</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn lcase(<i>CharacterExpression</i>)}</codeph> is equivalent to the
built-in syntax <codeph>LCASE(<i>CharacterExpression</i>)</codeph>. For more
information, see <xref href="rrefsqlj42049.dita#rrefsqlj42049"></xref>.</p></dd>
</dlentry><dlentry>
<dt>length</dt>
<dd>Returns the number of characters in a character string expression. 
<codeblock><b>length(<i>CharacterExpression</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn length(<i>CharacterExpression</i>)}</codeph> is equivalent to the
built-in syntax <codeph>LENGTH(<i>CharacterExpression</i>)</codeph>. For more
information, see <xref href="rrefsqlj16762.dita#rrefsqlj16762"></xref>.</p></dd>
</dlentry><dlentry>
<dt>locate</dt>
<dd>Returns the position in the second <i>CharacterExpression</i> of the first
occurrence of the first <i>CharacterExpression</i>. Searches from the beginning
of the second <i>CharacterExpression</i>, unless the <i>startIndex</i> parameter
is specified.
<codeblock><b>locate(<i>CharacterExpression</i>,<i>CharacterExpression</i> [, <i>startIndex</i>] )</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn locate(<i>CharacterExpression</i>, <i>CharacterExpression</i>
[, <i>startIndex</i>] )}</codeph> is equivalent to the built-in syntax
<codeph>LOCATE(<i>CharacterExpression</i>, <i>CharacterExpression</i>
[, <i>StartPosition]</i> )</codeph>. For more information, see
<xref href="rrefsqlj61998.dita#rrefsqlj61998"></xref>.</p></dd>
</dlentry><dlentry>
<dt>ltrim</dt>
<dd>Removes blanks from the beginning of a character string expression.
<codeblock><b>ltrim(<i>CharacterExpression</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn ltrim(<i>CharacterExpression</i>)}</codeph> is equivalent to the
built-in syntax <codeph>LTRIM(<i>CharacterExpression</i>)</codeph>. For more
information, see <xref href="rrefsqlj97870.dita#rrefsqlj97870"></xref>.</p></dd>
</dlentry><dlentry>
<dt>rtrim</dt>
<dd>Removes blanks from the end of a character string expression.
<codeblock><b>rtrim(<i>CharacterExpression</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn rtrim(<i>CharacterExpression</i>)}</codeph> is equivalent to the
built-in syntax <codeph>RTRIM(<i>CharacterExpression</i>)</codeph>. For more
information, see <xref href="rrefsqlj32613.dita#rrefsqlj32613"></xref>.</p></dd>
</dlentry><dlentry>
<dt>substring</dt>
<dd>Forms a character string by extracting <i>length</i> characters from the
<i>CharacterExpression</i> beginning at <i>startIndex</i>. The index of the
first character in the <i>CharacterExpression</i> is 1.
<codeblock><b>substring(<i>CharacterExpression</i>, <i>startIndex</i>, <i>length</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn substring(<i>CharacterExpression</i>, <i>startIndex</i>,
<i>length</i>)}</codeph> is equivalent to the built-in syntax
<codeph>SUBSTR(<i>CharacterExpression</i>, <i>startIndex</i>,
<i>length</i>)</codeph>. For more information, see
<xref href="rrefsqlj93082.dita#rrefsqlj93082"></xref>.</p></dd>
</dlentry><dlentry>
<dt>ucase</dt>
<dd>Returns a string in which all alphabetic characters in the argument have
been converted to uppercase. 
<codeblock><b>ucase(<i>CharacterExpression</i>)</b></codeblock>
<p>The JDBC escape syntax
<codeph>{fn ucase(<i>CharacterExpression</i>)}</codeph> is equivalent to the
built-in syntax <codeph>UCASE(<i>CharacterExpression</i>)</codeph>. For more
information, see <xref href="rrefsqlj29930.dita#rrefsqlj29930"></xref>.</p></dd>
</dlentry>
</dl>
</section>
<section><title>Date and time functions</title>
<dl><dlentry>
<dt>curdate</dt>
<dd>Returns the current date.
<codeblock><b>curdate()</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn curdate()}</codeph> is equivalent to the
built-in syntax <codeph>CURRENT_DATE</codeph>. For more information, see
<xref href="rrefsqlj34177.dita#rrefsqlj34177"></xref>.</p></dd>
</dlentry><dlentry>
<dt>curtime</dt>
<dd>Returns the current time.
<codeblock><b>curtime()</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn curtime()}</codeph> is equivalent to the
built-in syntax <codeph>CURRENT_TIME</codeph>. For more information, see
<xref href="rrefsqlj33772.dita#rrefsqlj33772"></xref>.</p></dd>
</dlentry><dlentry>
<dt>hour</dt>
<dd>Returns the hour part of a time value.
<codeblock><b>hour(<i>expression</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn hour(<i>expression</i>)}</codeph> is
equivalent to the built-in syntax <codeph>HOUR(<i>expression</i>)</codeph>. For
more information, see <xref href="rrefhourfunc.dita#rrefhourfunc"></xref>.</p></dd>
</dlentry><dlentry>
<dt>minute</dt>
<dd>Returns the minute part of a time value.
<codeblock><b>minute(<i>expression</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn minute(<i>expression</i>)}</codeph> is
equivalent to the built-in syntax <codeph>MINUTE(<i>expression</i>)</codeph>.
For more information, see
<xref href="rrefminutefunc.dita#rrefminutefunc"></xref>.</p></dd>
</dlentry><dlentry>
<dt>month</dt>
<dd>Returns the month part of a date value.
<codeblock><b>month(<i>expression</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn month(<i>expression</i>)}</codeph> is
equivalent to the built-in syntax <codeph>MONTH(<i>expression</i>)</codeph>.
For more information, see
<xref href="rrefmonthfunc.dita#rrefmonthfunc"></xref>.</p></dd>
</dlentry><dlentry>
<dt>second</dt>
<dd>Returns the seconds part of a time value.
<codeblock><b>second(<i>expression</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn second(<i>expression</i>)}</codeph> is
equivalent to the built-in syntax <codeph>SECOND(<i>expression</i>)</codeph>.
For more information, see
<xref href="rrefsecondfunc.dita#rrefsecondfunc"></xref>.</p></dd>
</dlentry><dlentry>
<dt>TIMESTAMPADD</dt>
<dd>Use the <codeph>TIMESTAMPADD</codeph> function to add the value of an
interval to a timestamp. The function applies the integer to the specified
timestamp based on the interval type and returns the sum as a new timestamp.
You can subtract from the timestamp by using negative integers.
<p><codeph>TIMESTAMPADD</codeph> is a JDBC escaped function and is accessible
only by using the JDBC escape function syntax.</p>
<codeblock><b>TIMESTAMPADD( <i>interval</i>, <i>integerExpression</i>, <i>timestampExpression</i> )</b></codeblock>
<p>To perform <codeph>TIMESTAMPADD</codeph> on dates and times, it is necessary
to convert the dates and times to timestamps. Dates are converted to timestamps
by putting 00:00:00.0 in the time-of-day fields. Times are converted to
timestamps by putting the current date in the date fields.</p>
<p>Do not put a datetime column inside a timestamp arithmetic function in WHERE
clauses, because the optimizer will not use any index on the column.</p></dd>
</dlentry><dlentry>
<dt>TIMESTAMPDIFF</dt>
<dd>Use the <codeph>TIMESTAMPDIFF</codeph> function to find the difference
between two timestamp values at a specified interval. For example, the function
can return the number of minutes between two specified timestamps.
<p>The <codeph>TIMESTAMPDIFF</codeph> is a JDBC escaped function and is
accessible only by using the JDBC escape function syntax.</p>
<codeblock><b>TIMESTAMPDIFF( <i>interval</i>, <i>timestampExpression1</i>, <i>timestampExpression2</i> )</b></codeblock>
<p>To perform <codeph>TIMESTAMPDIFF</codeph> on dates and times, it is necessary
to convert the dates and times to timestamps. Dates are converted to timestamps
by putting 00:00:00.0 in the time-of-day fields. Times are converted to
timestamps by putting the current date in the date fields.</p>
<p>Do not put a datetime column inside a timestamp arithmetic function in WHERE
clauses, because the optimizer will not use any index on the column.</p></dd>
</dlentry><dlentry>
<dt>year</dt>
<dd>Returns the year part of a date value.
<codeblock><b>year(<i>expression</i>)</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn year(<i>expression</i>)}</codeph> is
equivalent to the built-in syntax <codeph>YEAR(<i>expression</i>)</codeph>.
For more information, see
<xref href="rrefyearfunc.dita#rrefyearfunc"></xref>.</p></dd>
</dlentry>
</dl>
</section>
<section><title>Valid intervals for TIMESTAMPADD and TIMESTAMPDIFF</title>
The <codeph>TIMESTAMPADD</codeph> and <codeph>TIMESTAMPDIFF</codeph> functions
are used to perform arithmetic with timestamps. These two functions use the
following valid intervals for arithmetic operations:<ul>
<li>SQL_TSI_DAY</li>
<li>SQL_TSI_FRAC_SECOND</li>
<li>SQL_TSI_HOUR</li>
<li>SQL_TSI_MINUTE</li>
<li>SQL_TSI_MONTH</li>
<li>SQL_TSI_QUARTER</li>
<li>SQL_TSI_SECOND</li>
<li>SQL_TSI_WEEK</li>
<li>SQL_TSI_YEAR</li>
</ul></section>
<example><title>Examples for the TIMESTAMPADD and TIMESTAMPDIFF escape functions </title>
<p>To return a timestamp value one month later than the current timestamp, use
the following syntax:</p>
<codeblock><b>{fn TIMESTAMPADD( SQL_TSI_MONTH, 1, CURRENT_TIMESTAMP)}</b></codeblock>
<p>To return the number of weeks between now and the specified time on January
1, 2008, use the following syntax:</p>
<codeblock><b>{fn TIMESTAMPDIFF(SQL_TSI_WEEK, CURRENT_TIMESTAMP, 
  timestamp('2008-01-01-12.00.00.000000'))}</b></codeblock></example>
<section><title>System function</title>
<dl><dlentry>
<dt>user</dt>
<dd>Returns the authorization identifier or name of the current user. If there
is no current user, it returns APP.
<codeblock><b>user()</b></codeblock>
<p>The JDBC escape syntax <codeph>{fn user()}</codeph> is equivalent to the
built-in syntax <codeph>USER</codeph>. For more information, see
<xref href="rrefsqlj42476.dita#rrefsqlj42476"></xref>.</p></dd>
</dlentry>
</dl>
</section>
</refbody>
</reference>

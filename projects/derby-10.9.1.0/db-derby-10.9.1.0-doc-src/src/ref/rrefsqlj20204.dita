<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqlj20204" xml:lang="en-us">
<title>Storing values of one numeric data type in columns of another numeric
data type</title>
<refbody>
<section><p>An attempt to put a floating-point type of a larger storage size
into a location of a smaller size fails only if the value cannot be stored
in the smaller-size location. For example:   <codeblock><b>create table mytable (r REAL, d DOUBLE PRECISION);</b>
0 rows inserted/updated/deleted
<b>INSERT INTO mytable (r, d) values (3.4028236E38, 3.4028235E38);</b>
ERROR X0X41: The number '3.4028236E38' is outside the range for
the data type REAL.</codeblock></p></section>
<section><p>You can store a floating point type in an INTEGER column; the
fractional part of the number is truncated. For example:   <codeblock><b><ph>INSERT INTO mytable(integer_column) values (1.09e0);</ph>
1 row inserted/updated/deleted
<ph>SELECT integer_column
FROM mytable;</ph>
I
---------------
1</b></codeblock></p></section>
<section><p>Integer types can always be placed successfully in approximate
numeric values, although with the possible loss of some precision.</p></section>
<section><p>Integers can be stored in decimals if the DECIMAL precision is
large enough for the value. For example:   <codeblock><b>ij&gt; <ph>insert into mytable (decimal_column)
VALUES (55555555556666666666);</ph>
ERROR X0Y21: The number '55555555556666666666' is outside the
range of the target DECIMAL/NUMERIC(5,2) datatype.</b></codeblock></p></section>
<section><p>An attempt to put an integer value of a larger storage size into
a location of a smaller size fails if the value cannot be stored in the smaller-size
location. For example:   <codeblock><b><ph>INSERT INTO mytable (int_column) values 2147483648;</ph>
ERROR 22003: The resulting value is outside the range for the 
data type INTEGER.</b></codeblock></p></section>
<section> <note>When truncating trailing digits from a NUMERIC value, <ph
conref="../conrefs.dita#prod/productshortname"></ph> rounds down.</note></section>
</refbody>
</reference>


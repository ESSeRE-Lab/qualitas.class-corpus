<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefsqlj18922" xml:lang="en-us">
<title>LEFT OUTER JOIN operation</title>
<prolog><metadata>
<keywords><indexterm>LEFT OUTER JOIN operation</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>A LEFT OUTER JOIN is one of the <xref href="rrefsqlj29840.dita#rrefsqlj29840">JOIN
operations</xref> that allow you to specify a join clause. It preserves the
unmatched rows from the first (left) table, joining them with a NULL row in
the shape of the second (right) table.</p></section>
<refsyn><title>Syntax</title><codeblock><b><i><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i> LEFT [ OUTER ] JOIN <i
><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i>
{
    ON <i>booleanExpression</i> |
    <i><xref href="rrefsqljusing.dita#rrefsqljusing">USING clause</xref></i>
}</b></codeblock>

<p>The scope of expressions in either the ON clause includes
the current tables and any tables in query blocks outer to the current SELECT.
 The ON clause can reference tables not being joined and does not have to
reference either of the tables being joined (though typically it does).</p> </refsyn>
<example><title>Example 1</title>
<codeblock><b>-- match cities to countries in Asia</b>

SELECT CITIES.COUNTRY, CITIES.CITY_NAME, REGION 
FROM Countries 
LEFT OUTER JOIN Cities
ON CITIES.COUNTRY_ISO_CODE = COUNTRIES.COUNTRY_ISO_CODE
WHERE REGION = 'Asia'

<b>-- use the synonymous syntax, LEFT JOIN, to achieve exactly 
-- the same results as in the example above
</b>
SELECT  COUNTRIES.COUNTRY, CITIES.CITY_NAME,REGION 
FROM COUNTRIES 
LEFT JOIN CITIES 
ON CITIES.COUNTRY_ISO_CODE = COUNTRIES.COUNTRY_ISO_CODE
WHERE REGION = 'Asia'
</codeblock></example>
<example><title>Example 2</title>
<codeblock><b>-- Join the EMPLOYEE and DEPARTMENT tables, 
-- select the employee number (EMPNO), 
-- employee surname (LASTNAME), 
-- department number (WORKDEPT in the EMPLOYEE table
-- and DEPTNO in the DEPARTMENT table) 
-- and department name (DEPTNAME) 
-- of all employees who were born (BIRTHDATE) earlier than 1930
</b>
SELECT EMPNO, LASTNAME, WORKDEPT, DEPTNAME 
   FROM SAMP.EMPLOYEE LEFT OUTER JOIN SAMP.DEPARTMENT 
   ON WORKDEPT = DEPTNO 
   AND YEAR(BIRTHDATE) &lt; 1930

<b>-- List every department with the employee number and 
-- last name of the manager,
-- including departments without a manager
</b>
SELECT DEPTNO, DEPTNAME, EMPNO, LASTNAME
      FROM DEPARTMENT LEFT OUTER JOIN EMPLOYEE
	    ON MGRNO = EMPNO</codeblock> </example>
</refbody>
</reference>

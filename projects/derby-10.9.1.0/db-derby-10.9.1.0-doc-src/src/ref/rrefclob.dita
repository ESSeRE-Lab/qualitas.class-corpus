<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefclob" xml:lang="en-us">
<title>CLOB data type</title>
<prolog><metadata>
<keywords><indexterm>CLOB data type</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>A CLOB (character large object) value can be up to 2,147,483,647
characters long. A CLOB is used to store unicode character-based data, such
as large documents in any character set.</p><p>The length is given in number
characters for both CLOB, unless one of the suffixes K, M, or G is given,
relating to the multiples of 1024, 1024*1024, 1024*1024*1024 respectively. </p>Length
is specified in characters (unicode) for CLOB.</section>
<refsyn><title>Syntax</title><codeblock><b>{CLOB |CHARACTER LARGE OBJECT} [ ( length [{K |M |G}] ) ]</b></codeblock> </refsyn>
<section><title>Default</title><p>A CLOB without a specified length is defaulted
to two giga characters (2,147,483,647).</p> </section>
<section><title>Corresponding compile-time Java type</title><p><i>java.sql.Clob</i></p> </section>
<section><title>JDBC metadata type (java.sql.Types)</title><p>CLOB</p><p>Use
the <i>getClob</i> method on the <i>java.sql.ResultSet</i> to retrieve a CLOB
handle to the underlying data.</p> </section>
<section><title>Related information</title><p>See <xref href="rrefjdbc96386.dita#rrefjdbc96386"></xref>. </p> </section>
<example><title>Example</title>
<codeblock>        String url = "jdbc:derby:clobberyclob;create=true";
        Connection conn = DriverManager.getConnection(url);

        Statement s = conn.createStatement();
        s.executeUpdate(
            "CREATE TABLE documents (id INT, text CLOB)");

        // - first, create an input stream
        InputStream fis = new FileInputStream("asciifile.txt");

        PreparedStatement ps = conn.prepareStatement(
            "INSERT INTO documents VALUES (?, ?)");
        ps.setInt(1, 1477);

        // - set the value of the input parameter to the input stream
        ps.setAsciiStream(2, fis);
        ps.execute();

        // --- reading the columns back
        ResultSet rs = s.executeQuery(
            "SELECT text FROM documents WHERE id = 1477");

        while (rs.next()) {
            Clob aclob = rs.getClob(1);
            InputStream ip = aclob.getAsciiStream();

            for (int c = ip.read(); c != -1; c = ip.read()) {
                System.out.print((char)c);
            }

            ip.close();
        }
        s.close();
        ps.close();
        rs.close();
        conn.close();</codeblock> </example>
</refbody>
</reference>

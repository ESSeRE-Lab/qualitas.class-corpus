<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqlj61998" xml:lang="en-us">
<title>LOCATE function</title>
<prolog><metadata>
<keywords><indexterm>LOCATE function</indexterm></keywords>
</metadata></prolog>
<refbody>
    <section>
        <p>The LOCATE function is used to search for a string within
            another string. If the desired string is found,
LOCATE returns the index at which it is found.
If the desired string is not found, LOCATE returns 0. </p></section>
<refsyn><title>Syntax</title> <codeblock id="i1195050"><b>LOCATE(<i>CharacterExpression</i>, <i>CharacterExpression</i> [, <i>StartPosition</i>] ) </b>
        </codeblock>
        <p>There are two required arguments to the LOCATE function,
        and a third optional argument.
        <ul>
            <li>The first CharacterExpression specifies the string to
                search <b>for</b>.</li>
            <li>The second CharacterExpression specifies
                the string <b>in which</b> to search.</li>
            <li>The third argument is the startPosition, and specifies
                the position in the second argument at which the search is
                to start. If the third argument is not provided, the LOCATE
                function starts its search at the beginning of the second
                argument.</li>
    </ul></p>
    <p>The return type for LOCATE is an integer. The LOCATE function
        returns an integer indicating the index position within the
        second argument at which the first argument was first located. Index
        positions start with 1.
        If the first argument is not found in the second argument, LOCATE
        returns 0. If the first argument is an empty string (''), LOCATE
        returns the value of the third argument (or 1 if it was not provided),
        even if the second argument is also an empty string. If a NULL
        value is passed for either of the CharacterExpression arguments,
        NULL is returned.</p>
</refsyn>
<example><title>Examples</title>
<codeblock><b><ph>-- returns 2, since 'love' is found at index position 2:</ph>
VALUES LOCATE('love', 'clover')</b></codeblock>
<codeblock><b><ph>-- returns 0, since 'stove' is not found in 'clover':</ph>
VALUES LOCATE('stove', 'clover')</b></codeblock>
<codeblock><b><ph>-- returns 5 (note the start position is 4):</ph>
VALUES LOCATE('iss', 'Mississippi', 4)</b></codeblock>
<codeblock><b><ph>-- returns 1, because the empty string is a special case:</ph>
VALUES LOCATE('', 'ABC')</b></codeblock>
<codeblock><b><ph>-- returns 0, because 'AAA' is not found in '':</ph>
VALUES LOCATE('AAA', '')</b></codeblock>
<codeblock><b><ph>-- returns 3</ph>
VALUES LOCATE('', '', 3)</b></codeblock>
</example>
</refbody>
</reference>


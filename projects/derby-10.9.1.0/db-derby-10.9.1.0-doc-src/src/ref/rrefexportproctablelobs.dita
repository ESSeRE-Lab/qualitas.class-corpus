<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefexportproclobs" xml:lang="en-us">
<title>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE system procedure</title>
<shortdesc>Use the <codeph>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</codeph> system
procedure to export all the data from a table, and place the LOB data into
a separate export file. A reference to the location of the LOB data is placed
in the LOB column in the main export file.</shortdesc>
<prolog><metadata>
<keywords><indexterm>system procedures<indexterm>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE</indexterm></indexterm>
<indexterm>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE<indexterm>system
procedures</indexterm></indexterm></keywords>
</metadata></prolog>
<refbody>
<section><p>For security concerns, and to avoid accidental file damage, this
EXPORT procedure  does not export data into an existing file. You must specify
a filename in the  EXPORT procedure that does not exist. When you run the
procedure the file is created and the data is exported  into the new file.</p><p>The
data is exported using a delimited file format.</p></section>
<section><title>Syntax</title> <codeblock>SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE (
    IN SCHEMANAME VARCHAR(128), 
    IN TABLENAME VARCHAR(128), 
    IN FILENAME VARCHAR(32672), 
    IN COLUMNDELIMITER CHAR(1), 
    IN CHARACTERDELIMITER CHAR(1), 
    IN CODESET VARCHAR(128) 
    IN LOBSFILENAME VARCHAR(32672)
    ) </codeblock> <p>When you run this procedure, the column data is written
to the main export file in a delimited data file format.</p><dl><dlentry>
<dt>SCHEMANAME</dt>
<dd>Specifies the schema of the table. You can specify a NULL value to use
the default schema name. The <parmname>SCHEMANAME</parmname> parameter takes
an input argument that is a VARCHAR (128) data type.</dd>
</dlentry><dlentry>
<dt>TABLENAME</dt>
<dd>Specifies the table name of the table or view from which the data is to
be exported. This table cannot be a system table or a declared temporary table.
 The string must exactly match the case of the table name. Specifying a NULL
value results in an error. The <parmname>TABLENAME</parmname> parameter takes
an input argument that is a VARCHAR (128) data type.</dd>
</dlentry><dlentry>
<dt>FILENAME</dt>
<dd>Specifies the name of a new file to which the data is to be exported.
If the path is omitted, the current working directory is used. If the name
of a file that already exists is specified, the export procedure returns an
error. The specified location of the file should refer to the server-side
location if you are using the Network Server. Specifying a NULL value results
in an error. The <parmname>FILENAME</parmname> parameter takes an input argument
that is a VARCHAR (32672) data type.</dd>
</dlentry><dlentry>
<dt>COLUMNDELIMITER</dt>
<dd>Specifies a column delimiter. The specified character is used in place
of a comma to signify the end of a column. You can specify a NULL value to
use the default value of a comma. The <parmname>COLUMNDELIMITER</parmname> parameter
must be a CHAR (1) data type.</dd>
</dlentry><dlentry>
<dt>CHARACTERDELIMITER</dt>
<dd>Specifies a character delimiter.  The specified character is used in place
of double quotation marks to enclose a character string. You can specify a
NULL value to use the default value of a double quotation mark. The <parmname>CHARACTERDELIMITER</parmname> parameter
takes an input argument that is a CHAR (1) data type.</dd>
</dlentry><dlentry>
<dt>CODESET</dt>
<dd>Specifies the code set of the data in the export file. The code set name
should be one of the Java-supported character encoding sets.  Data is converted
from the database code page to the specified code page before writing to the
file. You can specify a NULL value to write the data in the same code page
as the JVM in which it is being executed. The <parmname>CODESET</parmname> parameter
takes an input argument that is a VARCHAR (128) data type.</dd>
</dlentry><dlentry>
<dt>LOBSFILENAME</dt>
<dd>Specifies the file that the large object data is exported to. If  the
path is omitted, the  lob file is created in the same directory as the main
export file. If you specify the name of an existing file, the export utility
overwrites the contents of the file. The data is not appended to the file.
If you are using the Network Server, the file should be in a server-side location.
Specifying a NULL value results in an error. The <parmname>LOBSFILENAME</parmname> parameter
takes an input argument that is a VARCHAR (32672) data type.</dd>
</dlentry></dl><p>If you create a schema, table, or column name as a non-delimited
identifier, you must pass the name to the export procedure using all uppercase
characters. If you created a schema or table name as a delimited identifier,
you must pass the name to the export procedure using the same case that was
used when it was created.</p></section>
<section><title>Execute privileges</title>
<p>If authentication and SQL authorization are both enabled, only the
<xref href="rrefattrib26867.dita#rrefattrib26867">database owner</xref> has
execute privileges on this procedure by default. See "Enabling user
authentication" and "Setting the SQL standard authorization mode" in the
<ph conref="../conrefs.dita#pub/citdevelop"></ph> for more information. The
database owner can grant access to other users. The user must also have SELECT
privileges on the table.</p>
</section>
<section><title>Usage</title>
<p>For additional information on using this procedure, see the section
"Importing and exporting data" in the
<ph conref="../conrefs.dita#pub/citadmin"></ph>.</p></section>
<section><title>Example exporting all data from a table, using a separate
export file for the LOB data</title><p>The following example shows how to
export data from the STAFF table in a sample database to the main file <codeph>staff.del</codeph> and
the LOB export file <codeph>pictures.dat</codeph>.</p><codeblock>CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE(
    'APP', 'STAFF', 'c:\data\staff.del', ',' ,'"', 
    'UTF-8', 'c:\data\pictures.dat'); </codeblock></section>
</refbody>
</reference>

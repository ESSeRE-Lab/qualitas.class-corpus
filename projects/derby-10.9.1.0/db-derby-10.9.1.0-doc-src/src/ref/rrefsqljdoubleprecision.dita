<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqljdoubleprecision" xml:lang="en-us">
<title>DOUBLE PRECISION data type</title>
<prolog><metadata>
<keywords><indexterm>DOUBLE PRECISION data type</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>The DOUBLE PRECISION data type provides 8-byte storage for numbers
using IEEE floating-point notation. </p></section>
<refsyn><title>Syntax</title> <codeblock><b>DOUBLE PRECISION</b></codeblock> <p>or,
alternately</p> <codeblock><b>DOUBLE</b></codeblock> <p>DOUBLE can be used
synonymously with DOUBLE PRECISION.</p> </refsyn>
<section><title>Limitations</title> <p>DOUBLE value ranges:</p> <ul>
<li>Smallest DOUBLE value: -1.79769E+308</li>
<li>Largest DOUBLE value: 1.79769E+308</li>
<li>Smallest positive DOUBLE value: 2.225E-307</li>
<li>Largest negative DOUBLE value: -2.225E-307</li>
</ul> <p>These limits are different from the <codeph>java.lang.Double</codeph>Java
type limits.</p> <p>An exception is thrown when any double value is calculated
or entered that is outside of these value ranges. Arithmetic operations <b>do
not</b> round their resulting values to zero. If the values are too small,
you will receive an exception. </p> <p>Numeric floating point constants are
limited to a length of 30 characters. <codeblock>-- this example will fail because the constant is too long: 
<b>values 01234567890123456789012345678901e0;</b></codeblock></p> </section>
<section><title>Corresponding compile-time Java type</title> <p><i>java.lang.Double</i></p> </section>
<section><title>JDBC metadata type (java.sql.Types)</title> <p>DOUBLE</p> <p>When
mixed with other data types in expressions, the resulting data type follows
the rules shown in <xref href="rrefsqlj27767.dita#rrefsqlj27767"></xref>.</p> <p>See
also <xref href="rrefsqlj20204.dita#rrefsqlj20204"></xref>.</p> </section>
<example id="sqlj35021"><title>Examples</title> <codeblock><b>3421E+09
425.43E9
9E-10
4356267544.32333E+30</b></codeblock> </example>
</refbody>
</reference>


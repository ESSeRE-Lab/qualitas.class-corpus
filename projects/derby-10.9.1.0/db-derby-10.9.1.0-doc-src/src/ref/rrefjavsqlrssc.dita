<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefjavsqlrssc" xml:lang="en-us">
<title>ResultSets and streaming columns </title>
<prolog><metadata>
<keywords><indexterm>getXXXStream  requests</indexterm><indexterm>Streaming
columns<indexterm>retrieving from ResultSets using getXXXStream methods</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p>If the underlying object is itself an <i>OutputStream</i> class, <i>getBinaryStream</i> returns
the object directly.</p></section>
<section><p><indexterm>getAsciiStream</indexterm><indexterm>getCharacterStream</indexterm><indexterm>getBinaryStream</indexterm>To
get a field from the <i>ResultSet</i> using streaming columns, you can use
the <i>getXXXStream</i> methods if the type supports it. See <xref href="rrefjavsqlprst.dita#rrefjavsqlprst/jdbc25312"></xref> for
a list of types that support the various streams. (See also <xref href="rrefjdbc20377.dita#rrefjdbc20377/jdbc31241"></xref>.)</p></section>
<section><p>You can retrieve data from one of the supported data type columns
as a stream, whether or not it was stored as a stream.</p></section>
<section><p>The following code fragment shows how a user can retrieve a LONG VARCHAR
column as a stream:   <codeblock>    <b>// retrieve data as a stream</b>
    ResultSet rs = s.executeQuery("SELECT b FROM atable");
    while (rs.next()) {
        <b>// use a java.io.Reader to get the data</b>
        java.io.Reader ip = rs.getCharacterStream(1);

        <b>// process the stream--this is just a generic way to
        // print the data</b>
        char[] buff = new char[128];
        int size;
        while ((size = ip.read(buff)) != -1) {
            String chunk = new String(buff, 0, size);
            System.out.print(chunk);
        }
    }
    rs.close();
    s.close();
    conn.commit();</codeblock></p></section>
</refbody>
</reference>


<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqlj35034" xml:lang="en-us">
<title>INNER JOIN operation</title>
<prolog><metadata>
<keywords><indexterm>INNER JOIN operation</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>An INNER JOIN is a <xref href="rrefsqlj29840.dita#rrefsqlj29840">JOIN operation</xref> that
allows you to specify an explicit join clause. </p></section>
<refsyn><title>Syntax</title>

<codeblock><b><i><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i> [ INNER ] JOIN <i><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i>
{
    ON <i>booleanExpression</i> |
    <i><xref href="rrefsqljusing.dita#rrefsqljusing">USING clause</xref></i>
}</b></codeblock>

<p>You can specify the join clause by specifying ON
with a boolean expression.  </p> <p><indexterm>ON clause<indexterm>part of
INNER JOIN expression</indexterm></indexterm>The scope of expressions in the
ON clause includes the current tables and any tables in outer query blocks
to the current SELECT. In the following example, the ON clause refers to the
current tables:   <codeblock><b>SELECT *
FROM SAMP.EMPLOYEE INNER JOIN SAMP.STAFF
ON EMPLOYEE.SALARY &lt; STAFF.SALARY
</b></codeblock></p> <p>The ON clause can reference tables not being joined
and does not have to reference either of the tables being joined (though typically
it does). </p> </refsyn>
<example><title>Examples</title>
<codeblock><b><ph>-- Join the EMP_ACT and EMPLOYEE tables</ph>
-- select all the columns from the EMP_ACT table and 
-- add the employee's surname (LASTNAME) from the EMPLOYEE table
-- to each row of the result
SELECT SAMP.EMP_ACT.*, LASTNAME
     FROM SAMP.EMP_ACT JOIN SAMP.EMPLOYEE
     ON EMP_ACT.EMPNO = EMPLOYEE.EMPNO
-- Join the EMPLOYEE and DEPARTMENT tables, 
-- select the employee number (EMPNO), 
-- employee surname (LASTNAME), 
-- department number (WORKDEPT in the EMPLOYEE table and DEPTNO in the
-- DEPARTMENT table) 
-- and department name (DEPTNAME) 
-- of all employees who were born (BIRTHDATE) earlier than 1930.
SELECT EMPNO, LASTNAME, WORKDEPT, DEPTNAME 
     FROM SAMP.EMPLOYEE JOIN SAMP.DEPARTMENT 
     ON WORKDEPT = DEPTNO 
     AND YEAR(BIRTHDATE) &lt; 1930

<ph>-- Another example of "generating" new data values, </ph>
-- using a query which selects from a VALUES clause (which is an 
-- alternate form of a fullselect). 
-- This query shows how a table can be derived called "X"
-- having 2 columns "R1" and "R2" and 1 row of data
SELECT *
FROM (VALUES (3, 4), (1, 5), (2, 6))
AS VALUESTABLE1(C1, C2)
JOIN (VALUES (3, 2), (1, 2),
(0, 3)) AS VALUESTABLE2(c1, c2)
ON VALUESTABLE1.c1 = VALUESTABLE2.c1
-- This results in:
-- C1         |C2         |C1         |2
-- -----------------------------------------------
-- 3          |4          |3          |2
-- 1          |5          |1          |2
 
<ph>  
-- List every department with the employee number and 
-- last name of the manager</ph>

SELECT DEPTNO, DEPTNAME, EMPNO, LASTNAME
	FROM DEPARTMENT INNER JOIN EMPLOYEE
	ON MGRNO = EMPNO

<ph>-- List every employee number and last name 
-- with the employee number and last name of their manager</ph>
SELECT E.EMPNO, E.LASTNAME, M.EMPNO, M.LASTNAME	
	FROM EMPLOYEE E INNER JOIN	
	DEPARTMENT INNER JOIN EMPLOYEE M 
        ON MGRNO = M.EMPNO
        ON E.WORKDEPT = DEPTNO</b></codeblock> </example>
</refbody>
</reference>


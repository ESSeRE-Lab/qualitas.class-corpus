<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefimportdataproc" xml:lang="en-us">
<title>SYSCS_UTIL.SYSCS_IMPORT_DATA system procedure</title>
<refbody>
<section><p>The <codeph>SYSCS_UTIL.SYSCS_IMPORT_DATA</codeph> system procedure
imports data to a subset of columns in a table. You choose the subset of columns
by specifying insert columns. This procedure is also used to import a subset
of column data from a file by specifying column indexes.</p></section>
<section><title>Syntax</title><codeblock>SYSCS_UTIL.SYSCS_IMPORT_DATA (IN SCHEMANAME VARCHAR(128),
IN TABLENAME VARCHAR(128), IN INSERTCOLUMNS VARCHAR(32672),
IN COLUMNINDEXES VARCHAR(32672), IN FILENAME VARCHAR(32672),
IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1),
IN CODESET VARCHAR(128), IN REPLACE SMALLINT)</codeblock> <p>No result is
returned from the procedure.</p> <dl><dlentry>
<dt>SCHEMANAME</dt>
<dd>An input argument of type VARCHAR(128) that specifies the schema of the
table. Passing a NULL value will use the default schema name.</dd>
</dlentry><dlentry>
<dt>TABLENAME</dt>
<dd>An input argument of type VARCHAR(128) that specifies the table name
of the table into which the data is to be imported. This table cannot be a
system table or a declared temporary table. Passing a null will result in
an error.</dd>
</dlentry><dlentry>
<dt>INSERTCOLUMNS</dt>
<dd>An input argument of type VARCHAR(32672) that specifies the column names
(separated by commas) of the table into which the data is to be imported.
Passing a NULL value will import the data into all of the columns of the table.</dd>
</dlentry><dlentry>
<dt>COLUMNINDEXES</dt>
<dd>An input argument of type VARCHAR(32672) that specifies the indexes (numbered
from 1 and separated by commas) of the input data fields to be imported. Passing
a NULL value will use all of the input data fields in the file.</dd>
</dlentry><dlentry>
<dt>FILENAME</dt>
<dd>An input argument of type VARCHAR(32672) that specifies the file that
contains the data to be imported. If you do not specify a path, the current
working directory is used. Passing a NULL value will result in an error.</dd>
</dlentry><dlentry>
<dt>COLUMNDELIMITER</dt>
<dd>An input argument of type CHAR(1) that specifies a column delimiter. The
specified character is used in place of a comma to signal the end of a column.
Passing a NULL value will use the default value; the default value is a comma
(,).</dd>
</dlentry><dlentry>
<dt>CHARACTERDELIMITER</dt>
<dd>An input argument of type CHAR(1) that specifies a character delimiter.
 The specified character is used in place of double quotation marks to enclose
a character string. Passing a NULL value will use the default value; the default
value is a double quotation mark (").</dd>
</dlentry><dlentry>
<dt>CODESET</dt>
<dd>An input argument of type VARCHAR(128) that specifies the code set of
the data in the input file. The name of the code set should be one of the
Java-supported character encodings. Data is converted from the specified code
set to the database code set (utf-8).  Passing a NULL value will interpret
the data file in the same code set as the JVM in which it is being executed.</dd>
</dlentry><dlentry>
<dt>REPLACE</dt>
<dd>A input argument of type SMALLINT. A non-zero value will run in REPLACE
mode, while a value of zero will run in INSERT mode. REPLACE mode deletes
all existing data from the table by truncating the data object, and inserts
the imported data. The table definition and the index definitions are not
changed. You can only use the REPLACE mode if the table exists. INSERT mode
adds the imported data to the table without changing the existing table data.
Passing a NULL will result in an error.</dd>
</dlentry></dl><p>If you create a schema, table, or column name as a non-delimited
identifier, you must pass the name to the import procedure using all uppercase
characters. If you created a schema, table, or column name as a delimited
identifier, you must pass the name to the import procedure using the same
case that was used when it was created.</p></section>
<section><title>Execute privileges</title>
<p>If authentication and SQL authorization are both enabled, only the
<xref href="rrefattrib26867.dita#rrefattrib26867">database owner</xref> has
execute privileges on this procedure by default. See "Enabling user
authentication" and "Setting the SQL standard authorization mode" in the
<ph conref="../conrefs.dita#pub/citdevelop"></ph> for more information. The
database owner can grant access to other users. The user must also have INSERT
privileges on the table.</p>
</section>
<section><title>Usage</title>
<p>For additional information on using this procedure, see the section
"Importing and exporting data" in the
<ph conref="../conrefs.dita#pub/citadmin"></ph>.</p></section>
<section><title>Example</title><p>The following example imports some of the
data fields from a delimited data file called <codeph>data.del</codeph> into
the <codeph>STAFF</codeph> table:     <codeblock>CALL SYSCS_UTIL.SYSCS_IMPORT_DATA
    (NULL, 'STAFF', null, '1,3,4', 'data.del', null, null, null,0)</codeblock></p></section>
</refbody>
</reference>

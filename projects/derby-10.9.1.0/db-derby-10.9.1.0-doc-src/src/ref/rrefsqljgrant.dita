<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.    
-->
<reference id="rrefsqljgrant" xml:lang="en-us">
<title>GRANT statement </title>
<shortdesc>Use the GRANT statement to give privileges to a specific user or
role, or to all users, to perform actions on database objects. You can also use
the GRANT statement to grant a role to a user, to PUBLIC, or to another role.
</shortdesc>
<prolog><metadata>
<keywords><indexterm>GRANT statement</indexterm><indexterm>SQL statements<indexterm>GRANT</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section> <p>The following types of privileges can be granted:<ul>
<li>Delete data from a specific table.</li>
<li>Insert data into a specific table.</li>
<li>Create a foreign key reference to the named table or to a subset of columns
from a table.</li>
<li>Select data from a table, view, or a subset of columns in a table.</li>
<li>Create a trigger on a table.</li>
<li>Update data in a table or in a subset of columns in a table.</li>
<li>Run a specified function or procedure.</li>
<li>Use a sequence generator or a user-defined type.</li>
</ul></p><p>Before you issue a GRANT statement, check that the
<codeph><xref href="rrefpropersqlauth.dita#rrefpropersqlauth">derby.database.sqlAuthorization</xref></codeph> property
is set to <codeph>true</codeph>. The <codeph>derby.database.sqlAuthorization</codeph> property
enables the SQL Authorization mode.</p><p>You can grant privileges on an
object if you are the owner of the object or the
<xref href="rrefattrib26867.dita#rrefattrib26867">database owner</xref>. See the
CREATE statement for the database object that you want to grant privileges on
for more information.</p><p>The
syntax that you use for the GRANT statement depends on whether you are granting
privileges to a schema object or granting a role.</p>
<p>For more information on using the GRANT statement, see "Using SQL standard
authorization" in the <ph conref="../conrefs.dita#pub/citdevelop"></ph>.</p>
</section>
<section><title>Syntax for tables</title><codeblock><b>GRANT <i><xref href="rrefsqljgrant.dita#rrefsqljgrant/grantprivtype">privilege-type</xref></i
> ON [TABLE] { <i><xref href="rreftablename.dita#rreftablename"></xref></i> | <i><xref
href="rrefviewname.dita#rrefviewname"></xref></i> } TO <i><xref href="rrefsqljgrant.dita#rrefsqljgrant/grantgrantees">grantees</xref></i></b></codeblock
></section>
<section><title>Syntax for routines</title><codeblock><b>GRANT EXECUTE ON { FUNCTION | PROCEDURE } <i><xref
href="rrefsqljgrant.dita#rrefsqljgrant/grantroutinename">routine-designator</xref></i> TO <i><xref
href="rrefsqljgrant.dita#rrefsqljgrant/grantgrantees">grantees</xref></i></b></codeblock></section>
<section id="grantsequencesyn"><title>Syntax for sequence generators</title>
<codeblock><b>GRANT USAGE ON SEQUENCE [ <i><xref 
href="rrefschemaname.dita#rrefschemaname">schemaName</xref>.</i> ] <i><xref
href="crefsqlj34834.dita#crefsqlj34834">SQL92Identifier</xref></i> TO <i><xref href="rrefsqljgrant.dita#rrefsqljgrant/grantgrantees">grantees</xref></i></b></codeblock>
<p>In order to use a sequence generator, you must have the USAGE privilege on
it. This privilege can be granted to users and to roles. See 
<xref href="rrefsqljcreatesequence.dita#rrefsqljcreatesequence"></xref> for more
information.</p>
<p>The sequence name is composed of an optional <i>schemaName</i> and a
<i>SQL92Identifier</i>. If a <i>schemaName</i> is not provided, the current
schema is the default schema. If a qualified sequence name is specified, the
schema name cannot begin with SYS.</p></section>
<section id="granttypesyn"><title>Syntax for user-defined types</title>
<codeblock><b>GRANT USAGE ON TYPE [ <i><xref 
href="rrefschemaname.dita#rrefschemaname">schemaName</xref>.</i> ] <i><xref
href="crefsqlj34834.dita#crefsqlj34834">SQL92Identifier</xref></i> TO <i><xref href="rrefsqljgrant.dita#rrefsqljgrant/grantgrantees">grantees</xref></i></b></codeblock>
<p>In order to use a user-defined type, you must have the USAGE privilege on
it. This privilege can be granted to users and to roles. See 
<xref href="rrefsqljcreatetype.dita#rrefsqljcreatetype"></xref> for more
information.</p>
<p>The type name is composed of an optional <i>schemaName</i> and a
<i>SQL92Identifier</i>. If a <i>schemaName</i> is not provided, the current
schema is the default schema. If a qualified type name is specified, the schema
name cannot begin with SYS.</p></section>
<section id="grantrolesyn"><title>Syntax for roles</title>
<codeblock><b>GRANT <i><xref href="rrefrolename.dita#rrefrolename">roleName</xref></i> [ {, <i><xref
href="rrefrolename.dita#rrefrolename">roleName</xref></i> }* ] TO <i><xref 
href="rrefsqljgrant.dita#rrefsqljgrant/grantgrantees">grantees</xref></i></b></codeblock>
<p>Before you can grant a role to a user or to another role, you must create the
role using the <xref href="rrefcreaterole.dita#rrefcreaterole">CREATE ROLE
statement</xref>. Only the
<xref href="rrefattrib26867.dita#rrefattrib26867">database owner</xref> can
grant a role.</p>
<p>A role A <i>contains</i> another role B if role B is granted to role A, or is
contained in a role C granted to role A. Privileges granted to a contained role
are inherited by the containing roles. So the set of privileges identified by
role A is the union of the privileges granted to role A and the privileges
granted to any contained roles of role A.</p>
</section>
<section id="grantprivtype"><title>privilege-types</title><codeblock><b>  ALL PRIVILEGES |
  privilege-list
</b></codeblock></section>
<section id="grantprivlist"><title>privilege-list</title><codeblock><b> table-privilege {, table-privilege }*
</b></codeblock></section>
<section id="granttablepriv"><title>table-privilege</title><codeblock><b>  DELETE |
  INSERT |
  REFERENCES [<i>column list</i>] |
  SELECT [<i>column list</i>] |
  TRIGGER |
  UPDATE [<i>column list</i>]
</b></codeblock></section>
<section id="grantcollist"><title>column list</title><codeblock><b>  ( column-identifier {, column-identifier}* )
</b></codeblock></section>
<section><p>Use the ALL PRIVILEGES privilege type to grant all of the privileges
to the user or role for the specified table. You can also grant one or more table
privileges by specifying a privilege-list.</p><p>Use the DELETE privilege
type to grant permission to delete rows from the specified table.</p><p>Use
the INSERT privilege type to grant permission to insert rows into the specified
table.</p><p>Use the REFERENCES privilege type to grant permission to create
a foreign key reference to the specified table. If a column list is specified
with the REFERENCES privilege, the permission is valid on only the foreign
key reference to the specified columns.</p><p>Use the SELECT privilege type
to grant permission to perform
<xref href="rrefsqlj41360.dita#rrefsqlj41360">SELECT statements</xref> or
<i><xref href="rrefselectexpression.dita#rrefselectexpression">SelectExpressions</xref></i>
on a table or view. If a
column list is specified with the SELECT privilege, the permission is valid
on only those columns. If no column list is specified, then the privilege
is valid on all of the columns in the table.</p>
<p>For queries that do not select a specific column from the tables involved in
a SELECT statement or <i>SelectExpression</i> (for example, queries that use
<codeph>COUNT(*)</codeph>), the user must have at least one column-level SELECT
privilege or table-level SELECT privilege.</p>
<p>Use the TRIGGER privilege
type to grant permission to create a trigger on the specified table.</p><p>Use
the UPDATE privilege type to grant permission to use the UPDATE statement
on the specified table. If a column list is specified, the permission applies
only to the specified columns. To update a row using a statement that includes
a WHERE clause, you must have the SELECT privilege on the columns in the row
that you want to update. </p></section>
<section id="grantgrantees"><title>grantees</title>
<codeblock><b>{ <i><xref href="rrefrauthid.dita#rrefrauthid">AuthorizationIdentifier</xref></i> | <i><xref href="rrefrolename.dita#rrefrolename">roleName</xref></i> | PUBLIC } 
[, { <i><xref href="rrefrauthid.dita#rrefrauthid">AuthorizationIdentifier</xref></i> | <i><xref href="rrefrolename.dita#rrefrolename">roleName</xref></i> | PUBLIC } ] *</b></codeblock>
<p>You can grant privileges or roles to specific users or roles or to all users.
Use the keyword PUBLIC to specify all users. When PUBLIC is specified, the
privileges or roles affect all current and future users. The privileges granted
to PUBLIC and to individual users or roles are independent privileges. For
example, a SELECT privilege on table <codeph>t</codeph> is granted to both
PUBLIC and to the authorization ID <codeph>harry</codeph>. The SELECT privilege
is later revoked from the authorization ID <codeph>harry</codeph>, but Harry can
access the table <codeph>t</codeph> through the PUBLIC privilege.</p>
<p>Either the object owner or the database owner can grant privileges to a user
or to a role. Only the database owner can grant a role to a user or to another
role.</p></section>
<section id="grantroutinename"><title>routine-designator</title><codeblock><b>{
	<i>function-name</i> | <i>procedure-name</i>
}</b></codeblock></section>
<example id="grantexamples"><title>Examples</title><p>To grant the SELECT
privilege on table <codeph>t</codeph> to the authorization IDs <codeph>maria</codeph> and <codeph>harry</codeph>,
use the following syntax:<codeblock><b>GRANT SELECT ON TABLE t TO maria,harry</b> </codeblock></p><p>To
grant the UPDATE and TRIGGER privileges on table <codeph>t</codeph> to the authorization IDs <codeph>anita</codeph> and <codeph>zhi</codeph>,
use the following syntax:<codeblock><b>GRANT UPDATE, TRIGGER ON TABLE t TO anita,zhi</b> </codeblock></p><p>To
grant the SELECT privilege on table <codeph>s.v</codeph> to all users, use the following syntax:<codeblock><b>GRANT SELECT ON TABLE s.v to PUBLIC</b></codeblock></p
><p>To grant the EXECUTE privilege on procedure <codeph>p</codeph> to the authorization ID <codeph>george</codeph>,
use the following syntax:</p><codeblock><b>GRANT EXECUTE ON PROCEDURE p TO george</b> </codeblock>
<p>To grant the role <codeph>purchases_reader_role</codeph> to the authorization
IDs <codeph>george</codeph> and <codeph>maria</codeph>, use the following
syntax:</p>
<codeblock><b>GRANT purchases_reader_role TO george,maria</b></codeblock>
<p>To grant the SELECT privilege on table <codeph>t</codeph> to the role
<codeph>purchases_reader_role</codeph>, use the following syntax:</p>
<codeblock><b>GRANT SELECT ON TABLE t TO purchases_reader_role</b></codeblock>
<p>To grant the USAGE privilege on the sequence generator
<codeph>order_id</codeph> to the role <codeph>sales_role</codeph>, use the
following syntax:</p>
<codeblock><b>GRANT USAGE ON SEQUENCE order_id TO sales_role;</b></codeblock>
<p>To grant the USAGE privilege on the user-defined type
<codeph>price</codeph> to the role <codeph>finance_role</codeph>, use the
following syntax:</p>
<codeblock><b>GRANT USAGE ON TYPE price TO finance_role;</b></codeblock>
</example>

</refbody>
</reference>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefjdbc32052" xml:lang="en-us">
<title>java.sql.Driver interface</title>
<prolog><metadata>
<keywords><indexterm>java.sql.Driver interface</indexterm>
<indexterm>JDBC driver<indexterm>loading</indexterm></indexterm>
<indexterm>jdbc.drivers system property<indexterm>using to load driver</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p>The class that loads <ph conref="../conrefs.dita#prod/productshortname"></ph>'s
local JDBC driver is the class <i>org.apache.derby.jdbc.EmbeddedDriver</i>.
The class that loads <ph conref="../conrefs.dita#prod/productshortname"></ph>'s
network client driver is the class <i>org.apache.derby.jdbc.ClientDriver</i>.
Listed below are some of the ways to create instances of these classes. Do not use the classes directly through the <i>java.sql.Driver</i> interface.
Use the <i>DriverManager</i> class to create connections.</p>  
<p>If your application runs on JDK 6 or higher, you do not need to
do any of the following. The driver will load automatically
when your application asks for its first connection.</p>
<ul>
<li><pre id="jdbc10841">Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
Class.forName("org.apache.derby.jdbc.ClientDriver");</pre>
<p>The recommended way to load the driver class.</p>
<p>With the embedded driver, if your application shuts down Derby or calls the
<i>DriverManager.deregisterDriver</i> method, and you then want to reload the
driver, call the <i>Class.forName().newInstance()</i> method to do so:</p>
<pre>Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();</pre>
</li>
<li><pre>new org.apache.derby.jdbc.EmbeddedDriver();
new org.apache.derby.jdbc.ClientDriver();</pre>   <p>Same as using
<i>Class.forName()</i>, except
that it requires the class to be found when the code is compiled.</p></li>
<li><pre>Class c = org.apache.derby.jdbc.EmbeddedDriver.class;
Class c = org.apache.derby.jdbc.ClientDriver.class;</pre>   <p>This
is also the same as using <i>Class.forName()</i>, except
that it requires the class to be found when the code is compiled. The pseudo-static
field <i>class</i> evaluates to the class that is named.</p></li>
<li><i>Setting the system property jdbc.drivers</i> 
 <p>To set a system property, you alter the invocation command line or the
system properties within your application. It is not possible to alter system
properties within an applet.</p>
<codeblock>java -Djdbc.drivers=org.apache.derby.jdbc.EmbeddedDriver
    applicationClass

java -Djdbc.drivers=org.apache.derby.jdbc.ClientDriver
    applicationClass</codeblock></li>
</ul></section>
<section><p>The actual driver that gets registered in the <i>DriverManager</i> to
handle the <i>jdbc:derby:</i> protocol is not the class <i>org.apache.derby.jdbc.EmbeddedDriver</i>
or <i>org.apache.derby.jdbc.ClientDriver</i>;
that class simply detects the type of <ph conref="../conrefs.dita#prod/productshortname"></ph> driver
needed and then causes the appropriate <ph conref="../conrefs.dita#prod/productshortname"></ph> driver
to be loaded.</p></section>
<section><p>The only supported way to connect to a <ph conref="../conrefs.dita#prod/productshortname"></ph> system
through the <i>jdbc:derby:</i> protocol is using the <i>DriverManager</i> to
obtain a driver (<i>java.sql.Driver</i>) or connection (<i>java.sql.Connection</i>)
through the <i>getDriver</i> and <i>getConnection</i> method calls.</p></section>
</refbody>
</reference>

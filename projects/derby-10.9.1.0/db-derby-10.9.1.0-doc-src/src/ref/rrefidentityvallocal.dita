<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefidentityvallocal" xml:lang="en-us">
<title>IDENTITY_VAL_LOCAL function</title>
<refbody>
<section><p><ph conref="../conrefs.dita#prod/productshortname"></ph> supports
the IDENTITY_VAL_LOCAL function. </p></section>
<refsyn><title>Syntax:</title>
<codeblock> IDENTITY_VAL_LOCAL ( )</codeblock>
<p>The IDENTITY_VAL_LOCAL function is a non-deterministic function
that returns the most recently assigned value of an identity column for a
connection, where the assignment occurred as a result of a single row INSERT
statement using a  VALUES clause. </p>
<p>The IDENTITY_VAL_LOCAL function has no input parameters. The result
is a DECIMAL (31,0), regardless of the actual data type of the  corresponding
identity column.</p>
<p>The value returned by the IDENTITY_VAL_LOCAL function, for a connection,
is the value assigned to the identity column of the table identified in the
most recent single row INSERT statement. The INSERT statement must contain
a VALUES clause on a table containing an identity column.
The function returns a null value when a single row INSERT statement with
a VALUES clause has not been issued for a table containing an identity column.</p>
<p>The result of the function is not affected by the following: 
 <ul>
<li>A single row INSERT statement with a VALUES clause for a table without
 an identity column</li>
<li>A multiple row INSERT statement with a VALUES clause</li>
<li>An INSERT statement with a fullselect</li>
</ul></p>If a table with an identity column has an INSERT trigger defined
that inserts into another table with another identity column, then the IDENTITY_VAL_LOCAL()
function will return the generated value for the statement table, and not
for the table modified by the trigger.</refsyn>
<example><title>Examples</title>
<codeblock>ij&gt; create table t1(c1 int generated always as identity, c2 int);
0 rows inserted/updated/deleted
ij&gt; insert into t1(c2) values (8);
1 row inserted/updated/deleted
ij&gt; values IDENTITY_VAL_LOCAL();
1 
-------------------------------
1                              
1 row selected
ij&gt; select IDENTITY_VAL_LOCAL()+1, IDENTITY_VAL_LOCAL()-1 from t1;
1                                |2                          
-------------------------------------------------------------------
2                                |0                                
1 row selected
ij&gt; insert into t1(c2) values (IDENTITY_VAL_LOCAL());
1 row inserted/updated/deleted
ij&gt; select * from t1;
C1             |C2             
-------------------------------
1              |8              
2              |1              
2 rows selected
ij&gt; values IDENTITY_VAL_LOCAL();
1                        
-------------------------------
2                              
1 row selected
ij&gt; insert into t1(c2) values (8), (9);
2 rows inserted/updated/deleted
ij&gt; -- multi-values insert, return value of the function should not change
values IDENTITY_VAL_LOCAL();
1                        
-------------------------------
2                              
1 row selected
ij&gt; select * from t1;
C1             |C2             
-------------------------------
1              |8              
2              |1              
3              |8              
4              |9              
4 rows selected
ij&gt; insert into t1(c2) select c1 from t1;
4 rows inserted/updated/deleted
-- insert with sub-select, return value should not change
ij&gt; values IDENTITY_VAL_LOCAL();
1                        
-------------------------------
2                              
1 row selected
ij&gt; select * from t1;
C1             |C2             
-------------------------------
1              |8              
2              |1              
3              |8              
4              |9              
5              |1              
6              |2              
7              |3              
8              |4              
8 rows selected         </codeblock></example>
</refbody>
</reference>

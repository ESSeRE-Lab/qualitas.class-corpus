<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefsqljtypexml" xml:lang="en-us">
<title>XML data type</title>
<shortdesc>The XML data type is used for Extensible Markup Language (XML)
documents.</shortdesc>
<prolog><metadata>
<keywords><indexterm>XML data type</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>The XML data type is used: <ul>
<li>To store XML documents that conform to the SQL/XML definition of a well-formed
XML(DOCUMENT(ANY)) value.</li>
<li>Transiently for XML(SEQUENCE) values, that might not be well-formed XML(DOCUMENT(ANY))
values.</li>
</ul></p><note>For an application to retrieve, update, query, or otherwise
access an XML data value, the application must have classes for a JAXP parser
and for Xalan in the classpath.  <ph conref="../conrefs.dita#prod/productshortname"></ph> issues
an error if either the parser or Xalan is not found. In some situations, you may
need to take steps to place the parser and Xalan in your classpath. See
"XML data types and operators" in the
<ph conref="../conrefs.dita#pub/citdevelop"></ph> for details.</note>
<p>Because none of the
JDBC-side support for SQL/XML is implemented in <ph conref="../conrefs.dita#prod/productshortname"></ph>,
it is not possible to bind directly into an XML value or to retrieve an XML
value directly from a result set using JDBC.  Instead, you must bind and retrieve
the XML data as Java strings or character streams by explicitly specifying
the appropriate XML operators, XMLPARSE and XMLSERIALIZE, as part of your
SQL queries.</p></section>
<refsyn><title>Syntax</title><codeblock><b>XML</b></codeblock> </refsyn>
<section><title>Corresponding compile-time Java type</title><p>None</p><p>The
Java type for XML values is java.sql.SQLXML. However, the java.sql.SQLXML
type is not supported by <ph conref="../conrefs.dita#prod/productshortname"></ph>. </p> </section>
<section><title>JDBC metadata type (java.sql.Types)</title><p>None</p><p>The
metadata type for XML values is SQLXML. However, the SQLXML type is not supported
by <ph conref="../conrefs.dita#prod/productshortname"></ph>. </p><p>To retrieve
XML values from a <ph conref="../conrefs.dita#prod/productshortname"></ph> database
using JDBC, use the XMLSERIALIZE operator in the SQL query. For example:<codeblock>SELECT XMLSERIALIZE (xcol as CLOB) FROM myXmlTable </codeblock
>Then retrieve the XML value by using the getXXX method that corresponds to
the target serialization type, in this example CLOB data types.</p><p>To store
an XML value into a <ph conref="../conrefs.dita#prod/productshortname"></ph> database
using JDBC, use the XMLPARSE operator in the SQL statement. For example: <codeblock>INSERT INTO myXmlTable(xcol) VALUES XMLPARSE(
    DOCUMENT CAST (? AS CLOB) PRESERVE WHITESPACE)
</codeblock>Then use any of the setXXX methods that are compatible with String
types, in this example use the PreparedStatement.setString or PreparedStatement.setCharacterStream
method calls to bind the operator.</p> </section>
</refbody>
</reference>

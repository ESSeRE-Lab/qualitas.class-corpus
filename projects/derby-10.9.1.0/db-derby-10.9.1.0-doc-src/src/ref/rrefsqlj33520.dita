<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqlj33520" xml:lang="en-us">
<title>MIN function</title>
<prolog><metadata>
<keywords><indexterm>MIN aggregate function</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>MIN is an aggregate function that evaluates the minimum of
an expression over a set of rows (see <xref href="rrefsqlj33923.dita#rrefsqlj33923"></xref>).
MIN is allowed only on expressions that evaluate to built-in data types (including
CHAR, VARCHAR, DATE, TIME, etc.).</p></section>
<refsyn><title>Syntax</title> <codeblock><b>MIN ( [ DISTINCT | ALL ] <i>Expression</i> )</b></codeblock> <p>The
DISTINCT and ALL qualifiers eliminate or retain duplicates, but these qualifiers
have no effect in a MIN expression. Only one DISTINCT aggregate expression
per <i><xref href="rrefselectexpression.dita#rrefselectexpression">SelectExpression</xref></i> is
allowed. For example, the following query is not allowed:   <codeblock><b>SELECT COUNT (DISTINCT flying_time), MIN (DISTINCT miles)
FROM Flights</b></codeblock></p> <p>The <i>Expression</i> can contain multiple column
references or expressions, but it cannot contain another aggregate or subquery.
It must evaluate to a built-in data type. You can therefore call methods that
evaluate to built-in data types. (For example, a method that returns a <i>java.lang.Integer</i> or <i>int</i> evaluates
to an INTEGER.) If an expression evaluates to NULL, the aggregate skips that
value.</p> <p>The type's comparison rules determine the minimum value. For
CHAR and VARCHAR,
the number of blank spaces at the end of the value can affect how MIN is evaluated.
For example, if the values 'z' and 'z ' are both stored in a column, you cannot
control which one will be returned as the minimum, because blank spaces are
ignored for character comparisons.</p> <p>The
resulting data type is the same as the expression on which it operates (it
will never overflow).</p> </refsyn>
<example><title>Examples</title>
<codeblock><b><ph>-- NOT valid:</ph>
SELECT DISTINCT flying_time, MIN(DISTINCT miles) from Flights
<ph>-- valid:</ph>
SELECT COUNT(DISTINCT flying_time), MIN(DISTINCT miles) from Flights
<ph>-- find the earliest date:</ph>
SELECT MIN (flight_date) FROM FlightAvailability;</b></codeblock> </example>
</refbody>
</reference>


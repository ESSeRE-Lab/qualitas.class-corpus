<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefbuiltchar" xml:lang="en-us">
<title>CHAR function</title>
<shortdesc>The CHAR function returns a fixed-length character string representation.</shortdesc>
<prolog><metadata>
<keywords><indexterm>CHAR function</indexterm></keywords>
</metadata></prolog>
<refbody>
<section>The representations are: <ul>
<li>A character string, if the first argument is any type of character string.</li>
<li>A datetime value, if the first argument is a date, time, or timestamp.</li>
<li>A decimal number, if the first argument is a decimal number.</li>
<li>A double-precision floating-point number, if the first argument is a DOUBLE
or REAL. </li>
<li>An integer number, if the first argument is a SMALLINT, INTEGER, or BIGINT.</li>
</ul>The first argument must be of a built-in data type. The result of the
CHAR function is a fixed-length character string. If the first argument can
be null, the result can be null. If the first argument is null, the result
is the null value.  The first argument cannot be an XML value. To convert
an XML value to a CHAR of a specified length, you must use the SQL/XML serialization
operator XMLSERIALIZE.</section>
<section><title>Character to character syntax</title> <codeblock><b>CHAR (<i>CharacterExpression</i> [, <i>integer</i>] ) </b></codeblock> <dl>
<dlentry>
<dt>CharacterExpression</dt>
<dd>An expression that returns a value that is CHAR, VARCHAR, LONG VARCHAR,
or CLOB data type.</dd>
</dlentry><dlentry>
<dt>integer</dt>
<dd>The length attribute for the resulting fixed length character string.
The value must be between 0 and 254.</dd>
</dlentry></dl> <p>If the length of the character-expression is less than
the length attribute of the result, the result is padded with blanks up to
the length of the result. If the length of the character-expression is greater
than the length attribute of the result, truncation is performed. A warning
is returned unless the truncated characters were all blanks and the character-expression
was not a long string (LONG VARCHAR or CLOB).</p> </section>
<section><title>Integer to character syntax</title> <codeblock><b>CHAR (<i>IntegerExpression</i> ) </b></codeblock> <dl>
<dlentry>
<dt>IntegerExpression</dt>
<dd>An expression that returns a value that is an integer data type (either
SMALLINT, INTEGER or BIGINT).</dd>
</dlentry></dl> <p>The result is the character string representation of the
argument in the form of an SQL integer constant. The result consists of n
characters that are the significant digits that represent the value of the
argument with a preceding minus sign if the argument is negative. It is left
justified.</p> <ul>
<li>If the first argument is a small integer: The length of the result is
6. If the number of characters in the result is less than 6, then the result
is padded on the right with blanks to length 6.</li>
<li>If the first argument is a large integer: The length of the result is
11. If the number of characters in the result is less than 11, then the result
is padded on the right with blanks to length 11.</li>
<li>If the first argument is a big integer: The length of the result is 20.
If the number of characters in the result is less than 20, then the result
is padded on the right with blanks to length 20.</li>
</ul> </section>
<section><title>Datetime to character syntax</title> <codeblock><b>CHAR (<i>DatetimeExpression</i> ) </b></codeblock> <dl>
<dlentry>
<dt>DatetimeExpression</dt>
<dd>An expression that is one of the following three data types: <ul>
<li><b>date</b>: The result is the character representation of the date. The
length of the result is 10.</li>
<li><b>time</b>: The result is the character representation of the time. The
length of the result is 8.</li>
<li><b>timestamp</b>: The result is the character string representation of
the timestamp. The length of the result is 26.</li>
</ul></dd>
</dlentry></dl> </section>
<section><title>Decimal to character</title> <codeblock><b>CHAR (<i>DecimalExpression</i> ) </b></codeblock> <dl>
<dlentry>
<dt>DecimalExpression</dt>
<dd>An expression that returns a value that is a decimal data type. If a different
precision and scale is desired, the DECIMAL scalar function can be used first
to make the change.</dd>
</dlentry></dl> </section>
<section><title>Floating point to character syntax</title> <codeblock><b>CHAR (<i>FloatingPointExpression</i> ) </b></codeblock> <dl>
<dlentry>
<dt>FloatingPointExpression</dt>
<dd>An expression that returns a value that is a floating-point data type
(DOUBLE or REAL).</dd>
</dlentry></dl> </section>
<example><title>Example</title>
<p>Use the CHAR function to return the values for EDLEVEL (defined
as smallint) as a fixed length character string: <codeblock><b>SELECT CHAR</b>(EDLEVEL) <b>FROM</b> EMPLOYEE</codeblock>An
EDLEVEL of 18 would be returned as the CHAR(6) value '18&nbsp;&nbsp;&nbsp;&nbsp;' (18 followed by
four blanks).</p> </example>
</refbody>
</reference>

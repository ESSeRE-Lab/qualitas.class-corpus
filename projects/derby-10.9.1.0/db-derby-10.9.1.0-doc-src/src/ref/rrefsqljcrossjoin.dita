<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqljcrossjoin" xml:lang="en-us">
<title>CROSS JOIN operation</title>
<prolog><metadata>
<keywords><indexterm>CROSS JOIN operation</indexterm></keywords>
</metadata></prolog>
<refbody>
<section><p>A CROSS JOIN is a
<xref href="rrefsqlj29840.dita#rrefsqlj29840">JOIN operation</xref> that
produces the Cartesian product of two tables. Unlike other JOIN operators, it
does not let you specify a join clause. You may, however, specify a WHERE clause
in the SELECT statement.</p></section>
<refsyn><title>Syntax</title>
<codeblock><b><i><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i> CROSS JOIN { <xref href="rrefsqlj33215.dita#rrefsqlj33215">TableViewOrFunctionExpression</xref> | ( <i><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i> ) }</b></codeblock>
</refsyn>
<example><title>Examples</title>
<p>The following SELECT statements are equivalent:</p>
<codeblock><b>SELECT * FROM CITIES CROSS JOIN FLIGHTS</b></codeblock>
<codeblock><b>SELECT * FROM CITIES, FLIGHTS</b></codeblock>
<p>The following SELECT statements are equivalent:</p>
<codeblock><b>SELECT * FROM CITIES CROSS JOIN FLIGHTS
    WHERE CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT</b></codeblock>
<codeblock><b>SELECT * FROM CITIES INNER JOIN FLIGHTS
    ON CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT</b></codeblock>
<p>The following example is more complex. The ON clause in this example is
associated with the LEFT OUTER JOIN operation. Note that you can use parentheses
around a JOIN operation.</p>
<codeblock><b>SELECT * FROM CITIES LEFT OUTER JOIN
    (FLIGHTS CROSS JOIN COUNTRIES)
        ON CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT
            WHERE COUNTRIES.COUNTRY_ISO_CODE = 'US'</b></codeblock>
<p>A CROSS JOIN operation can be replaced with an INNER JOIN where the join
clause always evaluates to true (for example, 1=1). It can also be replaced with
a sub-query. So equivalent queries would be:</p>
<codeblock><b>SELECT * FROM CITIES LEFT OUTER JOIN
    FLIGHTS INNER JOIN COUNTRIES ON 1=1
        ON CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT
            WHERE COUNTRIES.COUNTRY_ISO_CODE = 'US'</b></codeblock>
<codeblock><b>SELECT * FROM CITIES LEFT OUTER JOIN
    (SELECT * FROM FLIGHTS, COUNTRIES) S
        ON CITIES.AIRPORT = S.ORIG_AIRPORT
            WHERE S.COUNTRY_ISO_CODE = 'US'</b></codeblock>
</example>
</refbody>
</reference>

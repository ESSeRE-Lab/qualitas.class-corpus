<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefexportproc" xml:lang="en-us">
<title>SYSCS_UTIL.SYSCS_EXPORT_TABLE system procedure</title>
<shortdesc>The <codeph>SYSCS_UTIL.SYSCS_EXPORT_TABLE</codeph> system procedure
exports all of the data from a table to an operating system file. </shortdesc>
<prolog><metadata>
<keywords><indexterm>system procedures<indexterm>SYSCS_UTIL.SYSCS_EXPORT_TABLE</indexterm></indexterm>
<indexterm>SYSCS_UTIL.SYSCS_EXPORT_TABLE<indexterm>system procedures</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p>For security concerns, and to avoid accidental file damage, this
EXPORT procedure  does not export data into an existing file. You must specify
a filename in the  EXPORT procedure that does not exist. When you run the
procedure the file is created and the data is exported  into the new file.</p><p>The
data is exported using a delimited file format.</p></section>
<section><title>Syntax</title> <codeblock>SYSCS_UTIL.SYSCS_EXPORT_TABLE (IN SCHEMANAME  VARCHAR(128),
IN TABLENAME VARCHAR(128), IN FILENAME VARCHAR(32672),
IN COLUMNDELIMITER CHAR(1), IN CHARACTERDELIMITER CHAR(1),
IN CODESET VARCHAR(128)) </codeblock> <p>No result is returned from the procedure.</p> <dl>
<dlentry>
<dt>SCHEMANAME</dt>
<dd>An input argument of type VARCHAR(128) that specifies the schema name
of the table. Passing a NULL value will use the default schema name.</dd>
</dlentry><dlentry>
<dt>TABLENAME</dt>
<dd>An input argument of type VARCHAR(128) that specifies the name of the
table/view from which the data is to be exported. Passing a null will result
in an error.</dd>
</dlentry><dlentry>
<dt>FILENAME</dt>
<dd>Specifies the name of a new file to which the data is to be exported.
If the path is omitted, the current working directory is used. If the name
of a file that already exists is specified, the export procedure returns an
error. The specified location of the file should refer to the server-side
location if you are using the Network Server. Specifying a NULL value results
in an error. The <parmname>FILENAME</parmname> parameter takes an input argument
that is a VARCHAR (32672) data type.</dd>
</dlentry><dlentry>
<dt>COLUMNDELIMITER</dt>
<dd>An input argument of type CHAR(1) that specifies a column delimiter. The
specified character is used in place of a comma to signal the end of a column.
Passing a NULL value will use the default value; the default value is a comma
(,).</dd>
</dlentry><dlentry>
<dt>CHARACTERDELIMITER</dt>
<dd>An input argument of type CHAR(1) that specifies a character delimiter.
 The specified character is used in place of double quotation marks to enclose
a character string. Passing a NULL value will use the default value; the default
value is a double quotation mark (").</dd>
</dlentry><dlentry>
<dt>CODESET</dt>
<dd>An input argument of type VARCHAR(128) that specifies the code set of
the data in the exported file. The name of the code set should be one of the
Java-supported character encodings. Data is converted from the database code
set to the specified code set before writing to the file. Passing a NULL value
will write the data in the same code set as the JVM in which it is being executed.</dd>
</dlentry></dl>If you create a schema or table name as a non-delimited identifier,
you must pass the name to the export procedure using all uppercase characters.
If you created a schema, table, or column name as a delimited identifier,
you must pass the name to the export procedure using the same case that was
used when it was created.</section>
<section><title>Execute privileges</title>
<p>If authentication and SQL authorization are both enabled, only the
<xref href="rrefattrib26867.dita#rrefattrib26867">database owner</xref> has
execute privileges on this procedure by default. See "Enabling user
authentication" and "Setting the SQL standard authorization mode" in the
<ph conref="../conrefs.dita#pub/citdevelop"></ph> for more information. The
database owner can grant access to other users. The user must also have SELECT
privileges on the table.</p>
</section>
<section><title>Usage</title>
<p>For additional information on using this procedure, see the section
"Importing and exporting data" in the
<ph conref="../conrefs.dita#pub/citadmin"></ph>.</p></section>
<section><title>Example</title><p>The following example shows how to export
information from the STAFF table in a SAMPLE database to the <codeph>myfile.del</codeph> file.
      </p><codeblock>CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE (null, 'STAFF', 'myfile.del', null, null, null);</codeblock></section>
</refbody>
</reference>

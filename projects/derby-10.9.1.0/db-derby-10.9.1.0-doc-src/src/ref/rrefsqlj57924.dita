<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefsqlj57924" xml:lang="en-us">
<title>CHAR FOR BIT DATA data type</title>
<prolog><metadata>
<keywords><indexterm>CHAR FOR BIT DATA data type</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>A CHAR FOR BIT DATA type allows you to store byte strings of
a specified length. It is useful for unstructured data where character strings
are not appropriate. </p></section>
<refsyn><title>Syntax</title> <codeblock><b>{ CHAR | CHARACTER }[(<i>length</i>)] FOR BIT DATA</b></codeblock> <p><i>length</i> is
an unsigned integer literal designating the length in bytes. </p> <p>The default <i>length</i> for
a CHAR FOR BIT DATA type is 1., and the maximum size of <i>length</i> is 254
bytes.</p> </refsyn>
<section><title>JDBC metadata type (java.sql.Types)</title> <p>BINARY</p> <p>CHAR
FOR BIT DATA stores fixed-length byte strings. If a CHAR FOR BIT DATA value
is smaller than the target CHAR FOR BIT DATA, it is padded with a 0x20 byte
value.</p> <p>Comparisons of CHAR FOR BIT DATA and VARCHAR FOR BIT DATA values
are precise. For two bit strings to be equal, they must be <i>exactly</i> the
same length. (This differs from the way some other DBMSs handle BINARY values
but works as specified in SQL-92.)</p> <p>An operation on a VARCHAR FOR BIT
DATA and a CHAR FOR BIT DATA value (e.g., a concatenation) yields a VARCHAR
FOR BIT DATA value.</p> </section>
<example><title>Example</title>
<codeblock><b>CREATE TABLE t (b CHAR(2) FOR BIT DATA);
INSERT INTO t VALUES (X'DE');
SELECT *
FROM t;
<ph>-- yields the following output</ph>
B
-----
de20</b></codeblock> </example>
</refbody>
</reference>


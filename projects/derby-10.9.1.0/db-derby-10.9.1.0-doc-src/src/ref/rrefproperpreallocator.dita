<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "../dtd/reference.dtd">
<reference xml:lang="en-us" id="rrefproperpreallocator">
<title>derby.language.sequence.preallocator</title>
<prolog><metadata>
<keywords><indexterm>derby.language.sequence.preallocator</indexterm>
<indexterm>Sequence preallocation</indexterm>
<indexterm>Identity preallocation</indexterm>
</keywords>
</metadata>
</prolog><refbody>
<section><title>Function</title>
<p>Specifies how many values to preallocate for sequences.</p>
<p>If the database is shut down in an orderly fashion,
<ph conref="../conrefs.dita#prod/productshortname"></ph> will not leak unused
preallocated values. Instead, any unused values will be thrown away, and the
sequence generator will continue where it left off once the database reboots.
However, if the database exits unexpectedly, the sequence generator will
skip the unused preallocated values when the database comes up again. This will
leave a gap between the last NEXT VALUE FOR (issued before the database exited
unexpectedly) and the next NEXT VALUE FOR (issued after the database
reboots).</p>
</section>
<refsyn><title>Syntax</title>
<codeblock><b>derby.language.sequence.preallocator=<i>number</i></b></codeblock>
<p>
or
</p>
<codeblock><b>derby.language.sequence.preallocator=<i>className</i></b></codeblock>
<p>
If set to a positive number, that is the number of values which
<ph conref="../conrefs.dita#prod/productshortname"></ph>
preallocates for each sequence. A higher value may improve the concurrency of
sequences.</p>
<p>
If set to a class name, that class must implement
<i>org.apache.derby.catalog.SequencePreallocator</i>. The class
customizes the size of the preallocation range for each sequence. For more information, see the public API javadoc for
<i>org.apache.derby.catalog.SequencePreallocator</i>.
</p>
</refsyn>
<section><title>Default</title>
<p>100</p>
<p>By default, <ph conref="../conrefs.dita#prod/productshortname"></ph>
preallocates 100 values for each sequence.</p>
</section>
<example><title>Example</title>
<codeblock><b>derby.language.sequence.preallocator=125</b></codeblock>
</example>
<section><title>Scope</title>
<p>
<xref
href="crefproper51399.dita#crefproper51399/rrefproper41229">system-wide</xref>,
<xref href="crefproper51399.dita#crefproper51399/rrefproper15705">database-wide</xref>
</p>
</section>
<section><title>Dynamic or static</title>
<p>This property is semi-static; changing it while
<ph conref="../conrefs.dita#prod/productshortname"></ph> is running
will not affect sequences which are already
being used. However, the new value will be picked up by sequences which weren't being used before the value was
changed. In addition, DDL causes the old value to be forgotten. After
performing DDL, the new value will be picked up by all sequences.</p>
</section></refbody></reference>

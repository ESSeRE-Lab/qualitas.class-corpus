<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefjdbc28456" xml:lang="en-us">
<title>JDBC escape syntax for LIKE clauses</title>
<prolog><metadata>
<keywords><indexterm>escape (JDBC escape keyword)</indexterm><indexterm>Escape
character for LIKE clauses</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>The percent sign <i>%</i> and underscore <i>_</i> are metacharacters
within SQL LIKE clauses. JDBC provides syntax to force these characters to
be interpreted literally. The JDBC clause immediately following a LIKE expression
allows you to specify an escape character:</p></section>
<refsyn><title>Syntax</title> <codeblock><b>WHERE <i>CharacterExpression</i> [ NOT ] LIKE
<i>    CharacterExpressionWithWildCard</i>
    { ESCAPE '<i>escapeCharacter</i>' }</b></codeblock> </refsyn>
<example><title>Examples</title> 
<codeblock><b><ph>-- find all rows in which a begins with the character "%"</ph>
SELECT a FROM tabA WHERE a LIKE '$%%' {escape '$'}
<ph>-- find all rows in which a ends with the character "_"</ph>
SELECT a FROM tabA WHERE a LIKE '%=_' {escape '='}</b></codeblock> <note>?
is not permitted as an escape character if the LIKE pattern is also a dynamic
parameter (?).</note> <p>In some languages, a single character consists of
more than one collation unit (a 16-bit character). The <i>escapeCharacter</i> used
in the escape clause must be a single collation unit in order to work properly.</p> <p>You
can also use the escape character sequence for LIKE without using JDBC's curly
braces; see <xref href="rrefsqlj23075.dita#rrefsqlj23075"></xref>. </p> </example>
</refbody>
</reference>


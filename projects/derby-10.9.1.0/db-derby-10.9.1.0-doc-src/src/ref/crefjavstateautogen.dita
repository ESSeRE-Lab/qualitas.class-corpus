<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="crefjavstateautogen" xml:lang="en-us">
<title>Autogenerated keys</title>
<prolog><metadata>
<keywords><indexterm>autogenerated keys</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>JDBC's auto-generated keys feature provides a way to retrieve values
from columns that are part of an index or have a default value assigned. <ph
conref="../conrefs.dita#prod/productshortname"></ph> supports the auto-increment
feature, which allows users to create columns in tables for which the database
system automatically assigns increasing integer values. Users can call the method <i>Statement.getGeneratedKeys</i>
to retrieve the value of such a column. This method returns a <i>ResultSet</i> object
with a column for the automatically generated key. Calling <i>ResultSet.getMetaData</i> on
the <i>ResultSet</i> object returned by <i>getGeneratedKeys</i> produces a <i>ResultSetMetaData</i> object
that is similar to that returned by <xref href="rrefidentityvallocal.dita#rrefidentityvallocal">IDENTITY_VAL_LOCAL</xref>. </p>
<p> Users can indicate that auto-generated columns should be made available
for  retrieval by passing one of the following values as a second argument
to the  <i>Connection.prepareStatement</i>, <i>Statement.execute</i>, or  <i>Statement.executeUpdate</i> methods:</p>
<ul>
<li>A constant indicating that auto-generated keys should be made available.
 The specific constant to use is  <codeph>Statement.RETURN_GENERATED_KEYS</codeph>. </li>
<li>An array of the names of the columns in the inserted row that should be
 made available.  If any column name in the array does <i>not</i> designate
an  auto-increment column, <ph conref="../conrefs.dita#prod/productshortname"></ph> 
will throw an error with the  <ph conref="../conrefs.dita#prod/productshortname"></ph> embedded
driver. With the client driver, the one element column name is ignored currently and the value returned corresponds to the identity column. To ensure compatibility with future changes an application should ensure the column described is the identity column. If the column name corresponds to another column or a non-existent column then future changes may result in a value for a different column being returned or an exception being thrown.  </li>
<li>An array of the positions of the columns in the inserted row that should
be  made available. If any column position in the array does <i>not</i> correlate
 to an auto-increment column,  <ph conref="../conrefs.dita#prod/productshortname"></ph> will
throw an error with the  <ph conref="../conrefs.dita#prod/productshortname"></ph> embedded
driver. With the client driver, the one element position array is ignored currently and the value returned corresponds to the identity column. To ensure compatibility with future changes an application should ensure the column described is the identity column. If the position corresponds to another column or a non-existent column then future changes may result in a value for a different column being returned or an exception being thrown. </li>
</ul>
<section><title>Example</title> <p>Assume that we have a table TABLE1 defined
as follows:</p> <codeblock>CREATE TABLE TABLE1 (C11 int, C12 int GENERATED ALWAYS AS IDENTITY)
</codeblock> <p>The following three code fragments will all do the same thing:
that is, they  will create a <i>ResultSet</i> that contains the value of <codeph>C12</codeph> 
that is inserted into TABLE1.</p> <p>Code fragment 1:</p> <codeblock>
Statement stmt = conn.createStatement(); 
stmt.execute(
    "INSERT INTO TABLE1 (C11) VALUES (1)",
    Statement.RETURN_GENERATED_KEYS);
ResultSet rs = stmt.getGeneratedKeys();
</codeblock> <p>Code fragment 2:</p> <codeblock>
Statement stmt = conn.createStatement(); 
String [] colNames = new String [] { "C12" };
stmt.execute(
    "INSERT INTO TABLE1 (C11) VALUES (1)",
    colNames);
ResultSet rs = stmt.getGeneratedKeys();
</codeblock> <p>Code fragment 3:</p> <codeblock>
Statement stmt = conn.createStatement(); 
int [] colIndexes = new int [] { 2 };
stmt.execute(
    "INSERT INTO TABLE1 (C11) VALUES (1)",
    colIndexes);
ResultSet rs = stmt.getGeneratedKeys();
</codeblock> <p>If there is no indication that auto-generated columns should
be made  available for retrieval, a call to <i>Statement.getGeneratedKeys</i> will
 return a null <i>ResultSet</i>.</p> </section>
</conbody>
</concept>

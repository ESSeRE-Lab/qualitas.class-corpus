<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefsqlj57522" xml:lang="en-us">
<title>RIGHT OUTER JOIN operation</title>
<prolog><metadata>
<keywords><indexterm>RIGHT OUTER JOIN operation</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>A RIGHT OUTER JOIN is one of the <xref href="rrefsqlj29840.dita#rrefsqlj29840">JOIN
operations</xref> that allow you to specify a JOIN clause. It preserves the
unmatched rows from the second (right) table, joining them with a NULL in
the shape of the first (left) table. A LEFT OUTER JOIN B is equivalent to
B RIGHT OUTER JOIN A, with the columns in a different order.</p></section>
<refsyn><title>Syntax</title><codeblock><b><i><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i> RIGHT [ OUTER ] JOIN <i
><xref href="rreftableexpression.dita#rreftableexpression">TableExpression</xref></i>
{
    ON <i>booleanExpression</i> |
    <i><xref href="rrefsqljusing.dita#rrefsqljusing">USING clause</xref></i>
}</b></codeblock>

<p>The scope of expressions in the ON clause includes
the current tables and any tables in query blocks outer to the current SELECT.
 The ON clause can reference tables not being joined and does not have to
reference either of the tables being joined (though typically it does).</p> </refsyn>
<example> <title>Example 1</title><codeblock><b>-- get all countries and corresponding cities, including
-- countries without any cities</b>

SELECT COUNTRIES.COUNTRY, CITIES.CITY_NAME 
FROM CITIES 
RIGHT OUTER JOIN COUNTRIES 
ON CITIES.COUNTRY_ISO_CODE = COUNTRIES.COUNTRY_ISO_CODE

<b>-- get all countries in Africa and corresponding cities, including
-- countries without any cities
</b>
SELECT COUNTRIES.COUNTRY, CITIES.CITY_NAME
FROM CITIES 
RIGHT OUTER JOIN COUNTRIES 
ON CITIES.COUNTRY_ISO_CODE = COUNTRIES.COUNTRY_ISO_CODE
WHERE Countries.region = 'Africa'

<b>-- use the synonymous syntax, RIGHT JOIN, to achieve exactly
-- the same results as in the example above
</b>
SELECT COUNTRIES.COUNTRY, CITIES.CITY_NAME
FROM CITIES 
RIGHT JOIN COUNTRIES 
ON CITIES.COUNTRY_ISO_CODE = COUNTRIES.COUNTRY_ISO_CODE
WHERE Countries.region = 'Africa'
</codeblock> </example>
<example><title>Example 2</title><codeblock><b>-- a TableExpression can be a joinOperation. Therefore
-- you can have multiple join operations in a FROM clause
-- List every employee number and last name 
-- with the employee number and last name of their manager
</b>
SELECT E.EMPNO, E.LASTNAME, M.EMPNO, M.LASTNAME	
	FROM EMPLOYEE E RIGHT OUTER JOIN	
	DEPARTMENT RIGHT OUTER JOIN EMPLOYEE M 
        ON MGRNO = M.EMPNO
        ON E.WORKDEPT = DEPTNO</codeblock></example>
</refbody>
</reference>

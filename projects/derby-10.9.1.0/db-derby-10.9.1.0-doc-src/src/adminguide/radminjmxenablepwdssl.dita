<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="radminjmxenablepwdssl" xml:lang="en-us">
<title>Enabling remote JMX with password authentication and SSL</title>
<prolog><metadata>
<keywords><indexterm>Java Management Extensions (JMX) technology</indexterm>
<indexterm>JMX<indexterm>enabling with password authentication and SSL</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section>
<p>This example shows how to start the Network Server as follows:</p>
<ul>
<li>Using Oracle JDK 6 or later</li>
<li>Using a Java security manager and a custom policy file,
<codeph>jmx.policy</codeph></li>
<li>Allowing connections from remote hosts (that is, on all IPv4 network
interfaces) by specifying <codeph>-h 0.0.0.0</codeph></li>
<li>Using password authentication, as described in
<xref href="radminjmxenablepwd.dita#radminjmxenablepwd"></xref>, using the
<codeph>jmxremote.password</codeph> file</li>
<li>Using SSL (Secure Socket Layer) for the following:
<ul>
<li>Authenticating clients</li>
<li>Encrypting all JMX-related network communication</li>
<li>Protecting the RMI registry used by the MBean server</li>
</ul>
</li>
</ul>
<p>This level of protection may or may not be adequate for you, but it is more
secure than the previous examples.</p>
<p>The command line appears on multiple lines to improve readability, but you
would enter it as a single <codeph>java</codeph> command.</p>
<codeblock><b>java -Dcom.sun.management.jmxremote.port=9999 
-Dcom.sun.management.jmxremote.password.file=jmxremote.password 
-Djavax.net.ssl.keyStore=/home/user/.keystore 
-Djavax.net.ssl.keyStorePassword=myKeyStorePassword 
-Dcom.sun.management.jmxremote.ssl.need.client.auth=true 
-Djavax.net.ssl.trustStore=/home/user/.truststore 
-Djavax.net.ssl.trustStorePassword=myTrustStorePassword 
-Dcom.sun.management.jmxremote.registry.ssl=true 
-Djava.security.manager 
-Djava.security.policy=jmx.policy 
-jar lib/derbyrun.jar server start -h 0.0.0.0</b></codeblock>
<p><note>When password authentication is enabled and a Java Security Manager is
installed, a number of JMX-related permissions need to be granted to trusted
users in the security policy used. See
<xref href="radminjmxenablepolicy.dita#radminjmxenablepolicy"></xref> for
details.</note></p>
<p>In the example above, system properties specify the keystore containing the
server's key pair, the keystore password, the truststore containing the client
certificates, and the truststore password. Setting up SSL keystores and
truststores is partly described in
<xref href="cadminsslkeys.dita#cadminsslkeys"></xref>. Other topics in the
section <xref href="cadminssl.dita#cadminssl"></xref> provide information on
protecting database network traffic using SSL.</p>
<p>When you configure SSL as described above, the following requirements
apply:</p>
<ul>
<li>The password of the private key must be the same as the password of the
keystore.</li>
<li>If the keystore contains more than one key pair, the key pair you want to
use must be listed first among all the keys in the keystore. Otherwise, you
(or the clients) may see an exception with a message like the following:
<codeblock>unable to find valid certification path to requested target</codeblock>
</li>
</ul>
<p>The system property
<codeph>com.sun.management.jmxremote.ssl.need.client.auth=true</codeph>
specifies that clients must use SSL to authenticate themselves. This property,
as well as the truststore properties, may be removed if you do not want to
authenticate clients using SSL. However, there may be security risks associated
with using password authentication only.</p>
<p>The system property
<codeph>com.sun.management.jmxremote.registry.ssl=true</codeph> was new in
JDK 6 and aims at resolving security issues with the RMI registry used in
relation with JMX. This property must be used in conjunction with
<codeph>com.sun.management.jmxremote.ssl.need.client.auth=true</codeph> in order
to fully secure the RMI registry.</p>
<p>If you use a Java SE 5 JDK, clients must provide an additional entry in the
environment map passed to the <codeph>JMXConnector</codeph> when enabling SSL
protection of the registry:</p>
<codeblock>env.put("com.sun.jndi.rmi.factory.socket", new SslRMIClientSocketFactory());</codeblock>
<p>See <xref href="radminjmxcode.dita#radminjmxcode/connmbeanserver"></xref> for
details.</p>
<p>Clients must also specify and use proper keystores and/or truststores (the
truststores must contain the server's SSL certificate).</p>
<p>For more information about the system properties used above and potential
security risks, see "Monitoring and Management Using JMX Technology" at
<xref format="html"
href="http://docs.oracle.com/javase/7/docs/technotes/guides/management/agent.html"
scope="external">http://docs.oracle.com/javase/7/docs/technotes/guides/management/agent.html
</xref>.</p>
</section>
</refbody>
</reference>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cadminssl" xml:lang="en-us">
<title>Network encryption and authentication with SSL/TLS</title>
<prolog><metadata>
<keywords><indexterm>Network Server<indexterm>SSL</indexterm></indexterm><indexterm>Network Server<indexterm>TLS</indexterm></indexterm><indexterm>SSL</indexterm><indexterm>TLS</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>By default, all <ph
conref="../conrefs.dita#prod/productshortname"></ph> network traffic
is unencrypted, with the exception of user names and user passwords
which may be encrypted separately (See <xref
href="cadminappsclientsecurity.dita#cadminappsclientsecurity"></xref>). There
is also no network layer access control mechanism. For deployment
scenarios where these are possible security issues, <ph
conref="../conrefs.dita#prod/productshortname"></ph> Network Server
supports network security with Secure Socket Layer/Transport Layer
Security (SSL/TLS).
</p>
<p>With SSL/TLS, the client/server communication protocol is encrypted
and both the client and the server may independently of each other
require certificate based authentication of the other part.
</p><p> It is assumed that the reader is somewhat familiar with SSL,
key pairs and certificates. This documentation is also based on the
Java Development Kit (JDK) and its <codeph>keytool</codeph> application.
</p><p> For the remainder of this section, the term <i>SSL</i> is used
for SSL/TLS and the term <i>peer</i> is used for the other part of the
communication (The server's <i>peer</i> is the client and vice versa).
</p>
<p>SSL for <ph conref="../conrefs.dita#prod/productshortname"></ph>
(both for client and for server) operates in three possible modes:
<dl>
<dlentry><dt><b>off</b></dt><dd>The default, no SSL encryption</dd></dlentry>
<dlentry><dt><b>basic</b></dt><dd>SSL encryption, no peer authentication</dd></dlentry>
<dlentry><dt><b>peerAuthentication</b></dt><dd>SSL encryption and peer authentication</dd></dlentry>
</dl>
</p>
<p>
Peer authentication may be set either on the server or on the client
or on both. Peer authentication means that the other side of the SSL
connection is authenticated based on a trusted certificate installed
locally. 
</p>
<p>Alternatively, a Certification Authority (CA) certificate may be
installed locally and the peer has a certificate signed by that
authority. How to achieve this is not descibed in this
document. Consult your Java environment documentation for details on
this.
</p>
<p>
<note type="attention">
<i>If a plaintext client tries to communicate with an SSL server or an
SSL client tries to communicate with a plaintext server, the plaintext
side of the communication will see the SSL communication as noise and
report protocol errors.</i>
</note>
</p>
</conbody>
</concept>

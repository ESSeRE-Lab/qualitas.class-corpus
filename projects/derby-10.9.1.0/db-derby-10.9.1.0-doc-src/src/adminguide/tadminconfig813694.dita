<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
 "../dtd/task.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<task id="tadminconfig813694" xml:lang="en-us">
<title>Using the NetworkServerControl API</title>
<prolog><metadata>
<keywords><indexterm>NetworkServerControl class</indexterm><indexterm>NetworkServerControl
API<indexterm>NetworkServerControl class and</indexterm></indexterm></keywords>
</metadata></prolog>
<taskbody>
<context> <p>You need to create an instance of the NetworkServerControl class
if you are using the API. There are four constructors for this class:</p><note>Before
enabling connections from other systems, ensure that you are running under
a security manager.</note></context>
<steps-unordered>
<step><cmd>NetworkServerControl()</cmd><stepresult><p>This constructor
creates an instance that listens either on the default port (1527) or the
port that is set by the <codeph>derby.drda.portNumber</codeph> property. It
will also listen on the host set by the <codeph>derby.drda.host</codeph> property
or the loopback address if the property is not set. This is the default constructor;
it does not allow remote connections. It is equivalent to calling NetworkServerControl(InetAddress.getByName("localhost"),1527)
if no properties are set.</p></stepresult></step>
<step><cmd>NetworkServerControl(InetAddress address, int portNumber)</cmd>
<stepresult><p>This constructor creates an instance that listens on
the specified <codeph>portNumber</codeph> on the specified address. The <codeph>InetAddress</codeph> will
be passed to <codeph>ServerSocket</codeph>. NULL is an invalid address value.
 The following examples show how you might allow Network Server to accept
connections from other hosts: <codeblock>//accepts connections from other hosts on an IPv4 system
NetworkServerControl serverControl = 
  new NetworkServerControl(InetAddress.getByName("0.0.0.0"),1527);</codeblock> <codeblock>//accepts connections from other hosts on an IPv6 system
NetworkServerControl serverControl = 
  new NetworkServerControl(InetAddress.getByName("::"),1527);</codeblock></p></stepresult>
</step>
<step><cmd>NetworkServerControl(String userName, String password)</cmd>
<stepresult><p>If a network server should run with user authentication,
certain operations like NetworkServerControl.shutdown()
require that you provide user credentials. This constructor creates an instance
with user credentials, which are then used for operations
that require them. In all other aspects, this constructor behaves like
NetworkServerControl().</p></stepresult>
</step>
<step><cmd>NetworkServerControl(InetAddress address, int portNumber, String userName, String password)</cmd>
<stepresult><p>This constructor creates an instance with user
credentials, which are then used for operations that require them. In
all other aspects, this constructor behaves like
NetworkServerControl(InetAddress address, int portNumber).</p></stepresult>
</step>
</steps-unordered>
</taskbody>
</task>

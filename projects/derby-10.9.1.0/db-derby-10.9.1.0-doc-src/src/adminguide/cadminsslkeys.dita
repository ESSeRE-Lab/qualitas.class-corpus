<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cadminsslkeys" xml:lang="en-us">
<title>Key and certificate handling</title>
<prolog><metadata>
<keywords><indexterm>Network Server<indexterm>SSL</indexterm></indexterm><indexterm>Network Server<indexterm>TLS</indexterm></indexterm><indexterm>SSL<indexterm>key</indexterm><indexterm>certificate</indexterm></indexterm><indexterm>TLS</indexterm></keywords>
</metadata></prolog>

<conbody>
<p>
For SSL operation, the server always needs a key pair. If the server
runs in peer authentication mode (the server authenticates the
clients), then each client needs its own key pair. In general, if one
end of the communication wants to authenticate its partner, then the
first end needs to install a certificate generated by the partner.
</p>
<p>
The key pair is located in a file which is called a <i>key store</i>
and the JDK's SSL provider needs the system properties
<codeph>javax.net.ssl.keyStore</codeph> and
<codeph>javax.net.ssl.keyStorePassword</codeph> to access the key
store.
</p>
<p>
The certificates of trusted parties are installed in a file called a
<i>trust store</i>. The JDK's SSL provider needs the system properties
<codeph>javax.net.ssl.trustStore</codeph> and
<codeph>javax.net.ssl.trustStorePassword</codeph> to access the trust
store.
</p>

<section>
<title>Key pair generation</title>
<p>Key pairs are generated with <codeph>keytool -genkey</codeph>. The
simplest way to generate a key pair is to do the following:</p>
<codeblock>keytool -genkey &lt;alias&gt; -keystore &lt;keystore&gt;</codeblock>
<p><codeph>keytool</codeph> will prompt for needed information like
identity details and passwords. </p>
<p>
Consult the JDK documentation for more information on
<codeph>keytool</codeph>.
</p>
</section>

<section>
<title>Certificate generation</title>
<p>Certificates are generated with <codeph>keytool -export</codeph>
as follows:</p>
<codeblock>keytool -export -alias &lt;alias&gt; -keystore &lt;keystore&gt; \
        -rfc -file &lt;certificate file&gt;</codeblock>
<p>The certificate file may then be distributed to the relevant parties.</p>
</section>

<section>
<title>Certificate installation</title>
<p>Installation of a certificate in a trust store is done with 
<codeph>keytool -import</codeph> as follows:</p>
<codeblock>keytool -import -alias &lt;alias&gt; -file &lt;certificate file&gt; \
        -keystore &lt;trust store&gt;</codeblock>
</section>

<example>
<title>Examples</title>
<p>Generate the server key pair:</p>
<codeblock>keytool -genkey -alias myDerbyServer -keystore serverKeyStore.key</codeblock>
<p>Generate a server certificate:</p>
<codeblock>keytool -export -alias myDerbyServer -keystore serverKeyStore.key \
        -rfc -file myServer.cert</codeblock>
<p>Generate a client key pair:</p>
<codeblock>keytool -genkey -alias aDerbyClient -keystore clientKeyStore.key</codeblock>
<p>Generate a client certficate:</p>
<codeblock>keytool -export -alias aDerbyClient -keystore clientKeyStore.key \
        -rfc -file aClient.cert</codeblock>
<p>Install a client certificate in the server's trust store:</p>
<codeblock>keytool -import -alias aDerbyClient -file aClient.cert 
        -keystore serverTrustStore.key</codeblock>
<p>Install the server certificate in a client's trust store:</p>
<codeblock>keytool -import -alias myDerbyServer -file myServer.cert 
        -keystore clientTrustStore.key</codeblock>
</example>

</conbody>
</concept>
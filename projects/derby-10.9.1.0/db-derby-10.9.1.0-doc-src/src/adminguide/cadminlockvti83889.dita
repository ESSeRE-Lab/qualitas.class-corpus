<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<concept id="cadminlockvti83889" xml:lang="en-us">
<title>Monitoring deadlocks</title>
<shortdesc>The <codeph>derby.stream.error.logSeverityLevel</codeph> property determines the
level of error that you are informed about.</shortdesc>
<prolog><metadata>
<keywords><indexterm>derby.locks.deadlockTrace</indexterm><indexterm>derby.locks.monitor</indexterm>
<indexterm>derby.stream.error.logSeverityLevel</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>By default, <codeph>derby.stream.error.logSeverityLevel</codeph> is
set to 40000. If <codeph>derby.stream.error.logSeverityLevel</codeph> is
set to display transaction-level errors (that is, if it is set to a value
less than 40000), deadlock errors are logged to the <codeph>derby.log</codeph> file.
If it is set to a value of 40000 or higher, deadlock errors are not logged
to the <codeph>derby.log</codeph> file.</p>
<p>The <codeph>derby.locks.monitor</codeph> property ensures that deadlock errors are
logged regardless of the value of <codeph>derby.stream.error.logSeverityLevel</codeph>.
When <codeph>derby.locks.monitor</codeph> is set to true, all
locks that are involved in deadlocks are written to <codeph>derby.log</codeph> along with a unique
number that identifies the lock.</p>
<p>To see a thread's stack trace when a lock is requested, set <codeph>derby.locks.deadlockTrace</codeph> to
true. This property is ignored if <codeph>derby.locks.monitor</codeph> is
set to false.</p>
<note>Use <codeph>derby.locks.deadlockTrace</codeph> with care. Setting this property
can alter the timing of the application, severely affect performance, and
produce a very large <codeph>derby.log</codeph> file.</note>
<p>For information about working with properties, see the
<ph conref="../conrefs.dita#pub/citdevelop"></ph>. For information about the
specific properties that are mentioned in this topic, see the
<ph conref="../conrefs.dita#pub/citref"></ph>.</p>
<p>Here is an example of an error message when <ph conref="../conrefs.dita#prod/productshortname"></ph> aborts
a transaction because of a deadlock:</p>
<codeblock>--SQLException Caught--

SQLState: 40001 =
Error Code: 30000 
Message: A lock could not be obtained due to a deadlock,
cycle of locks and waiters is: Lock : ROW, DEPARTMENT, (1,14)
Waiting XID : {752, X} , APP, update department set location='Boise'
	where deptno='E21'
Granted XID : {758, X} Lock : ROW, EMPLOYEE, (2,8)
Waiting XID : {758, U} , APP, update employee set bonus=150 where salary=23840
Granted XID : {752, X} The selected victim is XID : 752</codeblock>
<note>You can use the <codeph>derby.locks.waitTimeout</codeph> and
<codeph>derby.locks.deadlockTimeout</codeph> properties
to configure how long <ph conref="../conrefs.dita#prod/productshortname"></ph> waits
for a lock to be released, or when to begin deadlock checking. For more information
about these properties, see the section that discusses controlling <ph conref="../conrefs.dita#prod/productshortname"></ph> application
behavior in the <i><ph conref="../conrefs.dita#pub/citdevelop"></ph></i>.</note>
</conbody>
</concept>


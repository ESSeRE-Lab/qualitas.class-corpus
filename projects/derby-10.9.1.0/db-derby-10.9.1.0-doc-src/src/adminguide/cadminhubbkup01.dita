<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cadminhubbkup01" xml:lang="en-us">
<title>Using the backup procedures to perform an online backup</title>
<shortdesc>Use the SYSCS_UTIL.SYSCS_BACKUP_DATABASE procedure or one of the
other system backup procedures to perform an
online backup of a database to a specified location.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Backup procedure</indexterm><indexterm>SYSCS_BACKUP_DATABASE()
system procedure</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>The backup procedures are as follows:</p>
<ul>
<li>SYSCS_UTIL.SYSCS_BACKUP_DATABASE</li>
<li>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT</li>
<li>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE</li>
<li>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT </li>
</ul>
<p>Use the SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE
procedure if you want to make it possible to perform a roll-forward recovery of
a damaged database. See
<xref href="cadminrollforward.dita#cadminrollforward"></xref> for details.</p>
<p>The NOWAIT versions of the procedures do not wait for transactions
in progress with unlogged operations to complete before proceeding with the
backup; instead, they return an error immediately.</p>
<p>See the <ph conref="../conrefs.dita#pub/citref"></ph> for details about these
system procedures.</p>
<p>The SYSCS_UTIL.SYSCS_BACKUP_DATABASE procedure takes a string argument
that represents the location in which to back up the database. Typically,
you provide the full path to the backup directory. (Relative paths are interpreted
as relative to the current directory, not to the derby.system.home directory.)</p>
<p>For example, to specify a backup location of <filepath>c:/mybackups/2012-04-01</filepath> for
a database that is currently open, use the following statement (forward slashes
are used as path separators in SQL commands):</p>
<codeblock><b>CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE('c:/mybackups/2012-04-01')</b></codeblock>
<p>The SYSCS_UTIL.SYSCS_BACKUP_DATABASE procedure puts the database
into a state in which it can be safely copied. The procedure then copies the
entire original database directory (including data files, online transaction log
files, and jar files) to the specified backup directory. Files that are not
within the original database directory (for example, <i>derby.properties</i>)
are <i>not</i> copied. With the exception of a few cases mentioned in 
<xref href="cadminhubbkup01.dita#cadminhubbkup01/hubbkupunlogged"></xref>,
the procedure does not block concurrent transactions at any time.</p>
<p>The following example shows how to back up a database to a directory with
a name that reflects the current date:</p>
<codeblock>public static void backUpDatabase(Connection conn)throws SQLException
{
<b>// Get today's date as a string:</b>
java.text.SimpleDateFormat todaysDate = 
   new java.text.SimpleDateFormat("yyyy-MM-dd");
String backupdirectory = "c:/mybackups/" +
   todaysDate.format((java.util.Calendar.getInstance()).getTime());

CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)"); 
cs.setString(1, backupdirectory);
cs.execute(); 
cs.close();
System.out.println("backed up database to "+backupdirectory);
}</codeblock>
<p>For a database that was backed up on 2012-04-01, the previous commands
copy the current database to a directory of the same name in <i>c:/mybackups/2012-04-01</i>.</p>
<p>Uncommitted transactions do not appear in the backed-up database.</p>
<note>Do not back up different databases with the same name to the same backup
directory. If a database of the same name already exists in the backup directory,
it is assumed to be an older version and is overwritten.</note>
<section id="hubbkupunlogged"><title>Unlogged Operations</title>
<p>
For some operations, Derby does not log because it can keep the database
consistent without logging the data.
</p>
<p>The SYSCS_UTIL.SYSCS_BACKUP_DATABASE procedure will issue an error if there
are any unlogged operations in the same transaction as the backup procedure.</p>
<p>If any unlogged operations are in progress in other transactions in the
system when the backup starts, this procedure will block until those transactions
are complete before performing the backup.</p>
<p>Derby automatically converts unlogged operations to logged mode if they
are started while the backup is in progress (except operations that maintain
application jar files in the database). Procedures to install, replace, and
remove jar files in a database are blocked while the backup is in progress.</p>
<p>If you do not want backup to block until unlogged operations in other transactions
are complete, use the SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT procedure. 
This procedure issues an error immediately at the start of the backup if there
are any transactions in progress with unlogged operations, instead of waiting
for those transactions to complete.</p>
<p>Unlogged operations include:
<ol>
<li>Index creation.
<p>
Only CREATE INDEX is logged, not all the data inserts into the
index. The reason inserts into the index are not logged is:
if there is a failure , it will just drop the index.
</p><p>
If you create an index when the backup is in progress, it will be
slower because it has to be logged.
</p><p>
Foreign Keys , Primary Keys create backing indexes. Adding those keys
to an existing table with data will also run slower.
</p></li>
<li>Import to an empty table or replacing all the data in a table.
<p>
In this case also, data inserts into table are not logged. Internally,
Derby creates a new table for the import and changes the catalogs to
point to the new table and drops the original table when import
completes.
</p><p>
If you perform such an import operation when backup is in progress ,
it will be slower because data is logged.
</p></li>
</ol>
</p></section>
</conbody>
</concept>

<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cadminreplicstartrun" xml:lang="en-us">
<title>Starting and running replication</title>
<prolog><metadata><keywords>
<indexterm>replicating databases<indexterm>starting and running</indexterm></indexterm>
<indexterm>database replication<indexterm>starting and running</indexterm></indexterm>
</keywords></metadata></prolog>
<conbody>
<p>Each replicated database is replicated from a master to a slave version of
that database. Initially there is no replication; a master database must be
created before it can be replicated. The database may, of course, be empty when
replication starts. On the other hand, replication does not need to be specified
immediately after the database is created; it can be initiated at any time after
the database is created.
</p>
<p>Before you start replication, you must shut down the master database and then
copy the database to the slave location. Follow these
steps to start replication:
</p>
<ol>
<li>Make sure that the database on the master system is shut down cleanly.</li>
<li>Copy the database to the slave location.</li>
<li>Start slave replication mode on the Derby instance that is acting
as the slave for the database. To start slave replication, use the
<i>startSlave=true</i> attribute and, optionally, the <i>slaveHost=hostname</i>
and <i>slavePort=portValue</i> attributes. For example, for a database named
<codeph>wombat</codeph>, you might use the following connection URL:
<codeblock>
jdbc:derby:wombat;startSlave=true
</codeblock></li>
<li>Start master replication mode on the Derby instance that is acting as the
master for the database. To start replication, connect to the database on the
master system using the <i>startMaster=true</i> attribute in conjunction with
the <i>slaveHost=hostname</i> attribute (and, optionally, the
<i>slavePort=portValue</i> attribute). For example, you might use the following
connection URL:
<codeblock>
jdbc:derby:wombat;startMaster=true;slaveHost=myremotesystem
</codeblock>
A successful use of the <i>startMaster=true</i> attribute will also start the
database.
</li>
</ol>
<p>See the <ph conref="../conrefs.dita#pub/citref"></ph> for details about these
attributes.</p>
<p>After replication has been started, the slave
is ready to receive logged operations from the master. The master can now
continue to process transactions. From this point on, the master forwards all
logged operations to the slave in chunks. The slave repeats
these operations by applying the contents of the <ph
conref="../conrefs.dita#prod/productshortname"></ph> transaction log, but does
not process any other operations. Attempts to connect to the slave database are
refused. In case of failure, the slave can recover to the state the master was
in at the time the last chunk of the transaction log was sent.
</p>
<p> While replication is running, neither the slave or the master database is
permitted to be shut down. Replication must be stopped before you can shut down
either the slave or the master database. There is one exception to this rule:
if the entire system is shut down, the peer that is shut down notifies the other
replication peer that replication is stopped.</p>
<p>If you install jar files on the master system while replication is running,
the same jars are not automatically installed on the slave. But because the
transaction log information sent to the slave system includes the jar file
installation, the slave database has a record of the jar files, even though they
are not actually there. Therefore, you must install the jar files on the former
slave after a failover by calling either <codeph>SQLJ.remove_jar</codeph>
followed by <codeph>SQLJ.install_jar</codeph>, or
<codeph>SQLJ.replace_jar</codeph>. (For information on installing jar files, see
"Loading classes from a database" in the 
<ph conref="../conrefs.dita#pub/citdevelop"></ph> and
"System procedures for storing jar files in a database" in the
<ph conref="../conrefs.dita#pub/citref"></ph>.)</p>
<p>If the jar files must be available to clients immediately after a failover,
you must stop replication and then start replication over again from the
beginning, so that the slave database will have the same jar files as the
master.</p>
</conbody>
</concept>

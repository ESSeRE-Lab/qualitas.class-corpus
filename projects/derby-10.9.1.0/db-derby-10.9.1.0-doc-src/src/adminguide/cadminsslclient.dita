<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cadminsslclient" xml:lang="en-us">
<title>Running the client with SSL/TLS</title>
<prolog><metadata>
<keywords><indexterm>Network Client<indexterm>SSL</indexterm></indexterm><indexterm>Network Client<indexterm>TLS</indexterm></indexterm><indexterm>SSL</indexterm><indexterm>TLS</indexterm></keywords>
</metadata></prolog>
<conbody>
<p>Basic SSL encryption on the client is enabled either by the URL attribute
<codeph>ssl</codeph>, the property <codeph>ssl</codeph> or the
datasource attribute <codeph>ssl</codeph> set to <codeph>basic</codeph>.</p>

<example><title>Example</title>
<codeblock>Connection c = 
   getConnection("jdbc:derby://myhost:1527/db;ssl=basic");</codeblock>
</example>

<section>
<title>Running a client which authenticates the server</title>
<p>If the client wants to authenticate the server, then the client's
<i>trust store</i> must contain the server's certificate. See <xref
href="cadminsslkeys.dita#cadminsslkeys"></xref>.</p>

<p>Client SSL with server authentication is enabled by the URL
attribute <codeph>ssl</codeph> or the property <codeph>ssl</codeph>
set to <codeph>peerAuthentication</codeph>. In addition, the system
properties <codeph>javax.net.ssl.trustStore</codeph> and 
<codeph>javax.net.ssl.trustStorePassword</codeph> need to be set.</p>
</section>
<example><title>Example</title>
<codeblock>    System.setProperty("javax.net.ssl.trustStore","clientTrustStore.key");
    System.setProperty("javax.net.ssl.trustStorePassword","qwerty");
    Connection c = 
       getConnection("jdbc:derby://myhost:1527/db;ssl=peerAuthentication");</codeblock>
</example>

<section>
<title>Running the client when the server does client authentication</title>
<p>If the server does client authentication, the client will need a key
pair and a client certificate which is installed in the server's
<i>trust store</i>, See <xref
href="cadminsslkeys.dita#cadminsslkeys"></xref>.</p> 
<p>The client needs to set <codeph>javax.net.ssl.keyStore</codeph> and
<codeph>javax.net.ssl.keyStorePassword</codeph>.</p> 
</section>

<example><title>Example</title>
<codeblock>    System.setProperty("javax.net.ssl.keyStore","clientKeyStore.key");
    System.setProperty("javax.net.ssl.keyStorePassword","qwerty");
    Connection c = 
       getConnection("jdbc:derby://myhost:1527/db;ssl=basic");</codeblock>
</example>

<section>
<title>Running the client when both parties do peer
authentication</title>
<p>This is a combination of the two last variants.</p>
</section>

<example><title>Example</title>
<codeblock>    System.setProperty("javax.net.ssl.keyStore","clientKeyStore.key");
    System.setProperty("javax.net.ssl.keyStorePassword","qwerty");
    System.setProperty("javax.net.ssl.trustStore","clientTrustStore.key");
    System.setProperty("javax.net.ssl.trustStorePassword","qwerty");
    Connection c = 
       getConnection("jdbc:derby://myhost:1527/db;ssl=peerAuthentication");</codeblock>
</example>

</conbody>
</concept>


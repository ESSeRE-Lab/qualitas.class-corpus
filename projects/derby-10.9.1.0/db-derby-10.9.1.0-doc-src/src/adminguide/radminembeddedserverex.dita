<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="radminembeddedserverex" xml:lang="en-us">
<title>Embedded server example</title>
<prolog><metadata>
<keywords><indexterm>Embedded server example</indexterm></keywords>
</metadata></prolog>
<refbody>
<section><p>You can start the Network Server in another thread automatically
when <ph conref="../conrefs.dita#prod/productshortname"></ph> starts by setting
the <i>derby.drda.startNetworkServer</i> property (see <xref href="tadminconfigsettingnetwrokserverproperties.dita#tadminconfigsettingnetwrokserverproperties"></xref>), or you can start it by using a program. The following example shows how to start the Network Server by using a program:</p></section>
<example> <codeblock>import org.apache.derby.drda.NetworkServerControl;
import java.net.InetAddress;
NetworkServerControl server = new NetworkServerControl
	(InetAddress.getByName("localhost"),1527);
server.start(null);</codeblock></example>
<section><p>The program that starts the Network Server can access the database
by using either the embedded driver or the Network Client driver.
The server framework's attempt to boot the local JDBC driver is ignored because
it has already been booted within the application's JVM. The server framework
simply accesses the instance of <ph conref="../conrefs.dita#prod/productshortname"></ph> that is already booted. There is no conflict between the application and the server framework.</p></section>
<section><p>The remote client can then connect through the <ph conref="../conrefs.dita#prod/productshortname"></ph> client
driver:</p></section>
<section><p> <codeblock>String nsURL="jdbc:derby://localhost:1527/sample";  
java.util.Properties props = new java.util.Properties();
props.setProperty("user","usr");
props.setProperty("password","pwd");

/*
    If you are running on JDK 6 or higher, you do not
    need to invoke Class.forName(). In that environment, the
    ClientDriver loads automatically.
*/
Class.forName("org.apache.derby.jdbc.ClientDriver");
Connection conn = DriverManager.getConnection(nsURL, props);

/*interact with <ph conref="../conrefs.dita#prod/productshortname"></ph>*/
Statement s = conn.createStatement();

ResultSet rs = s.executeQuery(
"SELECT * FROM HotelBookings");</codeblock></p></section>
</refbody>
</reference>
